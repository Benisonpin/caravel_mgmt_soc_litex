//--------------------------------------------------------------------------------
// Auto-generated by Migen (7507a2b) & LiteX (3b078b8) on 2021-11-09 12:44:45
//--------------------------------------------------------------------------------
module mgmt_core(
	input wire core_clk,
	input wire core_rst,
	output reg spi_clk,
	output reg spi_cs_n,
	output reg spi_mosi,
	input wire spi_miso,
	output wire flash_cs_n,
	output reg flash_clk,
	output reg flash_io0_oeb,
	input wire flash_io1_oeb,
	input wire flash_io2_oeb,
	input wire flash_io3_oeb,
	output reg flash_io0_do,
	input wire flash_io1_do,
	input wire flash_io2_do,
	input wire flash_io3_do,
	input wire flash_io0_di,
	input wire flash_io1_di,
	input wire flash_io2_di,
	input wire flash_io3_di,
	input wire serial_dbg_rx,
	output reg serial_dbg_tx,
	input wire ser_rx,
	output reg ser_tx,
	output wire gpio_out_pad,
	input wire gpio_in_pad,
	output wire gpio_outenb_pad,
	output wire gpio_inenb_pad,
	output wire gpio_mode0_pad,
	output wire gpio_mode1_pad,
	output reg [127:0] la_output,
	input wire [127:0] la_input,
	output reg [127:0] la_oenb,
	output reg [127:0] la_iena,
	output wire mprj_wb_iena,
	output wire [2:0] user_irq_ena,
	input wire [5:0] user_irq
);

wire sys_clk;
wire sys_rst;
wire por_clk;
reg main_int_rst = 1'd1;
reg main_soc_rst = 1'd0;
wire main_cpu_rst;
reg [1:0] main_reset_storage = 2'd0;
reg main_reset_re = 1'd0;
reg [31:0] main_scratch_storage = 32'd305419896;
reg main_scratch_re = 1'd0;
wire [31:0] main_bus_errors_status;
wire main_bus_errors_we;
reg main_bus_errors_re = 1'd0;
wire main_bus_error;
reg [31:0] main_bus_errors = 32'd0;
wire main_picorv32_trap;
wire main_picorv32_reset;
reg [31:0] main_picorv32_interrupt = 32'd0;
wire [29:0] main_picorv32_idbus_adr;
wire [31:0] main_picorv32_idbus_dat_w;
wire [31:0] main_picorv32_idbus_dat_r;
wire [3:0] main_picorv32_idbus_sel;
wire main_picorv32_idbus_cyc;
wire main_picorv32_idbus_stb;
wire main_picorv32_idbus_ack;
wire main_picorv32_idbus_we;
wire [2:0] main_picorv32_idbus_cti;
wire [1:0] main_picorv32_idbus_bte;
wire main_picorv32_idbus_err;
wire main_picorv32_mem_valid;
wire main_picorv32_mem_instr;
wire main_picorv32_mem_ready;
wire [31:0] main_picorv32_mem_addr;
wire [31:0] main_picorv32_mem_wdata;
wire [3:0] main_picorv32_mem_wstrb;
wire [31:0] main_picorv32_mem_rdata;
wire main_picorv320;
wire main_picorv321;
wire [31:0] main_picorv322;
wire [31:0] main_picorv323;
wire [3:0] main_picorv324;
wire main_picorv325;
wire [31:0] main_picorv326;
wire [31:0] main_picorv327;
wire [31:0] main_picorv328;
wire [31:0] main_picorv329;
wire main_start0;
wire [7:0] main_length0;
reg main_done0 = 1'd0;
reg main_irq = 1'd0;
wire [7:0] main_mosi;
reg [7:0] main_miso = 8'd0;
wire main_cs;
wire main_cs_mode;
wire main_loopback;
wire [15:0] main_clk_divider0;
reg main_start1 = 1'd0;
wire [7:0] main_length1;
reg [15:0] main_control_storage = 16'd0;
reg main_control_re = 1'd0;
wire main_done1;
wire main_status_status;
wire main_status_we;
reg main_status_re = 1'd0;
reg [7:0] main_mosi_storage = 8'd0;
reg main_mosi_re = 1'd0;
wire [7:0] main_miso_status;
wire main_miso_we;
reg main_miso_re = 1'd0;
wire main_sel;
wire main_mode0;
reg [16:0] main_cs_storage = 17'd1;
reg main_cs_re = 1'd0;
wire main_mode1;
reg main_loopback_storage = 1'd0;
reg main_loopback_re = 1'd0;
reg main_clk_enable = 1'd0;
reg main_xfer_enable = 1'd0;
reg [2:0] main_count = 3'd0;
reg main_mosi_latch = 1'd0;
reg main_miso_latch = 1'd0;
reg [15:0] main_clk_divider1 = 16'd0;
wire main_clk_rise;
wire main_clk_fall;
reg [7:0] main_mosi_data = 8'd0;
reg [2:0] main_mosi_sel = 3'd0;
reg [7:0] main_miso_data = 8'd0;
reg [15:0] main_spimaster_storage = 16'd100;
reg main_spimaster_re = 1'd0;
wire [29:0] main_bus_adr;
wire [31:0] main_bus_dat_w;
reg [31:0] main_bus_dat_r = 32'd0;
wire [3:0] main_bus_sel;
wire main_bus_cyc;
wire main_bus_stb;
reg main_bus_ack = 1'd0;
wire main_bus_we;
wire [2:0] main_bus_cti;
wire [1:0] main_bus_bte;
reg main_bus_err = 1'd0;
wire [31:0] main_datain;
wire [31:0] main_dataout;
reg [3:0] main_maskwren = 4'd0;
reg main_wren_b = 1'd0;
reg main_cs_b = 1'd0;
reg main_litespisdrphycore_source_valid = 1'd0;
wire main_litespisdrphycore_source_ready;
reg main_litespisdrphycore_source_first = 1'd0;
reg main_litespisdrphycore_source_last = 1'd0;
wire [31:0] main_litespisdrphycore_source_payload_data;
wire main_litespisdrphycore_sink_valid;
reg main_litespisdrphycore_sink_ready = 1'd0;
wire main_litespisdrphycore_sink_first;
wire main_litespisdrphycore_sink_last;
wire [31:0] main_litespisdrphycore_sink_payload_data;
wire [5:0] main_litespisdrphycore_sink_payload_len;
wire [3:0] main_litespisdrphycore_sink_payload_width;
wire [7:0] main_litespisdrphycore_sink_payload_mask;
wire main_litespisdrphycore_cs;
wire [7:0] main_litespisdrphycore_spi_clk_divisor;
reg [7:0] main_litespisdrphycore_storage = 8'd1;
reg main_litespisdrphycore_re = 1'd0;
wire [7:0] main_litespisdrphycore_div;
wire [7:0] main_litespisdrphycore_sample_cnt;
wire [7:0] main_litespisdrphycore_update_cnt;
wire main_litespisdrphycore_posedge;
wire main_litespisdrphycore_negedge;
wire main_litespisdrphycore_sample;
wire main_litespisdrphycore_update;
reg main_litespisdrphycore_en = 1'd0;
reg [7:0] main_litespisdrphycore_cnt = 8'd0;
reg main_litespisdrphycore_en_int = 1'd0;
reg main_litespisdrphycore_clk = 1'd0;
reg main_litespisdrphycore_posedge_reg = 1'd0;
reg main_litespisdrphycore_posedge_reg2 = 1'd0;
wire main_litespisdrphycore_wait;
wire main_litespisdrphycore_done;
reg [3:0] main_litespisdrphycore_count = 4'd11;
wire main_litespisdrphycore_cs_enable;
reg main_litespisdrphycore_dq_o = 1'd0;
reg [1:0] main_litespisdrphycore_dq_i = 2'd0;
wire main_litespisdrphycore_dq_oe;
reg [7:0] main_litespisdrphycore_sr_cnt = 8'd0;
reg main_litespisdrphycore_sr_out_load = 1'd0;
reg main_litespisdrphycore_sr_out_shift = 1'd0;
reg [31:0] main_litespisdrphycore_sr_out = 32'd0;
reg main_litespisdrphycore_sr_in_shift = 1'd0;
reg [31:0] main_litespisdrphycore_sr_in = 32'd0;
reg main_litespisdrphycore0 = 1'd0;
reg [1:0] main_litespisdrphycore1 = 2'd0;
reg [3:0] main_litespisdrphycore2 = 4'd0;
reg [7:0] main_litespisdrphycore3 = 8'd0;
wire main_crossbar_source_valid;
wire main_crossbar_source_ready;
wire main_crossbar_source_first;
wire main_crossbar_source_last;
wire [31:0] main_crossbar_source_payload_data;
wire [5:0] main_crossbar_source_payload_len;
wire [3:0] main_crossbar_source_payload_width;
wire [7:0] main_crossbar_source_payload_mask;
wire main_crossbar_sink_valid;
wire main_crossbar_sink_ready;
wire main_crossbar_sink_first;
wire main_crossbar_sink_last;
wire [31:0] main_crossbar_sink_payload_data;
reg main_crossbar_cs = 1'd0;
reg main_litespimmap_source_valid = 1'd0;
wire main_litespimmap_source_ready;
reg main_litespimmap_source_first = 1'd0;
reg main_litespimmap_source_last = 1'd0;
reg [31:0] main_litespimmap_source_payload_data = 32'd0;
reg [5:0] main_litespimmap_source_payload_len = 6'd0;
reg [3:0] main_litespimmap_source_payload_width = 4'd0;
reg [7:0] main_litespimmap_source_payload_mask = 8'd0;
wire main_litespimmap_sink_valid;
reg main_litespimmap_sink_ready = 1'd0;
wire main_litespimmap_sink_first;
wire main_litespimmap_sink_last;
wire [31:0] main_litespimmap_sink_payload_data;
wire [29:0] main_litespimmap_bus_adr;
wire [31:0] main_litespimmap_bus_dat_w;
reg [31:0] main_litespimmap_bus_dat_r = 32'd0;
wire [3:0] main_litespimmap_bus_sel;
wire main_litespimmap_bus_cyc;
wire main_litespimmap_bus_stb;
reg main_litespimmap_bus_ack = 1'd0;
wire main_litespimmap_bus_we;
wire [2:0] main_litespimmap_bus_cti;
wire [1:0] main_litespimmap_bus_bte;
reg main_litespimmap_bus_err = 1'd0;
reg main_litespimmap_cs = 1'd0;
reg main_litespimmap_burst_cs = 1'd0;
reg [29:0] main_litespimmap_burst_adr = 30'd0;
reg main_litespimmap_wait = 1'd0;
wire main_litespimmap_done;
reg [8:0] main_litespimmap_count = 9'd256;
reg [7:0] main_litespimmap_storage = 8'd0;
reg main_litespimmap_re = 1'd0;
wire [7:0] main_litespimmap_spi_dummy_bits;
reg [31:0] main_litespimmap_dummy = 32'd57005;
reg [1:0] main_litespimmap = 2'd0;
wire main_port_mmap_user_port_source_valid;
wire main_port_mmap_user_port_source_ready;
wire main_port_mmap_user_port_source_first;
wire main_port_mmap_user_port_source_last;
wire [31:0] main_port_mmap_user_port_source_payload_data;
wire main_port_mmap_user_port_sink_valid;
wire main_port_mmap_user_port_sink_ready;
wire main_port_mmap_user_port_sink_first;
wire main_port_mmap_user_port_sink_last;
wire [31:0] main_port_mmap_user_port_sink_payload_data;
wire [5:0] main_port_mmap_user_port_sink_payload_len;
wire [3:0] main_port_mmap_user_port_sink_payload_width;
wire [7:0] main_port_mmap_user_port_sink_payload_mask;
wire main_port_mmap_internal_port_source_valid;
wire main_port_mmap_internal_port_source_ready;
wire main_port_mmap_internal_port_source_first;
wire main_port_mmap_internal_port_source_last;
wire [31:0] main_port_mmap_internal_port_source_payload_data;
wire main_port_mmap_internal_port_sink_valid;
wire main_port_mmap_internal_port_sink_ready;
wire main_port_mmap_internal_port_sink_first;
wire main_port_mmap_internal_port_sink_last;
wire [31:0] main_port_mmap_internal_port_sink_payload_data;
wire [5:0] main_port_mmap_internal_port_sink_payload_len;
wire [3:0] main_port_mmap_internal_port_sink_payload_width;
wire [7:0] main_port_mmap_internal_port_sink_payload_mask;
wire main_port_mmap_request;
wire main_master_sink_sink_valid;
wire main_master_sink_sink_ready;
wire main_master_sink_sink_first;
wire main_master_sink_sink_last;
wire [31:0] main_master_sink_sink_payload_data;
wire main_master_source_source_valid;
wire main_master_source_source_ready;
wire main_master_source_source_first;
wire main_master_source_source_last;
wire [31:0] main_master_source_source_payload_data;
wire [5:0] main_master_source_source_payload_len;
wire [3:0] main_master_source_source_payload_width;
wire [7:0] main_master_source_source_payload_mask;
wire main_master_cs;
reg main_master_cs_storage = 1'd0;
reg main_master_cs_re = 1'd0;
wire [7:0] main_master_len;
wire [3:0] main_master_width;
wire [7:0] main_master_mask;
reg [23:0] main_master_phyconfig_storage = 24'd0;
reg main_master_phyconfig_re = 1'd0;
reg main_master_rxtx_re = 1'd0;
wire [31:0] main_master_rxtx_r;
reg main_master_rxtx_we = 1'd0;
wire [31:0] main_master_rxtx_w;
wire main_master_tx_ready;
wire main_master_rx_ready;
reg [1:0] main_master_status_status = 2'd0;
wire main_master_status_we;
reg main_master_status_re = 1'd0;
wire main_master_tx_fifo_sink_valid;
wire main_master_tx_fifo_sink_ready;
reg main_master_tx_fifo_sink_first = 1'd0;
wire main_master_tx_fifo_sink_last;
wire [31:0] main_master_tx_fifo_sink_payload_data;
wire [5:0] main_master_tx_fifo_sink_payload_len;
wire [3:0] main_master_tx_fifo_sink_payload_width;
wire [7:0] main_master_tx_fifo_sink_payload_mask;
reg main_master_tx_fifo_source_valid = 1'd0;
wire main_master_tx_fifo_source_ready;
reg main_master_tx_fifo_source_first = 1'd0;
reg main_master_tx_fifo_source_last = 1'd0;
reg [31:0] main_master_tx_fifo_source_payload_data = 32'd0;
reg [5:0] main_master_tx_fifo_source_payload_len = 6'd0;
reg [3:0] main_master_tx_fifo_source_payload_width = 4'd0;
reg [7:0] main_master_tx_fifo_source_payload_mask = 8'd0;
wire main_master_rx_fifo_sink_valid;
wire main_master_rx_fifo_sink_ready;
wire main_master_rx_fifo_sink_first;
wire main_master_rx_fifo_sink_last;
wire [31:0] main_master_rx_fifo_sink_payload_data;
reg main_master_rx_fifo_source_valid = 1'd0;
wire main_master_rx_fifo_source_ready;
reg main_master_rx_fifo_source_first = 1'd0;
reg main_master_rx_fifo_source_last = 1'd0;
reg [31:0] main_master_rx_fifo_source_payload_data = 32'd0;
wire main_port_master_user_port_source_valid;
wire main_port_master_user_port_source_ready;
wire main_port_master_user_port_source_first;
wire main_port_master_user_port_source_last;
wire [31:0] main_port_master_user_port_source_payload_data;
wire main_port_master_user_port_sink_valid;
wire main_port_master_user_port_sink_ready;
wire main_port_master_user_port_sink_first;
wire main_port_master_user_port_sink_last;
wire [31:0] main_port_master_user_port_sink_payload_data;
wire [5:0] main_port_master_user_port_sink_payload_len;
wire [3:0] main_port_master_user_port_sink_payload_width;
wire [7:0] main_port_master_user_port_sink_payload_mask;
wire main_port_master_internal_port_source_valid;
wire main_port_master_internal_port_source_ready;
wire main_port_master_internal_port_source_first;
wire main_port_master_internal_port_source_last;
wire [31:0] main_port_master_internal_port_source_payload_data;
wire main_port_master_internal_port_sink_valid;
wire main_port_master_internal_port_sink_ready;
wire main_port_master_internal_port_sink_first;
wire main_port_master_internal_port_sink_last;
wire [31:0] main_port_master_internal_port_sink_payload_data;
wire [5:0] main_port_master_internal_port_sink_payload_len;
wire [3:0] main_port_master_internal_port_sink_payload_width;
wire [7:0] main_port_master_internal_port_sink_payload_mask;
wire main_port_master_request;
reg main_uartwishbonebridge0_tx_sink_valid = 1'd0;
reg main_uartwishbonebridge0_tx_sink_ready = 1'd0;
wire main_uartwishbonebridge0_tx_sink_last;
reg [7:0] main_uartwishbonebridge0_tx_sink_payload_data = 8'd0;
reg [7:0] main_uartwishbonebridge0_tx_data = 8'd0;
reg [3:0] main_uartwishbonebridge0_tx_count = 4'd0;
reg main_uartwishbonebridge0_tx_enable = 1'd0;
reg main_uartwishbonebridge0_tx_tick = 1'd0;
reg [31:0] main_uartwishbonebridge0_tx_phase = 32'd0;
reg main_uartwishbonebridge0_rx_source_valid = 1'd0;
reg main_uartwishbonebridge0_rx_source_ready = 1'd0;
reg [7:0] main_uartwishbonebridge0_rx_source_payload_data = 8'd0;
reg [7:0] main_uartwishbonebridge0_rx_data = 8'd0;
reg [3:0] main_uartwishbonebridge0_rx_count = 4'd0;
reg main_uartwishbonebridge0_rx_enable = 1'd0;
reg main_uartwishbonebridge0_rx_tick = 1'd0;
reg [31:0] main_uartwishbonebridge0_rx_phase = 32'd0;
wire main_uartwishbonebridge0_rx_rx;
reg main_uartwishbonebridge0_rx_rx_d = 1'd0;
wire [29:0] main_uartwishbonebridge0_wishbone_adr;
wire [31:0] main_uartwishbonebridge0_wishbone_dat_w;
wire [31:0] main_uartwishbonebridge0_wishbone_dat_r;
wire [3:0] main_uartwishbonebridge0_wishbone_sel;
reg main_uartwishbonebridge0_wishbone_cyc = 1'd0;
reg main_uartwishbonebridge0_wishbone_stb = 1'd0;
wire main_uartwishbonebridge0_wishbone_ack;
reg main_uartwishbonebridge0_wishbone_we = 1'd0;
reg [2:0] main_uartwishbonebridge0_wishbone_cti = 3'd0;
reg [1:0] main_uartwishbonebridge0_wishbone_bte = 2'd0;
wire main_uartwishbonebridge0_wishbone_err;
reg [7:0] main_uartwishbonebridge0_cmd = 8'd0;
reg main_uartwishbonebridge0_incr = 1'd0;
reg [7:0] main_uartwishbonebridge0_length = 8'd0;
reg [31:0] main_uartwishbonebridge0_address = 32'd0;
reg [31:0] main_uartwishbonebridge0_data = 32'd0;
reg [1:0] main_uartwishbonebridge0_bytes_count = 2'd0;
reg [7:0] main_uartwishbonebridge0_words_count = 8'd0;
wire main_uartwishbonebridge0_reset;
wire main_uartwishbonebridge0_wait;
wire main_uartwishbonebridge0_done;
reg [19:0] main_uartwishbonebridge0_count = 20'd1000000;
reg main_uartwishbonebridge0_is_ongoing = 1'd0;
reg main_uartwishbonebridge1_tx_sink_valid = 1'd0;
reg main_uartwishbonebridge1_tx_sink_ready = 1'd0;
wire main_uartwishbonebridge1_tx_sink_last;
reg [7:0] main_uartwishbonebridge1_tx_sink_payload_data = 8'd0;
reg [7:0] main_uartwishbonebridge1_tx_data = 8'd0;
reg [3:0] main_uartwishbonebridge1_tx_count = 4'd0;
reg main_uartwishbonebridge1_tx_enable = 1'd0;
reg main_uartwishbonebridge1_tx_tick = 1'd0;
reg [31:0] main_uartwishbonebridge1_tx_phase = 32'd0;
reg main_uartwishbonebridge1_rx_source_valid = 1'd0;
reg main_uartwishbonebridge1_rx_source_ready = 1'd0;
reg [7:0] main_uartwishbonebridge1_rx_source_payload_data = 8'd0;
reg [7:0] main_uartwishbonebridge1_rx_data = 8'd0;
reg [3:0] main_uartwishbonebridge1_rx_count = 4'd0;
reg main_uartwishbonebridge1_rx_enable = 1'd0;
reg main_uartwishbonebridge1_rx_tick = 1'd0;
reg [31:0] main_uartwishbonebridge1_rx_phase = 32'd0;
wire main_uartwishbonebridge1_rx_rx;
reg main_uartwishbonebridge1_rx_rx_d = 1'd0;
wire [29:0] main_uartwishbonebridge1_wishbone_adr;
wire [31:0] main_uartwishbonebridge1_wishbone_dat_w;
reg [31:0] main_uartwishbonebridge1_wishbone_dat_r = 32'd0;
wire [3:0] main_uartwishbonebridge1_wishbone_sel;
reg main_uartwishbonebridge1_wishbone_cyc = 1'd0;
reg main_uartwishbonebridge1_wishbone_stb = 1'd0;
reg main_uartwishbonebridge1_wishbone_ack = 1'd0;
reg main_uartwishbonebridge1_wishbone_we = 1'd0;
reg [7:0] main_uartwishbonebridge1_cmd = 8'd0;
reg main_uartwishbonebridge1_incr = 1'd0;
reg [7:0] main_uartwishbonebridge1_length = 8'd0;
reg [31:0] main_uartwishbonebridge1_address = 32'd0;
reg [31:0] main_uartwishbonebridge1_data = 32'd0;
reg [1:0] main_uartwishbonebridge1_bytes_count = 2'd0;
reg [7:0] main_uartwishbonebridge1_words_count = 8'd0;
wire main_uartwishbonebridge1_reset;
wire main_uartwishbonebridge1_wait;
wire main_uartwishbonebridge1_done;
reg [19:0] main_uartwishbonebridge1_count = 20'd1000000;
reg main_uartwishbonebridge1_is_ongoing = 1'd0;
reg main_gpio_mode1_storage = 1'd0;
reg main_gpio_mode1_re = 1'd0;
reg main_gpio_mode0_storage = 1'd0;
reg main_gpio_mode0_re = 1'd0;
reg main_gpio_ien_storage = 1'd0;
reg main_gpio_ien_re = 1'd0;
reg main_gpio_oe_storage = 1'd0;
reg main_gpio_oe_re = 1'd0;
wire main_gpio_in_status;
wire main_gpio_in_we;
reg main_gpio_in_re = 1'd0;
reg main_gpio_out_storage = 1'd0;
reg main_gpio_out_re = 1'd0;
reg [127:0] main_la_ien_storage = 128'd0;
reg main_la_ien_re = 1'd0;
reg [127:0] main_la_oe_storage = 128'd0;
reg main_la_oe_re = 1'd0;
reg [127:0] main_la_in_status = 128'd0;
wire main_la_in_we;
reg main_la_in_re = 1'd0;
reg [127:0] main_la_out_storage = 128'd0;
reg main_la_out_re = 1'd0;
reg main_mprj_wb_iena_storage = 1'd0;
reg main_mprj_wb_iena_re = 1'd0;
reg [2:0] main_user_irq_ena_storage = 3'd0;
reg main_user_irq_ena_re = 1'd0;
wire main_gpioin0_in_status;
wire main_gpioin0_in_we;
reg main_gpioin0_in_re = 1'd0;
reg main_gpioin0_gpioin0_mode_storage = 1'd0;
reg main_gpioin0_gpioin0_mode_re = 1'd0;
reg main_gpioin0_gpioin0_edge_storage = 1'd0;
reg main_gpioin0_gpioin0_edge_re = 1'd0;
wire main_gpioin0_gpioin0_irq;
reg main_gpioin0_gpioin0_in_pads_n_d = 1'd0;
wire main_gpioin0_gpioin0_status;
reg main_gpioin0_gpioin0_pending = 1'd0;
reg main_gpioin0_gpioin0_trigger = 1'd0;
reg main_gpioin0_gpioin0_clear = 1'd0;
reg main_gpioin0_gpioin0_trigger_d = 1'd0;
wire main_gpioin1_in_status;
wire main_gpioin1_in_we;
reg main_gpioin1_in_re = 1'd0;
reg main_gpioin1_gpioin1_mode_storage = 1'd0;
reg main_gpioin1_gpioin1_mode_re = 1'd0;
reg main_gpioin1_gpioin1_edge_storage = 1'd0;
reg main_gpioin1_gpioin1_edge_re = 1'd0;
wire main_gpioin1_gpioin1_irq;
reg main_gpioin1_gpioin1_in_pads_n_d = 1'd0;
wire main_gpioin1_gpioin1_status;
reg main_gpioin1_gpioin1_pending = 1'd0;
reg main_gpioin1_gpioin1_trigger = 1'd0;
reg main_gpioin1_gpioin1_clear = 1'd0;
reg main_gpioin1_gpioin1_trigger_d = 1'd0;
wire main_gpioin2_in_status;
wire main_gpioin2_in_we;
reg main_gpioin2_in_re = 1'd0;
reg main_gpioin2_gpioin2_mode_storage = 1'd0;
reg main_gpioin2_gpioin2_mode_re = 1'd0;
reg main_gpioin2_gpioin2_edge_storage = 1'd0;
reg main_gpioin2_gpioin2_edge_re = 1'd0;
wire main_gpioin2_gpioin2_irq;
reg main_gpioin2_gpioin2_in_pads_n_d = 1'd0;
wire main_gpioin2_gpioin2_status;
reg main_gpioin2_gpioin2_pending = 1'd0;
reg main_gpioin2_gpioin2_trigger = 1'd0;
reg main_gpioin2_gpioin2_clear = 1'd0;
reg main_gpioin2_gpioin2_trigger_d = 1'd0;
wire main_gpioin3_in_status;
wire main_gpioin3_in_we;
reg main_gpioin3_in_re = 1'd0;
reg main_gpioin3_gpioin3_mode_storage = 1'd0;
reg main_gpioin3_gpioin3_mode_re = 1'd0;
reg main_gpioin3_gpioin3_edge_storage = 1'd0;
reg main_gpioin3_gpioin3_edge_re = 1'd0;
wire main_gpioin3_gpioin3_irq;
reg main_gpioin3_gpioin3_in_pads_n_d = 1'd0;
wire main_gpioin3_gpioin3_status;
reg main_gpioin3_gpioin3_pending = 1'd0;
reg main_gpioin3_gpioin3_trigger = 1'd0;
reg main_gpioin3_gpioin3_clear = 1'd0;
reg main_gpioin3_gpioin3_trigger_d = 1'd0;
wire main_gpioin4_in_status;
wire main_gpioin4_in_we;
reg main_gpioin4_in_re = 1'd0;
reg main_gpioin4_gpioin4_mode_storage = 1'd0;
reg main_gpioin4_gpioin4_mode_re = 1'd0;
reg main_gpioin4_gpioin4_edge_storage = 1'd0;
reg main_gpioin4_gpioin4_edge_re = 1'd0;
wire main_gpioin4_gpioin4_irq;
reg main_gpioin4_gpioin4_in_pads_n_d = 1'd0;
wire main_gpioin4_gpioin4_status;
reg main_gpioin4_gpioin4_pending = 1'd0;
reg main_gpioin4_gpioin4_trigger = 1'd0;
reg main_gpioin4_gpioin4_clear = 1'd0;
reg main_gpioin4_gpioin4_trigger_d = 1'd0;
wire main_gpioin5_in_status;
wire main_gpioin5_in_we;
reg main_gpioin5_in_re = 1'd0;
reg main_gpioin5_gpioin5_mode_storage = 1'd0;
reg main_gpioin5_gpioin5_mode_re = 1'd0;
reg main_gpioin5_gpioin5_edge_storage = 1'd0;
reg main_gpioin5_gpioin5_edge_re = 1'd0;
wire main_gpioin5_gpioin5_irq;
reg main_gpioin5_gpioin5_in_pads_n_d = 1'd0;
wire main_gpioin5_gpioin5_status;
reg main_gpioin5_gpioin5_pending = 1'd0;
reg main_gpioin5_gpioin5_trigger = 1'd0;
reg main_gpioin5_gpioin5_clear = 1'd0;
reg main_gpioin5_gpioin5_trigger_d = 1'd0;
reg [1:0] builder_spimaster_state = 2'd0;
reg [1:0] builder_spimaster_next_state = 2'd0;
reg [2:0] main_count_spimaster_next_value = 3'd0;
reg main_count_spimaster_next_value_ce = 1'd0;
reg [1:0] builder_litespiphy_state = 2'd0;
reg [1:0] builder_litespiphy_next_state = 2'd0;
reg [7:0] main_litespisdrphycore_sr_cnt_litespiphy_next_value = 8'd0;
reg main_litespisdrphycore_sr_cnt_litespiphy_next_value_ce = 1'd0;
wire [1:0] builder_litespi_request;
reg builder_litespi_grant = 1'd0;
reg builder_litespi_tx_mux_source_valid = 1'd0;
wire builder_litespi_tx_mux_source_ready;
reg builder_litespi_tx_mux_source_first = 1'd0;
reg builder_litespi_tx_mux_source_last = 1'd0;
reg [31:0] builder_litespi_tx_mux_source_payload_data = 32'd0;
reg [5:0] builder_litespi_tx_mux_source_payload_len = 6'd0;
reg [3:0] builder_litespi_tx_mux_source_payload_width = 4'd0;
reg [7:0] builder_litespi_tx_mux_source_payload_mask = 8'd0;
wire builder_litespi_tx_mux_endpoint0_sink_valid;
reg builder_litespi_tx_mux_endpoint0_sink_ready = 1'd0;
wire builder_litespi_tx_mux_endpoint0_sink_first;
wire builder_litespi_tx_mux_endpoint0_sink_last;
wire [31:0] builder_litespi_tx_mux_endpoint0_sink_payload_data;
wire [5:0] builder_litespi_tx_mux_endpoint0_sink_payload_len;
wire [3:0] builder_litespi_tx_mux_endpoint0_sink_payload_width;
wire [7:0] builder_litespi_tx_mux_endpoint0_sink_payload_mask;
wire builder_litespi_tx_mux_endpoint1_sink_valid;
reg builder_litespi_tx_mux_endpoint1_sink_ready = 1'd0;
wire builder_litespi_tx_mux_endpoint1_sink_first;
wire builder_litespi_tx_mux_endpoint1_sink_last;
wire [31:0] builder_litespi_tx_mux_endpoint1_sink_payload_data;
wire [5:0] builder_litespi_tx_mux_endpoint1_sink_payload_len;
wire [3:0] builder_litespi_tx_mux_endpoint1_sink_payload_width;
wire [7:0] builder_litespi_tx_mux_endpoint1_sink_payload_mask;
wire builder_litespi_tx_mux_sel;
wire builder_litespi_rx_demux_sink_valid;
reg builder_litespi_rx_demux_sink_ready = 1'd0;
wire builder_litespi_rx_demux_sink_first;
wire builder_litespi_rx_demux_sink_last;
wire [31:0] builder_litespi_rx_demux_sink_payload_data;
reg builder_litespi_rx_demux_endpoint0_source_valid = 1'd0;
wire builder_litespi_rx_demux_endpoint0_source_ready;
reg builder_litespi_rx_demux_endpoint0_source_first = 1'd0;
reg builder_litespi_rx_demux_endpoint0_source_last = 1'd0;
reg [31:0] builder_litespi_rx_demux_endpoint0_source_payload_data = 32'd0;
reg builder_litespi_rx_demux_endpoint1_source_valid = 1'd0;
wire builder_litespi_rx_demux_endpoint1_source_ready;
reg builder_litespi_rx_demux_endpoint1_source_first = 1'd0;
reg builder_litespi_rx_demux_endpoint1_source_last = 1'd0;
reg [31:0] builder_litespi_rx_demux_endpoint1_source_payload_data = 32'd0;
wire builder_litespi_rx_demux_sel;
reg [3:0] builder_litespi_state = 4'd0;
reg [3:0] builder_litespi_next_state = 4'd0;
reg main_litespimmap_burst_cs_litespi_next_value0 = 1'd0;
reg main_litespimmap_burst_cs_litespi_next_value_ce0 = 1'd0;
reg [29:0] main_litespimmap_burst_adr_litespi_next_value1 = 30'd0;
reg main_litespimmap_burst_adr_litespi_next_value_ce1 = 1'd0;
reg builder_uartwishbonebridge0_rs232phytx0_state = 1'd0;
reg builder_uartwishbonebridge0_rs232phytx0_next_state = 1'd0;
reg [3:0] main_uartwishbonebridge0_tx_count_uartwishbonebridge0_rs232phytx0_next_value0 = 4'd0;
reg main_uartwishbonebridge0_tx_count_uartwishbonebridge0_rs232phytx0_next_value_ce0 = 1'd0;
reg main_platform_obj_serial_dbg_tx_uartwishbonebridge0_rs232phytx0_next_value1 = 1'd0;
reg main_platform_obj_serial_dbg_tx_uartwishbonebridge0_rs232phytx0_next_value_ce1 = 1'd0;
reg [7:0] main_uartwishbonebridge0_tx_data_uartwishbonebridge0_rs232phytx0_next_value2 = 8'd0;
reg main_uartwishbonebridge0_tx_data_uartwishbonebridge0_rs232phytx0_next_value_ce2 = 1'd0;
reg builder_uartwishbonebridge0_rs232phyrx0_state = 1'd0;
reg builder_uartwishbonebridge0_rs232phyrx0_next_state = 1'd0;
reg [3:0] main_uartwishbonebridge0_rx_count_uartwishbonebridge0_rs232phyrx0_next_value0 = 4'd0;
reg main_uartwishbonebridge0_rx_count_uartwishbonebridge0_rs232phyrx0_next_value_ce0 = 1'd0;
reg [7:0] main_uartwishbonebridge0_rx_data_uartwishbonebridge0_rs232phyrx0_next_value1 = 8'd0;
reg main_uartwishbonebridge0_rx_data_uartwishbonebridge0_rs232phyrx0_next_value_ce1 = 1'd0;
reg [2:0] builder_uartwishbonebridge0_state = 3'd0;
reg [2:0] builder_uartwishbonebridge0_next_state = 3'd0;
reg [1:0] main_uartwishbonebridge0_bytes_count_uartwishbonebridge0_next_value0 = 2'd0;
reg main_uartwishbonebridge0_bytes_count_uartwishbonebridge0_next_value_ce0 = 1'd0;
reg [7:0] main_uartwishbonebridge0_words_count_uartwishbonebridge0_next_value1 = 8'd0;
reg main_uartwishbonebridge0_words_count_uartwishbonebridge0_next_value_ce1 = 1'd0;
reg [7:0] main_uartwishbonebridge0_cmd_uartwishbonebridge0_next_value2 = 8'd0;
reg main_uartwishbonebridge0_cmd_uartwishbonebridge0_next_value_ce2 = 1'd0;
reg [7:0] main_uartwishbonebridge0_length_uartwishbonebridge0_next_value3 = 8'd0;
reg main_uartwishbonebridge0_length_uartwishbonebridge0_next_value_ce3 = 1'd0;
reg [31:0] main_uartwishbonebridge0_address_uartwishbonebridge0_next_value4 = 32'd0;
reg main_uartwishbonebridge0_address_uartwishbonebridge0_next_value_ce4 = 1'd0;
reg main_uartwishbonebridge0_incr_uartwishbonebridge0_next_value5 = 1'd0;
reg main_uartwishbonebridge0_incr_uartwishbonebridge0_next_value_ce5 = 1'd0;
reg [31:0] main_uartwishbonebridge0_data_uartwishbonebridge0_next_value6 = 32'd0;
reg main_uartwishbonebridge0_data_uartwishbonebridge0_next_value_ce6 = 1'd0;
reg builder_uartwishbonebridge1_rs232phytx1_state = 1'd0;
reg builder_uartwishbonebridge1_rs232phytx1_next_state = 1'd0;
reg [3:0] main_uartwishbonebridge1_tx_count_uartwishbonebridge1_rs232phytx1_next_value0 = 4'd0;
reg main_uartwishbonebridge1_tx_count_uartwishbonebridge1_rs232phytx1_next_value_ce0 = 1'd0;
reg main_platform_obj_ser_tx_uartwishbonebridge1_rs232phytx1_next_value1 = 1'd0;
reg main_platform_obj_ser_tx_uartwishbonebridge1_rs232phytx1_next_value_ce1 = 1'd0;
reg [7:0] main_uartwishbonebridge1_tx_data_uartwishbonebridge1_rs232phytx1_next_value2 = 8'd0;
reg main_uartwishbonebridge1_tx_data_uartwishbonebridge1_rs232phytx1_next_value_ce2 = 1'd0;
reg builder_uartwishbonebridge1_rs232phyrx1_state = 1'd0;
reg builder_uartwishbonebridge1_rs232phyrx1_next_state = 1'd0;
reg [3:0] main_uartwishbonebridge1_rx_count_uartwishbonebridge1_rs232phyrx1_next_value0 = 4'd0;
reg main_uartwishbonebridge1_rx_count_uartwishbonebridge1_rs232phyrx1_next_value_ce0 = 1'd0;
reg [7:0] main_uartwishbonebridge1_rx_data_uartwishbonebridge1_rs232phyrx1_next_value1 = 8'd0;
reg main_uartwishbonebridge1_rx_data_uartwishbonebridge1_rs232phyrx1_next_value_ce1 = 1'd0;
reg [2:0] builder_uartwishbonebridge1_state = 3'd0;
reg [2:0] builder_uartwishbonebridge1_next_state = 3'd0;
reg [1:0] main_uartwishbonebridge1_bytes_count_uartwishbonebridge1_next_value0 = 2'd0;
reg main_uartwishbonebridge1_bytes_count_uartwishbonebridge1_next_value_ce0 = 1'd0;
reg [7:0] main_uartwishbonebridge1_words_count_uartwishbonebridge1_next_value1 = 8'd0;
reg main_uartwishbonebridge1_words_count_uartwishbonebridge1_next_value_ce1 = 1'd0;
reg [7:0] main_uartwishbonebridge1_cmd_uartwishbonebridge1_next_value2 = 8'd0;
reg main_uartwishbonebridge1_cmd_uartwishbonebridge1_next_value_ce2 = 1'd0;
reg [7:0] main_uartwishbonebridge1_length_uartwishbonebridge1_next_value3 = 8'd0;
reg main_uartwishbonebridge1_length_uartwishbonebridge1_next_value_ce3 = 1'd0;
reg [31:0] main_uartwishbonebridge1_address_uartwishbonebridge1_next_value4 = 32'd0;
reg main_uartwishbonebridge1_address_uartwishbonebridge1_next_value_ce4 = 1'd0;
reg main_uartwishbonebridge1_incr_uartwishbonebridge1_next_value5 = 1'd0;
reg main_uartwishbonebridge1_incr_uartwishbonebridge1_next_value_ce5 = 1'd0;
reg [31:0] main_uartwishbonebridge1_data_uartwishbonebridge1_next_value6 = 32'd0;
reg main_uartwishbonebridge1_data_uartwishbonebridge1_next_value_ce6 = 1'd0;
wire builder_gpioin0_i00;
wire builder_gpioin0_status_status;
wire builder_gpioin0_status_we;
reg builder_gpioin0_status_re = 1'd0;
wire builder_gpioin0_i01;
wire builder_gpioin0_pending_status;
wire builder_gpioin0_pending_we;
reg builder_gpioin0_pending_re = 1'd0;
reg builder_gpioin0_pending_r = 1'd0;
wire builder_gpioin0_i02;
reg builder_gpioin0_enable_storage = 1'd0;
reg builder_gpioin0_enable_re = 1'd0;
wire builder_gpioin1_i00;
wire builder_gpioin1_status_status;
wire builder_gpioin1_status_we;
reg builder_gpioin1_status_re = 1'd0;
wire builder_gpioin1_i01;
wire builder_gpioin1_pending_status;
wire builder_gpioin1_pending_we;
reg builder_gpioin1_pending_re = 1'd0;
reg builder_gpioin1_pending_r = 1'd0;
wire builder_gpioin1_i02;
reg builder_gpioin1_enable_storage = 1'd0;
reg builder_gpioin1_enable_re = 1'd0;
wire builder_gpioin2_i00;
wire builder_gpioin2_status_status;
wire builder_gpioin2_status_we;
reg builder_gpioin2_status_re = 1'd0;
wire builder_gpioin2_i01;
wire builder_gpioin2_pending_status;
wire builder_gpioin2_pending_we;
reg builder_gpioin2_pending_re = 1'd0;
reg builder_gpioin2_pending_r = 1'd0;
wire builder_gpioin2_i02;
reg builder_gpioin2_enable_storage = 1'd0;
reg builder_gpioin2_enable_re = 1'd0;
wire builder_gpioin3_i00;
wire builder_gpioin3_status_status;
wire builder_gpioin3_status_we;
reg builder_gpioin3_status_re = 1'd0;
wire builder_gpioin3_i01;
wire builder_gpioin3_pending_status;
wire builder_gpioin3_pending_we;
reg builder_gpioin3_pending_re = 1'd0;
reg builder_gpioin3_pending_r = 1'd0;
wire builder_gpioin3_i02;
reg builder_gpioin3_enable_storage = 1'd0;
reg builder_gpioin3_enable_re = 1'd0;
wire builder_gpioin4_i00;
wire builder_gpioin4_status_status;
wire builder_gpioin4_status_we;
reg builder_gpioin4_status_re = 1'd0;
wire builder_gpioin4_i01;
wire builder_gpioin4_pending_status;
wire builder_gpioin4_pending_we;
reg builder_gpioin4_pending_re = 1'd0;
reg builder_gpioin4_pending_r = 1'd0;
wire builder_gpioin4_i02;
reg builder_gpioin4_enable_storage = 1'd0;
reg builder_gpioin4_enable_re = 1'd0;
wire builder_gpioin5_i00;
wire builder_gpioin5_status_status;
wire builder_gpioin5_status_we;
reg builder_gpioin5_status_re = 1'd0;
wire builder_gpioin5_i01;
wire builder_gpioin5_pending_status;
wire builder_gpioin5_pending_we;
reg builder_gpioin5_pending_re = 1'd0;
reg builder_gpioin5_pending_r = 1'd0;
wire builder_gpioin5_i02;
reg builder_gpioin5_enable_storage = 1'd0;
reg builder_gpioin5_enable_re = 1'd0;
reg [13:0] builder_mgmtsoc_adr = 14'd0;
reg builder_mgmtsoc_we = 1'd0;
reg [31:0] builder_mgmtsoc_dat_w = 32'd0;
wire [31:0] builder_mgmtsoc_dat_r;
wire [29:0] builder_mgmtsoc_wishbone_adr;
wire [31:0] builder_mgmtsoc_wishbone_dat_w;
reg [31:0] builder_mgmtsoc_wishbone_dat_r = 32'd0;
wire [3:0] builder_mgmtsoc_wishbone_sel;
wire builder_mgmtsoc_wishbone_cyc;
wire builder_mgmtsoc_wishbone_stb;
reg builder_mgmtsoc_wishbone_ack = 1'd0;
wire builder_mgmtsoc_wishbone_we;
wire [2:0] builder_mgmtsoc_wishbone_cti;
wire [1:0] builder_mgmtsoc_wishbone_bte;
reg builder_mgmtsoc_wishbone_err = 1'd0;
wire [29:0] builder_shared_adr;
wire [31:0] builder_shared_dat_w;
reg [31:0] builder_shared_dat_r = 32'd0;
wire [3:0] builder_shared_sel;
wire builder_shared_cyc;
wire builder_shared_stb;
reg builder_shared_ack = 1'd0;
wire builder_shared_we;
wire [2:0] builder_shared_cti;
wire [1:0] builder_shared_bte;
wire builder_shared_err;
wire [1:0] builder_request;
reg builder_grant = 1'd0;
reg [2:0] builder_slave_sel = 3'd0;
reg [2:0] builder_slave_sel_r = 3'd0;
reg builder_error = 1'd0;
wire builder_wait;
wire builder_done;
reg [19:0] builder_count = 20'd1000000;
wire [13:0] builder_interface0_bank_bus_adr;
wire builder_interface0_bank_bus_we;
wire [31:0] builder_interface0_bank_bus_dat_w;
reg [31:0] builder_interface0_bank_bus_dat_r = 32'd0;
reg builder_csrbank0_reset0_re = 1'd0;
wire [1:0] builder_csrbank0_reset0_r;
reg builder_csrbank0_reset0_we = 1'd0;
wire [1:0] builder_csrbank0_reset0_w;
reg builder_csrbank0_scratch0_re = 1'd0;
wire [31:0] builder_csrbank0_scratch0_r;
reg builder_csrbank0_scratch0_we = 1'd0;
wire [31:0] builder_csrbank0_scratch0_w;
reg builder_csrbank0_bus_errors_re = 1'd0;
wire [31:0] builder_csrbank0_bus_errors_r;
reg builder_csrbank0_bus_errors_we = 1'd0;
wire [31:0] builder_csrbank0_bus_errors_w;
wire builder_csrbank0_sel;
wire [13:0] builder_interface1_bank_bus_adr;
wire builder_interface1_bank_bus_we;
wire [31:0] builder_interface1_bank_bus_dat_w;
reg [31:0] builder_interface1_bank_bus_dat_r = 32'd0;
reg builder_csrbank1_mmap_dummy_bits0_re = 1'd0;
wire [7:0] builder_csrbank1_mmap_dummy_bits0_r;
reg builder_csrbank1_mmap_dummy_bits0_we = 1'd0;
wire [7:0] builder_csrbank1_mmap_dummy_bits0_w;
reg builder_csrbank1_master_cs0_re = 1'd0;
wire builder_csrbank1_master_cs0_r;
reg builder_csrbank1_master_cs0_we = 1'd0;
wire builder_csrbank1_master_cs0_w;
reg builder_csrbank1_master_phyconfig0_re = 1'd0;
wire [23:0] builder_csrbank1_master_phyconfig0_r;
reg builder_csrbank1_master_phyconfig0_we = 1'd0;
wire [23:0] builder_csrbank1_master_phyconfig0_w;
reg builder_csrbank1_master_status_re = 1'd0;
wire [1:0] builder_csrbank1_master_status_r;
reg builder_csrbank1_master_status_we = 1'd0;
wire [1:0] builder_csrbank1_master_status_w;
wire builder_csrbank1_sel;
wire [13:0] builder_interface2_bank_bus_adr;
wire builder_interface2_bank_bus_we;
wire [31:0] builder_interface2_bank_bus_dat_w;
reg [31:0] builder_interface2_bank_bus_dat_r = 32'd0;
reg builder_csrbank2_clk_divisor0_re = 1'd0;
wire [7:0] builder_csrbank2_clk_divisor0_r;
reg builder_csrbank2_clk_divisor0_we = 1'd0;
wire [7:0] builder_csrbank2_clk_divisor0_w;
wire builder_csrbank2_sel;
wire [13:0] builder_interface3_bank_bus_adr;
wire builder_interface3_bank_bus_we;
wire [31:0] builder_interface3_bank_bus_dat_w;
reg [31:0] builder_interface3_bank_bus_dat_r = 32'd0;
reg builder_csrbank3_mode10_re = 1'd0;
wire builder_csrbank3_mode10_r;
reg builder_csrbank3_mode10_we = 1'd0;
wire builder_csrbank3_mode10_w;
reg builder_csrbank3_mode00_re = 1'd0;
wire builder_csrbank3_mode00_r;
reg builder_csrbank3_mode00_we = 1'd0;
wire builder_csrbank3_mode00_w;
reg builder_csrbank3_ien0_re = 1'd0;
wire builder_csrbank3_ien0_r;
reg builder_csrbank3_ien0_we = 1'd0;
wire builder_csrbank3_ien0_w;
reg builder_csrbank3_oe0_re = 1'd0;
wire builder_csrbank3_oe0_r;
reg builder_csrbank3_oe0_we = 1'd0;
wire builder_csrbank3_oe0_w;
reg builder_csrbank3_in_re = 1'd0;
wire builder_csrbank3_in_r;
reg builder_csrbank3_in_we = 1'd0;
wire builder_csrbank3_in_w;
reg builder_csrbank3_out0_re = 1'd0;
wire builder_csrbank3_out0_r;
reg builder_csrbank3_out0_we = 1'd0;
wire builder_csrbank3_out0_w;
wire builder_csrbank3_sel;
wire [13:0] builder_interface4_bank_bus_adr;
wire builder_interface4_bank_bus_we;
wire [31:0] builder_interface4_bank_bus_dat_w;
reg [31:0] builder_interface4_bank_bus_dat_r = 32'd0;
reg builder_csrbank4_ien3_re = 1'd0;
wire [31:0] builder_csrbank4_ien3_r;
reg builder_csrbank4_ien3_we = 1'd0;
wire [31:0] builder_csrbank4_ien3_w;
reg builder_csrbank4_ien2_re = 1'd0;
wire [31:0] builder_csrbank4_ien2_r;
reg builder_csrbank4_ien2_we = 1'd0;
wire [31:0] builder_csrbank4_ien2_w;
reg builder_csrbank4_ien1_re = 1'd0;
wire [31:0] builder_csrbank4_ien1_r;
reg builder_csrbank4_ien1_we = 1'd0;
wire [31:0] builder_csrbank4_ien1_w;
reg builder_csrbank4_ien0_re = 1'd0;
wire [31:0] builder_csrbank4_ien0_r;
reg builder_csrbank4_ien0_we = 1'd0;
wire [31:0] builder_csrbank4_ien0_w;
reg builder_csrbank4_oe3_re = 1'd0;
wire [31:0] builder_csrbank4_oe3_r;
reg builder_csrbank4_oe3_we = 1'd0;
wire [31:0] builder_csrbank4_oe3_w;
reg builder_csrbank4_oe2_re = 1'd0;
wire [31:0] builder_csrbank4_oe2_r;
reg builder_csrbank4_oe2_we = 1'd0;
wire [31:0] builder_csrbank4_oe2_w;
reg builder_csrbank4_oe1_re = 1'd0;
wire [31:0] builder_csrbank4_oe1_r;
reg builder_csrbank4_oe1_we = 1'd0;
wire [31:0] builder_csrbank4_oe1_w;
reg builder_csrbank4_oe0_re = 1'd0;
wire [31:0] builder_csrbank4_oe0_r;
reg builder_csrbank4_oe0_we = 1'd0;
wire [31:0] builder_csrbank4_oe0_w;
reg builder_csrbank4_in3_re = 1'd0;
wire [31:0] builder_csrbank4_in3_r;
reg builder_csrbank4_in3_we = 1'd0;
wire [31:0] builder_csrbank4_in3_w;
reg builder_csrbank4_in2_re = 1'd0;
wire [31:0] builder_csrbank4_in2_r;
reg builder_csrbank4_in2_we = 1'd0;
wire [31:0] builder_csrbank4_in2_w;
reg builder_csrbank4_in1_re = 1'd0;
wire [31:0] builder_csrbank4_in1_r;
reg builder_csrbank4_in1_we = 1'd0;
wire [31:0] builder_csrbank4_in1_w;
reg builder_csrbank4_in0_re = 1'd0;
wire [31:0] builder_csrbank4_in0_r;
reg builder_csrbank4_in0_we = 1'd0;
wire [31:0] builder_csrbank4_in0_w;
reg builder_csrbank4_out3_re = 1'd0;
wire [31:0] builder_csrbank4_out3_r;
reg builder_csrbank4_out3_we = 1'd0;
wire [31:0] builder_csrbank4_out3_w;
reg builder_csrbank4_out2_re = 1'd0;
wire [31:0] builder_csrbank4_out2_r;
reg builder_csrbank4_out2_we = 1'd0;
wire [31:0] builder_csrbank4_out2_w;
reg builder_csrbank4_out1_re = 1'd0;
wire [31:0] builder_csrbank4_out1_r;
reg builder_csrbank4_out1_we = 1'd0;
wire [31:0] builder_csrbank4_out1_w;
reg builder_csrbank4_out0_re = 1'd0;
wire [31:0] builder_csrbank4_out0_r;
reg builder_csrbank4_out0_we = 1'd0;
wire [31:0] builder_csrbank4_out0_w;
wire builder_csrbank4_sel;
wire [13:0] builder_interface5_bank_bus_adr;
wire builder_interface5_bank_bus_we;
wire [31:0] builder_interface5_bank_bus_dat_w;
reg [31:0] builder_interface5_bank_bus_dat_r = 32'd0;
reg builder_csrbank5_out0_re = 1'd0;
wire builder_csrbank5_out0_r;
reg builder_csrbank5_out0_we = 1'd0;
wire builder_csrbank5_out0_w;
wire builder_csrbank5_sel;
wire [13:0] builder_interface6_bank_bus_adr;
wire builder_interface6_bank_bus_we;
wire [31:0] builder_interface6_bank_bus_dat_w;
reg [31:0] builder_interface6_bank_bus_dat_r = 32'd0;
reg builder_csrbank6_control0_re = 1'd0;
wire [15:0] builder_csrbank6_control0_r;
reg builder_csrbank6_control0_we = 1'd0;
wire [15:0] builder_csrbank6_control0_w;
reg builder_csrbank6_status_re = 1'd0;
wire builder_csrbank6_status_r;
reg builder_csrbank6_status_we = 1'd0;
wire builder_csrbank6_status_w;
reg builder_csrbank6_mosi0_re = 1'd0;
wire [7:0] builder_csrbank6_mosi0_r;
reg builder_csrbank6_mosi0_we = 1'd0;
wire [7:0] builder_csrbank6_mosi0_w;
reg builder_csrbank6_miso_re = 1'd0;
wire [7:0] builder_csrbank6_miso_r;
reg builder_csrbank6_miso_we = 1'd0;
wire [7:0] builder_csrbank6_miso_w;
reg builder_csrbank6_cs0_re = 1'd0;
wire [16:0] builder_csrbank6_cs0_r;
reg builder_csrbank6_cs0_we = 1'd0;
wire [16:0] builder_csrbank6_cs0_w;
reg builder_csrbank6_loopback0_re = 1'd0;
wire builder_csrbank6_loopback0_r;
reg builder_csrbank6_loopback0_we = 1'd0;
wire builder_csrbank6_loopback0_w;
reg builder_csrbank6_clk_divider0_re = 1'd0;
wire [15:0] builder_csrbank6_clk_divider0_r;
reg builder_csrbank6_clk_divider0_we = 1'd0;
wire [15:0] builder_csrbank6_clk_divider0_w;
wire builder_csrbank6_sel;
wire [13:0] builder_interface7_bank_bus_adr;
wire builder_interface7_bank_bus_we;
wire [31:0] builder_interface7_bank_bus_dat_w;
reg [31:0] builder_interface7_bank_bus_dat_r = 32'd0;
reg builder_csrbank7_in_re = 1'd0;
wire builder_csrbank7_in_r;
reg builder_csrbank7_in_we = 1'd0;
wire builder_csrbank7_in_w;
reg builder_csrbank7_mode0_re = 1'd0;
wire builder_csrbank7_mode0_r;
reg builder_csrbank7_mode0_we = 1'd0;
wire builder_csrbank7_mode0_w;
reg builder_csrbank7_edge0_re = 1'd0;
wire builder_csrbank7_edge0_r;
reg builder_csrbank7_edge0_we = 1'd0;
wire builder_csrbank7_edge0_w;
reg builder_csrbank7_ev_status_re = 1'd0;
wire builder_csrbank7_ev_status_r;
reg builder_csrbank7_ev_status_we = 1'd0;
wire builder_csrbank7_ev_status_w;
reg builder_csrbank7_ev_pending_re = 1'd0;
wire builder_csrbank7_ev_pending_r;
reg builder_csrbank7_ev_pending_we = 1'd0;
wire builder_csrbank7_ev_pending_w;
reg builder_csrbank7_ev_enable0_re = 1'd0;
wire builder_csrbank7_ev_enable0_r;
reg builder_csrbank7_ev_enable0_we = 1'd0;
wire builder_csrbank7_ev_enable0_w;
wire builder_csrbank7_sel;
wire [13:0] builder_interface8_bank_bus_adr;
wire builder_interface8_bank_bus_we;
wire [31:0] builder_interface8_bank_bus_dat_w;
reg [31:0] builder_interface8_bank_bus_dat_r = 32'd0;
reg builder_csrbank8_in_re = 1'd0;
wire builder_csrbank8_in_r;
reg builder_csrbank8_in_we = 1'd0;
wire builder_csrbank8_in_w;
reg builder_csrbank8_mode0_re = 1'd0;
wire builder_csrbank8_mode0_r;
reg builder_csrbank8_mode0_we = 1'd0;
wire builder_csrbank8_mode0_w;
reg builder_csrbank8_edge0_re = 1'd0;
wire builder_csrbank8_edge0_r;
reg builder_csrbank8_edge0_we = 1'd0;
wire builder_csrbank8_edge0_w;
reg builder_csrbank8_ev_status_re = 1'd0;
wire builder_csrbank8_ev_status_r;
reg builder_csrbank8_ev_status_we = 1'd0;
wire builder_csrbank8_ev_status_w;
reg builder_csrbank8_ev_pending_re = 1'd0;
wire builder_csrbank8_ev_pending_r;
reg builder_csrbank8_ev_pending_we = 1'd0;
wire builder_csrbank8_ev_pending_w;
reg builder_csrbank8_ev_enable0_re = 1'd0;
wire builder_csrbank8_ev_enable0_r;
reg builder_csrbank8_ev_enable0_we = 1'd0;
wire builder_csrbank8_ev_enable0_w;
wire builder_csrbank8_sel;
wire [13:0] builder_interface9_bank_bus_adr;
wire builder_interface9_bank_bus_we;
wire [31:0] builder_interface9_bank_bus_dat_w;
reg [31:0] builder_interface9_bank_bus_dat_r = 32'd0;
reg builder_csrbank9_in_re = 1'd0;
wire builder_csrbank9_in_r;
reg builder_csrbank9_in_we = 1'd0;
wire builder_csrbank9_in_w;
reg builder_csrbank9_mode0_re = 1'd0;
wire builder_csrbank9_mode0_r;
reg builder_csrbank9_mode0_we = 1'd0;
wire builder_csrbank9_mode0_w;
reg builder_csrbank9_edge0_re = 1'd0;
wire builder_csrbank9_edge0_r;
reg builder_csrbank9_edge0_we = 1'd0;
wire builder_csrbank9_edge0_w;
reg builder_csrbank9_ev_status_re = 1'd0;
wire builder_csrbank9_ev_status_r;
reg builder_csrbank9_ev_status_we = 1'd0;
wire builder_csrbank9_ev_status_w;
reg builder_csrbank9_ev_pending_re = 1'd0;
wire builder_csrbank9_ev_pending_r;
reg builder_csrbank9_ev_pending_we = 1'd0;
wire builder_csrbank9_ev_pending_w;
reg builder_csrbank9_ev_enable0_re = 1'd0;
wire builder_csrbank9_ev_enable0_r;
reg builder_csrbank9_ev_enable0_we = 1'd0;
wire builder_csrbank9_ev_enable0_w;
wire builder_csrbank9_sel;
wire [13:0] builder_interface10_bank_bus_adr;
wire builder_interface10_bank_bus_we;
wire [31:0] builder_interface10_bank_bus_dat_w;
reg [31:0] builder_interface10_bank_bus_dat_r = 32'd0;
reg builder_csrbank10_in_re = 1'd0;
wire builder_csrbank10_in_r;
reg builder_csrbank10_in_we = 1'd0;
wire builder_csrbank10_in_w;
reg builder_csrbank10_mode0_re = 1'd0;
wire builder_csrbank10_mode0_r;
reg builder_csrbank10_mode0_we = 1'd0;
wire builder_csrbank10_mode0_w;
reg builder_csrbank10_edge0_re = 1'd0;
wire builder_csrbank10_edge0_r;
reg builder_csrbank10_edge0_we = 1'd0;
wire builder_csrbank10_edge0_w;
reg builder_csrbank10_ev_status_re = 1'd0;
wire builder_csrbank10_ev_status_r;
reg builder_csrbank10_ev_status_we = 1'd0;
wire builder_csrbank10_ev_status_w;
reg builder_csrbank10_ev_pending_re = 1'd0;
wire builder_csrbank10_ev_pending_r;
reg builder_csrbank10_ev_pending_we = 1'd0;
wire builder_csrbank10_ev_pending_w;
reg builder_csrbank10_ev_enable0_re = 1'd0;
wire builder_csrbank10_ev_enable0_r;
reg builder_csrbank10_ev_enable0_we = 1'd0;
wire builder_csrbank10_ev_enable0_w;
wire builder_csrbank10_sel;
wire [13:0] builder_interface11_bank_bus_adr;
wire builder_interface11_bank_bus_we;
wire [31:0] builder_interface11_bank_bus_dat_w;
reg [31:0] builder_interface11_bank_bus_dat_r = 32'd0;
reg builder_csrbank11_in_re = 1'd0;
wire builder_csrbank11_in_r;
reg builder_csrbank11_in_we = 1'd0;
wire builder_csrbank11_in_w;
reg builder_csrbank11_mode0_re = 1'd0;
wire builder_csrbank11_mode0_r;
reg builder_csrbank11_mode0_we = 1'd0;
wire builder_csrbank11_mode0_w;
reg builder_csrbank11_edge0_re = 1'd0;
wire builder_csrbank11_edge0_r;
reg builder_csrbank11_edge0_we = 1'd0;
wire builder_csrbank11_edge0_w;
reg builder_csrbank11_ev_status_re = 1'd0;
wire builder_csrbank11_ev_status_r;
reg builder_csrbank11_ev_status_we = 1'd0;
wire builder_csrbank11_ev_status_w;
reg builder_csrbank11_ev_pending_re = 1'd0;
wire builder_csrbank11_ev_pending_r;
reg builder_csrbank11_ev_pending_we = 1'd0;
wire builder_csrbank11_ev_pending_w;
reg builder_csrbank11_ev_enable0_re = 1'd0;
wire builder_csrbank11_ev_enable0_r;
reg builder_csrbank11_ev_enable0_we = 1'd0;
wire builder_csrbank11_ev_enable0_w;
wire builder_csrbank11_sel;
wire [13:0] builder_interface12_bank_bus_adr;
wire builder_interface12_bank_bus_we;
wire [31:0] builder_interface12_bank_bus_dat_w;
reg [31:0] builder_interface12_bank_bus_dat_r = 32'd0;
reg builder_csrbank12_in_re = 1'd0;
wire builder_csrbank12_in_r;
reg builder_csrbank12_in_we = 1'd0;
wire builder_csrbank12_in_w;
reg builder_csrbank12_mode0_re = 1'd0;
wire builder_csrbank12_mode0_r;
reg builder_csrbank12_mode0_we = 1'd0;
wire builder_csrbank12_mode0_w;
reg builder_csrbank12_edge0_re = 1'd0;
wire builder_csrbank12_edge0_r;
reg builder_csrbank12_edge0_we = 1'd0;
wire builder_csrbank12_edge0_w;
reg builder_csrbank12_ev_status_re = 1'd0;
wire builder_csrbank12_ev_status_r;
reg builder_csrbank12_ev_status_we = 1'd0;
wire builder_csrbank12_ev_status_w;
reg builder_csrbank12_ev_pending_re = 1'd0;
wire builder_csrbank12_ev_pending_r;
reg builder_csrbank12_ev_pending_we = 1'd0;
wire builder_csrbank12_ev_pending_w;
reg builder_csrbank12_ev_enable0_re = 1'd0;
wire builder_csrbank12_ev_enable0_r;
reg builder_csrbank12_ev_enable0_we = 1'd0;
wire builder_csrbank12_ev_enable0_w;
wire builder_csrbank12_sel;
wire [13:0] builder_interface13_bank_bus_adr;
wire builder_interface13_bank_bus_we;
wire [31:0] builder_interface13_bank_bus_dat_w;
reg [31:0] builder_interface13_bank_bus_dat_r = 32'd0;
reg builder_csrbank13_out0_re = 1'd0;
wire [2:0] builder_csrbank13_out0_r;
reg builder_csrbank13_out0_we = 1'd0;
wire [2:0] builder_csrbank13_out0_w;
wire builder_csrbank13_sel;
wire [13:0] builder_csr_interconnect_adr;
wire builder_csr_interconnect_we;
wire [31:0] builder_csr_interconnect_dat_w;
wire [31:0] builder_csr_interconnect_dat_r;
reg builder_state = 1'd0;
reg builder_next_state = 1'd0;
reg [29:0] builder_comb_array_muxed0 = 30'd0;
reg [31:0] builder_comb_array_muxed1 = 32'd0;
reg [3:0] builder_comb_array_muxed2 = 4'd0;
reg builder_comb_array_muxed3 = 1'd0;
reg builder_comb_array_muxed4 = 1'd0;
reg builder_comb_array_muxed5 = 1'd0;
reg [2:0] builder_comb_array_muxed6 = 3'd0;
reg [1:0] builder_comb_array_muxed7 = 2'd0;
reg builder_sync_array_muxed = 1'd0;
wire sdrio_clk;
wire sdrio_clk_1;
wire sdrio_clk_2;
wire sdrio_clk_3;
reg builder_multiregimpl0_regs0 = 1'd0;
reg builder_multiregimpl0_regs1 = 1'd0;
reg builder_multiregimpl1_regs0 = 1'd0;
reg builder_multiregimpl1_regs1 = 1'd0;
reg builder_multiregimpl2_regs0 = 1'd0;
reg builder_multiregimpl2_regs1 = 1'd0;
reg builder_multiregimpl3_regs0 = 1'd0;
reg builder_multiregimpl3_regs1 = 1'd0;
reg builder_multiregimpl4_regs0 = 1'd0;
reg builder_multiregimpl4_regs1 = 1'd0;
reg builder_multiregimpl5_regs0 = 1'd0;
reg builder_multiregimpl5_regs1 = 1'd0;
reg builder_multiregimpl6_regs0 = 1'd0;
reg builder_multiregimpl6_regs1 = 1'd0;
reg builder_multiregimpl7_regs0 = 1'd0;
reg builder_multiregimpl7_regs1 = 1'd0;
reg builder_multiregimpl8_regs0 = 1'd0;
reg builder_multiregimpl8_regs1 = 1'd0;
reg builder_multiregimpl9_regs0 = 1'd0;
reg builder_multiregimpl9_regs1 = 1'd0;
reg builder_multiregimpl10_regs0 = 1'd0;
reg builder_multiregimpl10_regs1 = 1'd0;
reg builder_multiregimpl11_regs0 = 1'd0;
reg builder_multiregimpl11_regs1 = 1'd0;
reg builder_multiregimpl12_regs0 = 1'd0;
reg builder_multiregimpl12_regs1 = 1'd0;
reg builder_multiregimpl13_regs0 = 1'd0;
reg builder_multiregimpl13_regs1 = 1'd0;
reg builder_multiregimpl14_regs0 = 1'd0;
reg builder_multiregimpl14_regs1 = 1'd0;
reg builder_multiregimpl15_regs0 = 1'd0;
reg builder_multiregimpl15_regs1 = 1'd0;
reg builder_multiregimpl16_regs0 = 1'd0;
reg builder_multiregimpl16_regs1 = 1'd0;
reg builder_multiregimpl17_regs0 = 1'd0;
reg builder_multiregimpl17_regs1 = 1'd0;
reg builder_multiregimpl18_regs0 = 1'd0;
reg builder_multiregimpl18_regs1 = 1'd0;
reg builder_multiregimpl19_regs0 = 1'd0;
reg builder_multiregimpl19_regs1 = 1'd0;
reg builder_multiregimpl20_regs0 = 1'd0;
reg builder_multiregimpl20_regs1 = 1'd0;
reg builder_multiregimpl21_regs0 = 1'd0;
reg builder_multiregimpl21_regs1 = 1'd0;
reg builder_multiregimpl22_regs0 = 1'd0;
reg builder_multiregimpl22_regs1 = 1'd0;
reg builder_multiregimpl23_regs0 = 1'd0;
reg builder_multiregimpl23_regs1 = 1'd0;
reg builder_multiregimpl24_regs0 = 1'd0;
reg builder_multiregimpl24_regs1 = 1'd0;
reg builder_multiregimpl25_regs0 = 1'd0;
reg builder_multiregimpl25_regs1 = 1'd0;
reg builder_multiregimpl26_regs0 = 1'd0;
reg builder_multiregimpl26_regs1 = 1'd0;
reg builder_multiregimpl27_regs0 = 1'd0;
reg builder_multiregimpl27_regs1 = 1'd0;
reg builder_multiregimpl28_regs0 = 1'd0;
reg builder_multiregimpl28_regs1 = 1'd0;
reg builder_multiregimpl29_regs0 = 1'd0;
reg builder_multiregimpl29_regs1 = 1'd0;
reg builder_multiregimpl30_regs0 = 1'd0;
reg builder_multiregimpl30_regs1 = 1'd0;
reg builder_multiregimpl31_regs0 = 1'd0;
reg builder_multiregimpl31_regs1 = 1'd0;
reg builder_multiregimpl32_regs0 = 1'd0;
reg builder_multiregimpl32_regs1 = 1'd0;
reg builder_multiregimpl33_regs0 = 1'd0;
reg builder_multiregimpl33_regs1 = 1'd0;
reg builder_multiregimpl34_regs0 = 1'd0;
reg builder_multiregimpl34_regs1 = 1'd0;
reg builder_multiregimpl35_regs0 = 1'd0;
reg builder_multiregimpl35_regs1 = 1'd0;
reg builder_multiregimpl36_regs0 = 1'd0;
reg builder_multiregimpl36_regs1 = 1'd0;
reg builder_multiregimpl37_regs0 = 1'd0;
reg builder_multiregimpl37_regs1 = 1'd0;
reg builder_multiregimpl38_regs0 = 1'd0;
reg builder_multiregimpl38_regs1 = 1'd0;
reg builder_multiregimpl39_regs0 = 1'd0;
reg builder_multiregimpl39_regs1 = 1'd0;
reg builder_multiregimpl40_regs0 = 1'd0;
reg builder_multiregimpl40_regs1 = 1'd0;
reg builder_multiregimpl41_regs0 = 1'd0;
reg builder_multiregimpl41_regs1 = 1'd0;
reg builder_multiregimpl42_regs0 = 1'd0;
reg builder_multiregimpl42_regs1 = 1'd0;
reg builder_multiregimpl43_regs0 = 1'd0;
reg builder_multiregimpl43_regs1 = 1'd0;
reg builder_multiregimpl44_regs0 = 1'd0;
reg builder_multiregimpl44_regs1 = 1'd0;
reg builder_multiregimpl45_regs0 = 1'd0;
reg builder_multiregimpl45_regs1 = 1'd0;
reg builder_multiregimpl46_regs0 = 1'd0;
reg builder_multiregimpl46_regs1 = 1'd0;
reg builder_multiregimpl47_regs0 = 1'd0;
reg builder_multiregimpl47_regs1 = 1'd0;
reg builder_multiregimpl48_regs0 = 1'd0;
reg builder_multiregimpl48_regs1 = 1'd0;
reg builder_multiregimpl49_regs0 = 1'd0;
reg builder_multiregimpl49_regs1 = 1'd0;
reg builder_multiregimpl50_regs0 = 1'd0;
reg builder_multiregimpl50_regs1 = 1'd0;
reg builder_multiregimpl51_regs0 = 1'd0;
reg builder_multiregimpl51_regs1 = 1'd0;
reg builder_multiregimpl52_regs0 = 1'd0;
reg builder_multiregimpl52_regs1 = 1'd0;
reg builder_multiregimpl53_regs0 = 1'd0;
reg builder_multiregimpl53_regs1 = 1'd0;
reg builder_multiregimpl54_regs0 = 1'd0;
reg builder_multiregimpl54_regs1 = 1'd0;
reg builder_multiregimpl55_regs0 = 1'd0;
reg builder_multiregimpl55_regs1 = 1'd0;
reg builder_multiregimpl56_regs0 = 1'd0;
reg builder_multiregimpl56_regs1 = 1'd0;
reg builder_multiregimpl57_regs0 = 1'd0;
reg builder_multiregimpl57_regs1 = 1'd0;
reg builder_multiregimpl58_regs0 = 1'd0;
reg builder_multiregimpl58_regs1 = 1'd0;
reg builder_multiregimpl59_regs0 = 1'd0;
reg builder_multiregimpl59_regs1 = 1'd0;
reg builder_multiregimpl60_regs0 = 1'd0;
reg builder_multiregimpl60_regs1 = 1'd0;
reg builder_multiregimpl61_regs0 = 1'd0;
reg builder_multiregimpl61_regs1 = 1'd0;
reg builder_multiregimpl62_regs0 = 1'd0;
reg builder_multiregimpl62_regs1 = 1'd0;
reg builder_multiregimpl63_regs0 = 1'd0;
reg builder_multiregimpl63_regs1 = 1'd0;
reg builder_multiregimpl64_regs0 = 1'd0;
reg builder_multiregimpl64_regs1 = 1'd0;
reg builder_multiregimpl65_regs0 = 1'd0;
reg builder_multiregimpl65_regs1 = 1'd0;
reg builder_multiregimpl66_regs0 = 1'd0;
reg builder_multiregimpl66_regs1 = 1'd0;
reg builder_multiregimpl67_regs0 = 1'd0;
reg builder_multiregimpl67_regs1 = 1'd0;
reg builder_multiregimpl68_regs0 = 1'd0;
reg builder_multiregimpl68_regs1 = 1'd0;
reg builder_multiregimpl69_regs0 = 1'd0;
reg builder_multiregimpl69_regs1 = 1'd0;
reg builder_multiregimpl70_regs0 = 1'd0;
reg builder_multiregimpl70_regs1 = 1'd0;
reg builder_multiregimpl71_regs0 = 1'd0;
reg builder_multiregimpl71_regs1 = 1'd0;
reg builder_multiregimpl72_regs0 = 1'd0;
reg builder_multiregimpl72_regs1 = 1'd0;
reg builder_multiregimpl73_regs0 = 1'd0;
reg builder_multiregimpl73_regs1 = 1'd0;
reg builder_multiregimpl74_regs0 = 1'd0;
reg builder_multiregimpl74_regs1 = 1'd0;
reg builder_multiregimpl75_regs0 = 1'd0;
reg builder_multiregimpl75_regs1 = 1'd0;
reg builder_multiregimpl76_regs0 = 1'd0;
reg builder_multiregimpl76_regs1 = 1'd0;
reg builder_multiregimpl77_regs0 = 1'd0;
reg builder_multiregimpl77_regs1 = 1'd0;
reg builder_multiregimpl78_regs0 = 1'd0;
reg builder_multiregimpl78_regs1 = 1'd0;
reg builder_multiregimpl79_regs0 = 1'd0;
reg builder_multiregimpl79_regs1 = 1'd0;
reg builder_multiregimpl80_regs0 = 1'd0;
reg builder_multiregimpl80_regs1 = 1'd0;
reg builder_multiregimpl81_regs0 = 1'd0;
reg builder_multiregimpl81_regs1 = 1'd0;
reg builder_multiregimpl82_regs0 = 1'd0;
reg builder_multiregimpl82_regs1 = 1'd0;
reg builder_multiregimpl83_regs0 = 1'd0;
reg builder_multiregimpl83_regs1 = 1'd0;
reg builder_multiregimpl84_regs0 = 1'd0;
reg builder_multiregimpl84_regs1 = 1'd0;
reg builder_multiregimpl85_regs0 = 1'd0;
reg builder_multiregimpl85_regs1 = 1'd0;
reg builder_multiregimpl86_regs0 = 1'd0;
reg builder_multiregimpl86_regs1 = 1'd0;
reg builder_multiregimpl87_regs0 = 1'd0;
reg builder_multiregimpl87_regs1 = 1'd0;
reg builder_multiregimpl88_regs0 = 1'd0;
reg builder_multiregimpl88_regs1 = 1'd0;
reg builder_multiregimpl89_regs0 = 1'd0;
reg builder_multiregimpl89_regs1 = 1'd0;
reg builder_multiregimpl90_regs0 = 1'd0;
reg builder_multiregimpl90_regs1 = 1'd0;
reg builder_multiregimpl91_regs0 = 1'd0;
reg builder_multiregimpl91_regs1 = 1'd0;
reg builder_multiregimpl92_regs0 = 1'd0;
reg builder_multiregimpl92_regs1 = 1'd0;
reg builder_multiregimpl93_regs0 = 1'd0;
reg builder_multiregimpl93_regs1 = 1'd0;
reg builder_multiregimpl94_regs0 = 1'd0;
reg builder_multiregimpl94_regs1 = 1'd0;
reg builder_multiregimpl95_regs0 = 1'd0;
reg builder_multiregimpl95_regs1 = 1'd0;
reg builder_multiregimpl96_regs0 = 1'd0;
reg builder_multiregimpl96_regs1 = 1'd0;
reg builder_multiregimpl97_regs0 = 1'd0;
reg builder_multiregimpl97_regs1 = 1'd0;
reg builder_multiregimpl98_regs0 = 1'd0;
reg builder_multiregimpl98_regs1 = 1'd0;
reg builder_multiregimpl99_regs0 = 1'd0;
reg builder_multiregimpl99_regs1 = 1'd0;
reg builder_multiregimpl100_regs0 = 1'd0;
reg builder_multiregimpl100_regs1 = 1'd0;
reg builder_multiregimpl101_regs0 = 1'd0;
reg builder_multiregimpl101_regs1 = 1'd0;
reg builder_multiregimpl102_regs0 = 1'd0;
reg builder_multiregimpl102_regs1 = 1'd0;
reg builder_multiregimpl103_regs0 = 1'd0;
reg builder_multiregimpl103_regs1 = 1'd0;
reg builder_multiregimpl104_regs0 = 1'd0;
reg builder_multiregimpl104_regs1 = 1'd0;
reg builder_multiregimpl105_regs0 = 1'd0;
reg builder_multiregimpl105_regs1 = 1'd0;
reg builder_multiregimpl106_regs0 = 1'd0;
reg builder_multiregimpl106_regs1 = 1'd0;
reg builder_multiregimpl107_regs0 = 1'd0;
reg builder_multiregimpl107_regs1 = 1'd0;
reg builder_multiregimpl108_regs0 = 1'd0;
reg builder_multiregimpl108_regs1 = 1'd0;
reg builder_multiregimpl109_regs0 = 1'd0;
reg builder_multiregimpl109_regs1 = 1'd0;
reg builder_multiregimpl110_regs0 = 1'd0;
reg builder_multiregimpl110_regs1 = 1'd0;
reg builder_multiregimpl111_regs0 = 1'd0;
reg builder_multiregimpl111_regs1 = 1'd0;
reg builder_multiregimpl112_regs0 = 1'd0;
reg builder_multiregimpl112_regs1 = 1'd0;
reg builder_multiregimpl113_regs0 = 1'd0;
reg builder_multiregimpl113_regs1 = 1'd0;
reg builder_multiregimpl114_regs0 = 1'd0;
reg builder_multiregimpl114_regs1 = 1'd0;
reg builder_multiregimpl115_regs0 = 1'd0;
reg builder_multiregimpl115_regs1 = 1'd0;
reg builder_multiregimpl116_regs0 = 1'd0;
reg builder_multiregimpl116_regs1 = 1'd0;
reg builder_multiregimpl117_regs0 = 1'd0;
reg builder_multiregimpl117_regs1 = 1'd0;
reg builder_multiregimpl118_regs0 = 1'd0;
reg builder_multiregimpl118_regs1 = 1'd0;
reg builder_multiregimpl119_regs0 = 1'd0;
reg builder_multiregimpl119_regs1 = 1'd0;
reg builder_multiregimpl120_regs0 = 1'd0;
reg builder_multiregimpl120_regs1 = 1'd0;
reg builder_multiregimpl121_regs0 = 1'd0;
reg builder_multiregimpl121_regs1 = 1'd0;
reg builder_multiregimpl122_regs0 = 1'd0;
reg builder_multiregimpl122_regs1 = 1'd0;
reg builder_multiregimpl123_regs0 = 1'd0;
reg builder_multiregimpl123_regs1 = 1'd0;
reg builder_multiregimpl124_regs0 = 1'd0;
reg builder_multiregimpl124_regs1 = 1'd0;
reg builder_multiregimpl125_regs0 = 1'd0;
reg builder_multiregimpl125_regs1 = 1'd0;
reg builder_multiregimpl126_regs0 = 1'd0;
reg builder_multiregimpl126_regs1 = 1'd0;
reg builder_multiregimpl127_regs0 = 1'd0;
reg builder_multiregimpl127_regs1 = 1'd0;
reg builder_multiregimpl128_regs0 = 1'd0;
reg builder_multiregimpl128_regs1 = 1'd0;
reg builder_multiregimpl129_regs0 = 1'd0;
reg builder_multiregimpl129_regs1 = 1'd0;
reg builder_multiregimpl130_regs0 = 1'd0;
reg builder_multiregimpl130_regs1 = 1'd0;
reg builder_multiregimpl131_regs0 = 1'd0;
reg builder_multiregimpl131_regs1 = 1'd0;
reg builder_multiregimpl132_regs0 = 1'd0;
reg builder_multiregimpl132_regs1 = 1'd0;
reg builder_multiregimpl133_regs0 = 1'd0;
reg builder_multiregimpl133_regs1 = 1'd0;
reg builder_multiregimpl134_regs0 = 1'd0;
reg builder_multiregimpl134_regs1 = 1'd0;
reg builder_multiregimpl135_regs0 = 1'd0;
reg builder_multiregimpl135_regs1 = 1'd0;
reg builder_multiregimpl136_regs0 = 1'd0;
reg builder_multiregimpl136_regs1 = 1'd0;

assign main_picorv32_reset = (main_soc_rst | main_cpu_rst);
assign main_bus_error = builder_error;
always @(*) begin
	main_picorv32_interrupt = 32'd0;
	main_picorv32_interrupt[0] = main_gpioin0_gpioin0_irq;
	main_picorv32_interrupt[1] = main_gpioin1_gpioin1_irq;
	main_picorv32_interrupt[2] = main_gpioin2_gpioin2_irq;
	main_picorv32_interrupt[3] = main_gpioin3_gpioin3_irq;
	main_picorv32_interrupt[4] = main_gpioin4_gpioin4_irq;
	main_picorv32_interrupt[5] = main_gpioin5_gpioin5_irq;
end
assign sys_clk = core_clk;
assign por_clk = core_clk;
assign sys_rst = main_int_rst;
assign main_bus_errors_status = main_bus_errors;
assign main_picorv32_idbus_adr = main_picorv32_mem_addr[31:2];
assign main_picorv32_idbus_dat_w = main_picorv32_mem_wdata;
assign main_picorv32_idbus_we = (main_picorv32_mem_wstrb != 1'd0);
assign main_picorv32_idbus_sel = main_picorv32_mem_wstrb;
assign main_picorv32_idbus_cyc = main_picorv32_mem_valid;
assign main_picorv32_idbus_stb = main_picorv32_mem_valid;
assign main_picorv32_idbus_cti = 1'd0;
assign main_picorv32_idbus_bte = 1'd0;
assign main_picorv32_mem_ready = main_picorv32_idbus_ack;
assign main_picorv32_mem_rdata = main_picorv32_idbus_dat_r;
assign main_start0 = main_start1;
assign main_length0 = main_length1;
assign main_done1 = main_done0;
assign main_mosi = main_mosi_storage;
assign main_miso_status = main_miso;
assign main_cs = main_sel;
assign main_cs_mode = main_mode0;
assign main_loopback = main_mode1;
assign main_clk_rise = (main_clk_divider1 == (main_clk_divider0[15:1] - 1'd1));
assign main_clk_fall = (main_clk_divider1 == (main_clk_divider0 - 1'd1));
assign main_clk_divider0 = main_spimaster_storage;
always @(*) begin
	builder_spimaster_next_state = 2'd0;
	builder_spimaster_next_state = builder_spimaster_state;
	case (builder_spimaster_state)
		1'd1: begin
			if (main_clk_fall) begin
				builder_spimaster_next_state = 2'd2;
			end
		end
		2'd2: begin
			if (main_clk_fall) begin
				if ((main_count == (main_length0 - 1'd1))) begin
					builder_spimaster_next_state = 2'd3;
				end
			end
		end
		2'd3: begin
			if (main_clk_rise) begin
				builder_spimaster_next_state = 1'd0;
			end
		end
		default: begin
			if (main_start0) begin
				builder_spimaster_next_state = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_done0 = 1'd0;
	case (builder_spimaster_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			main_done0 = 1'd1;
			if (main_start0) begin
				main_done0 = 1'd0;
			end
		end
	endcase
end
always @(*) begin
	main_irq = 1'd0;
	case (builder_spimaster_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_clk_rise) begin
				main_irq = 1'd1;
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_clk_enable = 1'd0;
	case (builder_spimaster_state)
		1'd1: begin
		end
		2'd2: begin
			main_clk_enable = 1'd1;
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_xfer_enable = 1'd0;
	case (builder_spimaster_state)
		1'd1: begin
			if (main_clk_fall) begin
				main_xfer_enable = 1'd1;
			end
		end
		2'd2: begin
			main_xfer_enable = 1'd1;
		end
		2'd3: begin
			main_xfer_enable = 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_mosi_latch = 1'd0;
	case (builder_spimaster_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if (main_start0) begin
				main_mosi_latch = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_miso_latch = 1'd0;
	case (builder_spimaster_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_clk_rise) begin
				main_miso_latch = 1'd1;
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_count_spimaster_next_value = 3'd0;
	case (builder_spimaster_state)
		1'd1: begin
			main_count_spimaster_next_value = 1'd0;
		end
		2'd2: begin
			if (main_clk_fall) begin
				main_count_spimaster_next_value = (main_count + 1'd1);
			end
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_count_spimaster_next_value_ce = 1'd0;
	case (builder_spimaster_state)
		1'd1: begin
			main_count_spimaster_next_value_ce = 1'd1;
		end
		2'd2: begin
			if (main_clk_fall) begin
				main_count_spimaster_next_value_ce = 1'd1;
			end
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
assign main_datain = main_bus_dat_w[31:0];
always @(*) begin
	main_wren_b = 1'd0;
	if ((main_bus_adr[9] == 1'd1)) begin
		main_wren_b = (~((main_bus_we & main_bus_stb) & main_bus_cyc));
	end
end
always @(*) begin
	main_bus_dat_r = 32'd0;
	if ((main_bus_adr[9] == 1'd1)) begin
		main_bus_dat_r[31:0] = main_dataout;
	end
end
always @(*) begin
	main_cs_b = 1'd0;
	if ((main_bus_adr[9] == 1'd1)) begin
		main_cs_b = 1'd1;
	end
end
always @(*) begin
	main_maskwren = 4'd0;
	main_maskwren[0] = main_bus_sel[0];
	main_maskwren[1] = main_bus_sel[1];
	main_maskwren[2] = main_bus_sel[2];
	main_maskwren[3] = main_bus_sel[3];
end
assign main_litespisdrphycore_div = main_litespisdrphycore_spi_clk_divisor;
assign main_litespisdrphycore_sample_cnt = 1'd1;
assign main_litespisdrphycore_update_cnt = 1'd1;
assign main_litespisdrphycore_wait = main_litespisdrphycore_cs;
assign main_litespisdrphycore_cs_enable = main_litespisdrphycore_done;
assign flash_cs_n = (~main_litespisdrphycore_cs_enable);
assign main_litespisdrphycore_dq_oe = main_litespisdrphycore_sink_payload_mask;
always @(*) begin
	main_litespisdrphycore_dq_o = 1'd0;
	case (main_litespisdrphycore_sink_payload_width)
		1'd1: begin
			main_litespisdrphycore_dq_o = main_litespisdrphycore_sr_out[31];
		end
		2'd2: begin
			main_litespisdrphycore_dq_o = main_litespisdrphycore_sr_out[31:30];
		end
		3'd4: begin
			main_litespisdrphycore_dq_o = main_litespisdrphycore_sr_out[31:28];
		end
		4'd8: begin
			main_litespisdrphycore_dq_o = main_litespisdrphycore_sr_out[31:24];
		end
	endcase
end
assign main_litespisdrphycore_source_payload_data = main_litespisdrphycore_sr_in;
assign main_litespisdrphycore_spi_clk_divisor = main_litespisdrphycore_storage;
assign main_litespisdrphycore_posedge = ((main_litespisdrphycore_en & (~main_litespisdrphycore_clk)) & (main_litespisdrphycore_cnt == main_litespisdrphycore_div));
assign main_litespisdrphycore_negedge = ((main_litespisdrphycore_en & main_litespisdrphycore_clk) & (main_litespisdrphycore_cnt == main_litespisdrphycore_div));
assign main_litespisdrphycore_sample = (main_litespisdrphycore_cnt == main_litespisdrphycore_sample_cnt);
assign main_litespisdrphycore_update = (main_litespisdrphycore_cnt == main_litespisdrphycore_update_cnt);
assign main_litespisdrphycore_done = (main_litespisdrphycore_count == 1'd0);
always @(*) begin
	builder_litespiphy_next_state = 2'd0;
	builder_litespiphy_next_state = builder_litespiphy_state;
	case (builder_litespiphy_state)
		1'd1: begin
			if (main_litespisdrphycore_negedge) begin
				if ((main_litespisdrphycore_sr_cnt == 1'd0)) begin
					builder_litespiphy_next_state = 2'd2;
				end
			end
		end
		2'd2: begin
			if (((main_litespisdrphycore_spi_clk_divisor > 1'd0) | main_litespisdrphycore_posedge_reg2)) begin
				builder_litespiphy_next_state = 2'd3;
			end
		end
		2'd3: begin
			if (main_litespisdrphycore_source_ready) begin
				builder_litespiphy_next_state = 1'd0;
			end
		end
		default: begin
			if ((main_litespisdrphycore_cs_enable & main_litespisdrphycore_sink_valid)) begin
				builder_litespiphy_next_state = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_litespisdrphycore_source_valid = 1'd0;
	case (builder_litespiphy_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			main_litespisdrphycore_source_valid = 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_litespisdrphycore_source_last = 1'd0;
	case (builder_litespiphy_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			main_litespisdrphycore_source_last = 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_litespisdrphycore_sr_in_shift = 1'd0;
	case (builder_litespiphy_state)
		1'd1: begin
			if (main_litespisdrphycore_posedge_reg2) begin
				main_litespisdrphycore_sr_in_shift = 1'd1;
			end
		end
		2'd2: begin
			if (((main_litespisdrphycore_spi_clk_divisor > 1'd0) | main_litespisdrphycore_posedge_reg2)) begin
				main_litespisdrphycore_sr_in_shift = (main_litespisdrphycore_spi_clk_divisor == 1'd0);
			end
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_litespisdrphycore_sr_cnt_litespiphy_next_value = 8'd0;
	case (builder_litespiphy_state)
		1'd1: begin
			if (main_litespisdrphycore_negedge) begin
				main_litespisdrphycore_sr_cnt_litespiphy_next_value = (main_litespisdrphycore_sr_cnt - main_litespisdrphycore_sink_payload_width);
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_litespisdrphycore_cs_enable & main_litespisdrphycore_sink_valid)) begin
				main_litespisdrphycore_sr_cnt_litespiphy_next_value = (main_litespisdrphycore_sink_payload_len - main_litespisdrphycore_sink_payload_width);
			end
		end
	endcase
end
always @(*) begin
	main_litespisdrphycore_sr_out_load = 1'd0;
	case (builder_litespiphy_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_litespisdrphycore_cs_enable & main_litespisdrphycore_sink_valid)) begin
				main_litespisdrphycore_sr_out_load = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_litespisdrphycore_sr_cnt_litespiphy_next_value_ce = 1'd0;
	case (builder_litespiphy_state)
		1'd1: begin
			if (main_litespisdrphycore_negedge) begin
				main_litespisdrphycore_sr_cnt_litespiphy_next_value_ce = 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_litespisdrphycore_cs_enable & main_litespisdrphycore_sink_valid)) begin
				main_litespisdrphycore_sr_cnt_litespiphy_next_value_ce = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_litespisdrphycore_sr_out_shift = 1'd0;
	case (builder_litespiphy_state)
		1'd1: begin
			if (main_litespisdrphycore_negedge) begin
				main_litespisdrphycore_sr_out_shift = 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_litespisdrphycore_sink_ready = 1'd0;
	case (builder_litespiphy_state)
		1'd1: begin
		end
		2'd2: begin
			if (((main_litespisdrphycore_spi_clk_divisor > 1'd0) | main_litespisdrphycore_posedge_reg2)) begin
				main_litespisdrphycore_sink_ready = 1'd1;
			end
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_litespisdrphycore_en = 1'd0;
	case (builder_litespiphy_state)
		1'd1: begin
			main_litespisdrphycore_en = 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
assign main_litespisdrphycore_cs = main_crossbar_cs;
assign main_litespimmap_sink_valid = main_port_mmap_user_port_source_valid;
assign main_port_mmap_user_port_source_ready = main_litespimmap_sink_ready;
assign main_litespimmap_sink_first = main_port_mmap_user_port_source_first;
assign main_litespimmap_sink_last = main_port_mmap_user_port_source_last;
assign main_litespimmap_sink_payload_data = main_port_mmap_user_port_source_payload_data;
assign main_port_mmap_user_port_sink_valid = main_litespimmap_source_valid;
assign main_litespimmap_source_ready = main_port_mmap_user_port_sink_ready;
assign main_port_mmap_user_port_sink_first = main_litespimmap_source_first;
assign main_port_mmap_user_port_sink_last = main_litespimmap_source_last;
assign main_port_mmap_user_port_sink_payload_data = main_litespimmap_source_payload_data;
assign main_port_mmap_user_port_sink_payload_len = main_litespimmap_source_payload_len;
assign main_port_mmap_user_port_sink_payload_width = main_litespimmap_source_payload_width;
assign main_port_mmap_user_port_sink_payload_mask = main_litespimmap_source_payload_mask;
assign main_master_sink_sink_valid = main_port_master_user_port_source_valid;
assign main_port_master_user_port_source_ready = main_master_sink_sink_ready;
assign main_master_sink_sink_first = main_port_master_user_port_source_first;
assign main_master_sink_sink_last = main_port_master_user_port_source_last;
assign main_master_sink_sink_payload_data = main_port_master_user_port_source_payload_data;
assign main_port_master_user_port_sink_valid = main_master_source_source_valid;
assign main_master_source_source_ready = main_port_master_user_port_sink_ready;
assign main_port_master_user_port_sink_first = main_master_source_source_first;
assign main_port_master_user_port_sink_last = main_master_source_source_last;
assign main_port_master_user_port_sink_payload_data = main_master_source_source_payload_data;
assign main_port_master_user_port_sink_payload_len = main_master_source_source_payload_len;
assign main_port_master_user_port_sink_payload_width = main_master_source_source_payload_width;
assign main_port_master_user_port_sink_payload_mask = main_master_source_source_payload_mask;
assign main_litespisdrphycore_sink_valid = main_crossbar_source_valid;
assign main_crossbar_source_ready = main_litespisdrphycore_sink_ready;
assign main_litespisdrphycore_sink_first = main_crossbar_source_first;
assign main_litespisdrphycore_sink_last = main_crossbar_source_last;
assign main_litespisdrphycore_sink_payload_data = main_crossbar_source_payload_data;
assign main_litespisdrphycore_sink_payload_len = main_crossbar_source_payload_len;
assign main_litespisdrphycore_sink_payload_width = main_crossbar_source_payload_width;
assign main_litespisdrphycore_sink_payload_mask = main_crossbar_source_payload_mask;
assign main_crossbar_sink_valid = main_litespisdrphycore_source_valid;
assign main_litespisdrphycore_source_ready = main_crossbar_sink_ready;
assign main_crossbar_sink_first = main_litespisdrphycore_source_first;
assign main_crossbar_sink_last = main_litespisdrphycore_source_last;
assign main_crossbar_sink_payload_data = main_litespisdrphycore_source_payload_data;
assign main_port_mmap_internal_port_sink_valid = main_port_mmap_user_port_sink_valid;
assign main_port_mmap_user_port_sink_ready = main_port_mmap_internal_port_sink_ready;
assign main_port_mmap_internal_port_sink_first = main_port_mmap_user_port_sink_first;
assign main_port_mmap_internal_port_sink_last = main_port_mmap_user_port_sink_last;
assign main_port_mmap_internal_port_sink_payload_data = main_port_mmap_user_port_sink_payload_data;
assign main_port_mmap_internal_port_sink_payload_len = main_port_mmap_user_port_sink_payload_len;
assign main_port_mmap_internal_port_sink_payload_width = main_port_mmap_user_port_sink_payload_width;
assign main_port_mmap_internal_port_sink_payload_mask = main_port_mmap_user_port_sink_payload_mask;
assign main_port_mmap_user_port_source_valid = main_port_mmap_internal_port_source_valid;
assign main_port_mmap_internal_port_source_ready = main_port_mmap_user_port_source_ready;
assign main_port_mmap_user_port_source_first = main_port_mmap_internal_port_source_first;
assign main_port_mmap_user_port_source_last = main_port_mmap_internal_port_source_last;
assign main_port_mmap_user_port_source_payload_data = main_port_mmap_internal_port_source_payload_data;
assign main_port_mmap_request = main_litespimmap_cs;
assign main_port_master_internal_port_sink_valid = main_port_master_user_port_sink_valid;
assign main_port_master_user_port_sink_ready = main_port_master_internal_port_sink_ready;
assign main_port_master_internal_port_sink_first = main_port_master_user_port_sink_first;
assign main_port_master_internal_port_sink_last = main_port_master_user_port_sink_last;
assign main_port_master_internal_port_sink_payload_data = main_port_master_user_port_sink_payload_data;
assign main_port_master_internal_port_sink_payload_len = main_port_master_user_port_sink_payload_len;
assign main_port_master_internal_port_sink_payload_width = main_port_master_user_port_sink_payload_width;
assign main_port_master_internal_port_sink_payload_mask = main_port_master_user_port_sink_payload_mask;
assign main_port_master_user_port_source_valid = main_port_master_internal_port_source_valid;
assign main_port_master_internal_port_source_ready = main_port_master_user_port_source_ready;
assign main_port_master_user_port_source_first = main_port_master_internal_port_source_first;
assign main_port_master_user_port_source_last = main_port_master_internal_port_source_last;
assign main_port_master_user_port_source_payload_data = main_port_master_internal_port_source_payload_data;
assign main_port_master_request = main_master_cs;
assign builder_litespi_tx_mux_endpoint0_sink_valid = main_port_mmap_internal_port_sink_valid;
assign main_port_mmap_internal_port_sink_ready = builder_litespi_tx_mux_endpoint0_sink_ready;
assign builder_litespi_tx_mux_endpoint0_sink_first = main_port_mmap_internal_port_sink_first;
assign builder_litespi_tx_mux_endpoint0_sink_last = main_port_mmap_internal_port_sink_last;
assign builder_litespi_tx_mux_endpoint0_sink_payload_data = main_port_mmap_internal_port_sink_payload_data;
assign builder_litespi_tx_mux_endpoint0_sink_payload_len = main_port_mmap_internal_port_sink_payload_len;
assign builder_litespi_tx_mux_endpoint0_sink_payload_width = main_port_mmap_internal_port_sink_payload_width;
assign builder_litespi_tx_mux_endpoint0_sink_payload_mask = main_port_mmap_internal_port_sink_payload_mask;
assign main_port_mmap_internal_port_source_valid = builder_litespi_rx_demux_endpoint0_source_valid;
assign builder_litespi_rx_demux_endpoint0_source_ready = main_port_mmap_internal_port_source_ready;
assign main_port_mmap_internal_port_source_first = builder_litespi_rx_demux_endpoint0_source_first;
assign main_port_mmap_internal_port_source_last = builder_litespi_rx_demux_endpoint0_source_last;
assign main_port_mmap_internal_port_source_payload_data = builder_litespi_rx_demux_endpoint0_source_payload_data;
assign builder_litespi_tx_mux_endpoint1_sink_valid = main_port_master_internal_port_sink_valid;
assign main_port_master_internal_port_sink_ready = builder_litespi_tx_mux_endpoint1_sink_ready;
assign builder_litespi_tx_mux_endpoint1_sink_first = main_port_master_internal_port_sink_first;
assign builder_litespi_tx_mux_endpoint1_sink_last = main_port_master_internal_port_sink_last;
assign builder_litespi_tx_mux_endpoint1_sink_payload_data = main_port_master_internal_port_sink_payload_data;
assign builder_litespi_tx_mux_endpoint1_sink_payload_len = main_port_master_internal_port_sink_payload_len;
assign builder_litespi_tx_mux_endpoint1_sink_payload_width = main_port_master_internal_port_sink_payload_width;
assign builder_litespi_tx_mux_endpoint1_sink_payload_mask = main_port_master_internal_port_sink_payload_mask;
assign main_port_master_internal_port_source_valid = builder_litespi_rx_demux_endpoint1_source_valid;
assign builder_litespi_rx_demux_endpoint1_source_ready = main_port_master_internal_port_source_ready;
assign main_port_master_internal_port_source_first = builder_litespi_rx_demux_endpoint1_source_first;
assign main_port_master_internal_port_source_last = builder_litespi_rx_demux_endpoint1_source_last;
assign main_port_master_internal_port_source_payload_data = builder_litespi_rx_demux_endpoint1_source_payload_data;
assign builder_litespi_request = {main_port_master_request, main_port_mmap_request};
assign main_crossbar_source_valid = builder_litespi_tx_mux_source_valid;
assign builder_litespi_tx_mux_source_ready = main_crossbar_source_ready;
assign main_crossbar_source_first = builder_litespi_tx_mux_source_first;
assign main_crossbar_source_last = builder_litespi_tx_mux_source_last;
assign main_crossbar_source_payload_data = builder_litespi_tx_mux_source_payload_data;
assign main_crossbar_source_payload_len = builder_litespi_tx_mux_source_payload_len;
assign main_crossbar_source_payload_width = builder_litespi_tx_mux_source_payload_width;
assign main_crossbar_source_payload_mask = builder_litespi_tx_mux_source_payload_mask;
assign builder_litespi_tx_mux_sel = builder_litespi_grant;
assign builder_litespi_rx_demux_sink_valid = main_crossbar_sink_valid;
assign main_crossbar_sink_ready = builder_litespi_rx_demux_sink_ready;
assign builder_litespi_rx_demux_sink_first = main_crossbar_sink_first;
assign builder_litespi_rx_demux_sink_last = main_crossbar_sink_last;
assign builder_litespi_rx_demux_sink_payload_data = main_crossbar_sink_payload_data;
assign builder_litespi_rx_demux_sel = builder_litespi_grant;
always @(*) begin
	main_crossbar_cs = 1'd0;
	case (builder_litespi_grant)
		1'd0: begin
			main_crossbar_cs = main_litespimmap_cs;
		end
		1'd1: begin
			main_crossbar_cs = main_master_cs;
		end
	endcase
end
always @(*) begin
	builder_litespi_tx_mux_source_payload_len = 6'd0;
	case (builder_litespi_tx_mux_sel)
		1'd0: begin
			builder_litespi_tx_mux_source_payload_len = builder_litespi_tx_mux_endpoint0_sink_payload_len;
		end
		1'd1: begin
			builder_litespi_tx_mux_source_payload_len = builder_litespi_tx_mux_endpoint1_sink_payload_len;
		end
	endcase
end
always @(*) begin
	builder_litespi_tx_mux_source_payload_width = 4'd0;
	case (builder_litespi_tx_mux_sel)
		1'd0: begin
			builder_litespi_tx_mux_source_payload_width = builder_litespi_tx_mux_endpoint0_sink_payload_width;
		end
		1'd1: begin
			builder_litespi_tx_mux_source_payload_width = builder_litespi_tx_mux_endpoint1_sink_payload_width;
		end
	endcase
end
always @(*) begin
	builder_litespi_tx_mux_source_payload_mask = 8'd0;
	case (builder_litespi_tx_mux_sel)
		1'd0: begin
			builder_litespi_tx_mux_source_payload_mask = builder_litespi_tx_mux_endpoint0_sink_payload_mask;
		end
		1'd1: begin
			builder_litespi_tx_mux_source_payload_mask = builder_litespi_tx_mux_endpoint1_sink_payload_mask;
		end
	endcase
end
always @(*) begin
	builder_litespi_tx_mux_endpoint0_sink_ready = 1'd0;
	case (builder_litespi_tx_mux_sel)
		1'd0: begin
			builder_litespi_tx_mux_endpoint0_sink_ready = builder_litespi_tx_mux_source_ready;
		end
		1'd1: begin
		end
	endcase
end
always @(*) begin
	builder_litespi_tx_mux_source_valid = 1'd0;
	case (builder_litespi_tx_mux_sel)
		1'd0: begin
			builder_litespi_tx_mux_source_valid = builder_litespi_tx_mux_endpoint0_sink_valid;
		end
		1'd1: begin
			builder_litespi_tx_mux_source_valid = builder_litespi_tx_mux_endpoint1_sink_valid;
		end
	endcase
end
always @(*) begin
	builder_litespi_tx_mux_endpoint1_sink_ready = 1'd0;
	case (builder_litespi_tx_mux_sel)
		1'd0: begin
		end
		1'd1: begin
			builder_litespi_tx_mux_endpoint1_sink_ready = builder_litespi_tx_mux_source_ready;
		end
	endcase
end
always @(*) begin
	builder_litespi_tx_mux_source_first = 1'd0;
	case (builder_litespi_tx_mux_sel)
		1'd0: begin
			builder_litespi_tx_mux_source_first = builder_litespi_tx_mux_endpoint0_sink_first;
		end
		1'd1: begin
			builder_litespi_tx_mux_source_first = builder_litespi_tx_mux_endpoint1_sink_first;
		end
	endcase
end
always @(*) begin
	builder_litespi_tx_mux_source_last = 1'd0;
	case (builder_litespi_tx_mux_sel)
		1'd0: begin
			builder_litespi_tx_mux_source_last = builder_litespi_tx_mux_endpoint0_sink_last;
		end
		1'd1: begin
			builder_litespi_tx_mux_source_last = builder_litespi_tx_mux_endpoint1_sink_last;
		end
	endcase
end
always @(*) begin
	builder_litespi_tx_mux_source_payload_data = 32'd0;
	case (builder_litespi_tx_mux_sel)
		1'd0: begin
			builder_litespi_tx_mux_source_payload_data = builder_litespi_tx_mux_endpoint0_sink_payload_data;
		end
		1'd1: begin
			builder_litespi_tx_mux_source_payload_data = builder_litespi_tx_mux_endpoint1_sink_payload_data;
		end
	endcase
end
always @(*) begin
	builder_litespi_rx_demux_endpoint1_source_first = 1'd0;
	case (builder_litespi_rx_demux_sel)
		1'd0: begin
		end
		1'd1: begin
			builder_litespi_rx_demux_endpoint1_source_first = builder_litespi_rx_demux_sink_first;
		end
	endcase
end
always @(*) begin
	builder_litespi_rx_demux_endpoint1_source_last = 1'd0;
	case (builder_litespi_rx_demux_sel)
		1'd0: begin
		end
		1'd1: begin
			builder_litespi_rx_demux_endpoint1_source_last = builder_litespi_rx_demux_sink_last;
		end
	endcase
end
always @(*) begin
	builder_litespi_rx_demux_endpoint1_source_payload_data = 32'd0;
	case (builder_litespi_rx_demux_sel)
		1'd0: begin
		end
		1'd1: begin
			builder_litespi_rx_demux_endpoint1_source_payload_data = builder_litespi_rx_demux_sink_payload_data;
		end
	endcase
end
always @(*) begin
	builder_litespi_rx_demux_sink_ready = 1'd0;
	case (builder_litespi_rx_demux_sel)
		1'd0: begin
			builder_litespi_rx_demux_sink_ready = builder_litespi_rx_demux_endpoint0_source_ready;
		end
		1'd1: begin
			builder_litespi_rx_demux_sink_ready = builder_litespi_rx_demux_endpoint1_source_ready;
		end
	endcase
end
always @(*) begin
	builder_litespi_rx_demux_endpoint0_source_valid = 1'd0;
	case (builder_litespi_rx_demux_sel)
		1'd0: begin
			builder_litespi_rx_demux_endpoint0_source_valid = builder_litespi_rx_demux_sink_valid;
		end
		1'd1: begin
		end
	endcase
end
always @(*) begin
	builder_litespi_rx_demux_endpoint0_source_first = 1'd0;
	case (builder_litespi_rx_demux_sel)
		1'd0: begin
			builder_litespi_rx_demux_endpoint0_source_first = builder_litespi_rx_demux_sink_first;
		end
		1'd1: begin
		end
	endcase
end
always @(*) begin
	builder_litespi_rx_demux_endpoint0_source_last = 1'd0;
	case (builder_litespi_rx_demux_sel)
		1'd0: begin
			builder_litespi_rx_demux_endpoint0_source_last = builder_litespi_rx_demux_sink_last;
		end
		1'd1: begin
		end
	endcase
end
always @(*) begin
	builder_litespi_rx_demux_endpoint0_source_payload_data = 32'd0;
	case (builder_litespi_rx_demux_sel)
		1'd0: begin
			builder_litespi_rx_demux_endpoint0_source_payload_data = builder_litespi_rx_demux_sink_payload_data;
		end
		1'd1: begin
		end
	endcase
end
always @(*) begin
	builder_litespi_rx_demux_endpoint1_source_valid = 1'd0;
	case (builder_litespi_rx_demux_sel)
		1'd0: begin
		end
		1'd1: begin
			builder_litespi_rx_demux_endpoint1_source_valid = builder_litespi_rx_demux_sink_valid;
		end
	endcase
end
assign main_litespimmap_spi_dummy_bits = main_litespimmap_storage;
assign main_litespimmap_done = (main_litespimmap_count == 1'd0);
always @(*) begin
	builder_litespi_next_state = 4'd0;
	builder_litespi_next_state = builder_litespi_state;
	case (builder_litespi_state)
		1'd1: begin
			if (main_litespimmap_source_ready) begin
				builder_litespi_next_state = 2'd2;
			end
		end
		2'd2: begin
			if (main_litespimmap_sink_valid) begin
				builder_litespi_next_state = 2'd3;
			end
		end
		2'd3: begin
			if (main_litespimmap_source_ready) begin
				builder_litespi_next_state = 3'd4;
			end
		end
		3'd4: begin
			if (main_litespimmap_sink_valid) begin
				if ((main_litespimmap_spi_dummy_bits == 1'd0)) begin
					builder_litespi_next_state = 3'd7;
				end else begin
					builder_litespi_next_state = 3'd5;
				end
			end
		end
		3'd5: begin
			if (main_litespimmap_source_ready) begin
				builder_litespi_next_state = 3'd6;
			end
		end
		3'd6: begin
			if (main_litespimmap_sink_valid) begin
				builder_litespi_next_state = 3'd7;
			end
		end
		3'd7: begin
			if (main_litespimmap_source_ready) begin
				builder_litespi_next_state = 4'd8;
			end
		end
		4'd8: begin
			if (main_litespimmap_sink_valid) begin
				builder_litespi_next_state = 1'd0;
			end
		end
		default: begin
			if (((main_litespimmap_bus_cyc & main_litespimmap_bus_stb) & (~main_litespimmap_bus_we))) begin
				if ((main_litespimmap_burst_cs & (main_litespimmap_bus_adr == main_litespimmap_burst_adr))) begin
					builder_litespi_next_state = 3'd7;
				end else begin
					builder_litespi_next_state = 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	main_litespimmap_source_payload_mask = 8'd0;
	case (builder_litespi_state)
		1'd1: begin
			main_litespimmap_source_payload_mask = 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
			main_litespimmap_source_payload_mask = 1'd1;
		end
		3'd4: begin
		end
		3'd5: begin
			main_litespimmap_source_payload_mask = 1'd1;
		end
		3'd6: begin
		end
		3'd7: begin
			main_litespimmap_source_payload_mask = 1'd0;
		end
		4'd8: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_litespimmap_burst_adr_litespi_next_value_ce1 = 1'd0;
	case (builder_litespi_state)
		1'd1: begin
			main_litespimmap_burst_adr_litespi_next_value_ce1 = 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
			main_litespimmap_burst_adr_litespi_next_value_ce1 = 1'd1;
		end
		3'd4: begin
		end
		3'd5: begin
			main_litespimmap_burst_adr_litespi_next_value_ce1 = 1'd1;
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
			if (main_litespimmap_sink_valid) begin
				main_litespimmap_burst_adr_litespi_next_value_ce1 = 1'd1;
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_litespimmap_cs = 1'd0;
	case (builder_litespi_state)
		1'd1: begin
			main_litespimmap_cs = 1'd1;
		end
		2'd2: begin
			main_litespimmap_cs = 1'd1;
		end
		2'd3: begin
			main_litespimmap_cs = 1'd1;
		end
		3'd4: begin
			main_litespimmap_cs = 1'd1;
		end
		3'd5: begin
			main_litespimmap_cs = 1'd1;
		end
		3'd6: begin
			main_litespimmap_cs = 1'd1;
		end
		3'd7: begin
			main_litespimmap_cs = 1'd1;
		end
		4'd8: begin
			main_litespimmap_cs = 1'd1;
		end
		default: begin
			main_litespimmap_cs = main_litespimmap_burst_cs;
			if (((main_litespimmap_bus_cyc & main_litespimmap_bus_stb) & (~main_litespimmap_bus_we))) begin
				if ((main_litespimmap_burst_cs & (main_litespimmap_bus_adr == main_litespimmap_burst_adr))) begin
				end else begin
					main_litespimmap_cs = 1'd0;
				end
			end
		end
	endcase
end
always @(*) begin
	main_litespimmap_sink_ready = 1'd0;
	case (builder_litespi_state)
		1'd1: begin
		end
		2'd2: begin
			main_litespimmap_sink_ready = 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
			main_litespimmap_sink_ready = 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
			main_litespimmap_sink_ready = 1'd1;
		end
		3'd7: begin
		end
		4'd8: begin
			main_litespimmap_sink_ready = 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_litespimmap_wait = 1'd0;
	case (builder_litespi_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		default: begin
			main_litespimmap_wait = 1'd1;
		end
	endcase
end
always @(*) begin
	main_litespimmap_bus_ack = 1'd0;
	case (builder_litespi_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
			if (main_litespimmap_sink_valid) begin
				main_litespimmap_bus_ack = 1'd1;
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_litespimmap_bus_dat_r = 32'd0;
	case (builder_litespi_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
			main_litespimmap_bus_dat_r = {main_litespimmap_sink_payload_data[7:0], main_litespimmap_sink_payload_data[15:8], main_litespimmap_sink_payload_data[23:16], main_litespimmap_sink_payload_data[31:24]};
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_litespimmap_source_valid = 1'd0;
	case (builder_litespi_state)
		1'd1: begin
			main_litespimmap_source_valid = 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
			main_litespimmap_source_valid = 1'd1;
		end
		3'd4: begin
		end
		3'd5: begin
			main_litespimmap_source_valid = 1'd1;
		end
		3'd6: begin
		end
		3'd7: begin
			main_litespimmap_source_valid = 1'd1;
		end
		4'd8: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_litespimmap_burst_cs_litespi_next_value0 = 1'd0;
	case (builder_litespi_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			main_litespimmap_burst_cs_litespi_next_value0 = 1'd1;
		end
		3'd4: begin
		end
		3'd5: begin
			main_litespimmap_burst_cs_litespi_next_value0 = 1'd1;
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		default: begin
			main_litespimmap_burst_cs_litespi_next_value0 = (main_litespimmap_burst_cs & (~main_litespimmap_done));
		end
	endcase
end
always @(*) begin
	main_litespimmap_burst_cs_litespi_next_value_ce0 = 1'd0;
	case (builder_litespi_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			main_litespimmap_burst_cs_litespi_next_value_ce0 = 1'd1;
		end
		3'd4: begin
		end
		3'd5: begin
			main_litespimmap_burst_cs_litespi_next_value_ce0 = 1'd1;
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		default: begin
			main_litespimmap_burst_cs_litespi_next_value_ce0 = 1'd1;
		end
	endcase
end
always @(*) begin
	main_litespimmap_source_last = 1'd0;
	case (builder_litespi_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
			main_litespimmap_source_last = 1'd1;
		end
		4'd8: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_litespimmap_source_payload_data = 32'd0;
	case (builder_litespi_state)
		1'd1: begin
			main_litespimmap_source_payload_data = 2'd3;
		end
		2'd2: begin
		end
		2'd3: begin
			main_litespimmap_source_payload_data = {main_litespimmap_bus_adr, main_litespimmap};
		end
		3'd4: begin
		end
		3'd5: begin
			main_litespimmap_source_payload_data = main_litespimmap_dummy;
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_litespimmap_source_payload_len = 6'd0;
	case (builder_litespi_state)
		1'd1: begin
			main_litespimmap_source_payload_len = 4'd8;
		end
		2'd2: begin
		end
		2'd3: begin
			main_litespimmap_source_payload_len = 5'd24;
		end
		3'd4: begin
		end
		3'd5: begin
			main_litespimmap_source_payload_len = main_litespimmap_spi_dummy_bits;
		end
		3'd6: begin
		end
		3'd7: begin
			main_litespimmap_source_payload_len = 6'd32;
		end
		4'd8: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_litespimmap_source_payload_width = 4'd0;
	case (builder_litespi_state)
		1'd1: begin
			main_litespimmap_source_payload_width = 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
			main_litespimmap_source_payload_width = 1'd1;
		end
		3'd4: begin
		end
		3'd5: begin
			main_litespimmap_source_payload_width = 1'd1;
		end
		3'd6: begin
		end
		3'd7: begin
			main_litespimmap_source_payload_width = 1'd1;
		end
		4'd8: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_litespimmap_burst_adr_litespi_next_value1 = 30'd0;
	case (builder_litespi_state)
		1'd1: begin
			main_litespimmap_burst_adr_litespi_next_value1 = main_litespimmap_bus_adr;
		end
		2'd2: begin
		end
		2'd3: begin
			main_litespimmap_burst_adr_litespi_next_value1 = main_litespimmap_bus_adr;
		end
		3'd4: begin
		end
		3'd5: begin
			main_litespimmap_burst_adr_litespi_next_value1 = main_litespimmap_bus_adr;
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
			if (main_litespimmap_sink_valid) begin
				main_litespimmap_burst_adr_litespi_next_value1 = (main_litespimmap_burst_adr + 1'd1);
			end
		end
		default: begin
		end
	endcase
end
assign main_master_rx_fifo_sink_valid = main_master_sink_sink_valid;
assign main_master_sink_sink_ready = main_master_rx_fifo_sink_ready;
assign main_master_rx_fifo_sink_first = main_master_sink_sink_first;
assign main_master_rx_fifo_sink_last = main_master_sink_sink_last;
assign main_master_rx_fifo_sink_payload_data = main_master_sink_sink_payload_data;
assign main_master_source_source_valid = main_master_tx_fifo_source_valid;
assign main_master_tx_fifo_source_ready = main_master_source_source_ready;
assign main_master_source_source_first = main_master_tx_fifo_source_first;
assign main_master_source_source_last = main_master_tx_fifo_source_last;
assign main_master_source_source_payload_data = main_master_tx_fifo_source_payload_data;
assign main_master_source_source_payload_len = main_master_tx_fifo_source_payload_len;
assign main_master_source_source_payload_width = main_master_tx_fifo_source_payload_width;
assign main_master_source_source_payload_mask = main_master_tx_fifo_source_payload_mask;
assign main_master_cs = main_master_cs_storage;
assign main_master_tx_fifo_sink_valid = main_master_rxtx_re;
assign main_master_tx_ready = main_master_tx_fifo_sink_ready;
assign main_master_tx_fifo_sink_payload_data = main_master_rxtx_r;
assign main_master_tx_fifo_sink_payload_len = main_master_len;
assign main_master_tx_fifo_sink_payload_width = main_master_width;
assign main_master_tx_fifo_sink_payload_mask = main_master_mask;
assign main_master_tx_fifo_sink_last = 1'd1;
assign main_master_rx_fifo_source_ready = main_master_rxtx_we;
assign main_master_rx_ready = main_master_rx_fifo_source_valid;
assign main_master_rxtx_w = main_master_rx_fifo_source_payload_data;
assign main_master_tx_fifo_sink_ready = ((~main_master_tx_fifo_source_valid) | main_master_tx_fifo_source_ready);
assign main_master_rx_fifo_sink_ready = ((~main_master_rx_fifo_source_valid) | main_master_rx_fifo_source_ready);
assign main_uartwishbonebridge0_wait = (~main_uartwishbonebridge0_is_ongoing);
assign main_uartwishbonebridge0_reset = main_uartwishbonebridge0_done;
assign main_uartwishbonebridge0_wishbone_adr = main_uartwishbonebridge0_address;
assign main_uartwishbonebridge0_wishbone_dat_w = main_uartwishbonebridge0_data;
assign main_uartwishbonebridge0_wishbone_sel = 4'd15;
always @(*) begin
	main_uartwishbonebridge0_tx_sink_payload_data = 8'd0;
	case (main_uartwishbonebridge0_bytes_count)
		1'd0: begin
			main_uartwishbonebridge0_tx_sink_payload_data = main_uartwishbonebridge0_data[31:24];
		end
		1'd1: begin
			main_uartwishbonebridge0_tx_sink_payload_data = main_uartwishbonebridge0_data[31:16];
		end
		2'd2: begin
			main_uartwishbonebridge0_tx_sink_payload_data = main_uartwishbonebridge0_data[31:8];
		end
		2'd3: begin
			main_uartwishbonebridge0_tx_sink_payload_data = main_uartwishbonebridge0_data[31:0];
		end
	endcase
end
assign main_uartwishbonebridge0_tx_sink_last = ((main_uartwishbonebridge0_bytes_count == 2'd3) & (main_uartwishbonebridge0_words_count == (main_uartwishbonebridge0_length - 1'd1)));
always @(*) begin
	builder_uartwishbonebridge0_rs232phytx0_next_state = 1'd0;
	builder_uartwishbonebridge0_rs232phytx0_next_state = builder_uartwishbonebridge0_rs232phytx0_state;
	case (builder_uartwishbonebridge0_rs232phytx0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_tx_tick) begin
				if ((main_uartwishbonebridge0_tx_count == 4'd9)) begin
					builder_uartwishbonebridge0_rs232phytx0_next_state = 1'd0;
				end
			end
		end
		default: begin
			if (main_uartwishbonebridge0_tx_sink_valid) begin
				builder_uartwishbonebridge0_rs232phytx0_next_state = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_tx_sink_ready = 1'd0;
	case (builder_uartwishbonebridge0_rs232phytx0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_tx_tick) begin
				if ((main_uartwishbonebridge0_tx_count == 4'd9)) begin
					main_uartwishbonebridge0_tx_sink_ready = 1'd1;
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_tx_count_uartwishbonebridge0_rs232phytx0_next_value0 = 4'd0;
	case (builder_uartwishbonebridge0_rs232phytx0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_tx_tick) begin
				main_uartwishbonebridge0_tx_count_uartwishbonebridge0_rs232phytx0_next_value0 = (main_uartwishbonebridge0_tx_count + 1'd1);
			end
		end
		default: begin
			main_uartwishbonebridge0_tx_count_uartwishbonebridge0_rs232phytx0_next_value0 = 1'd0;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_tx_count_uartwishbonebridge0_rs232phytx0_next_value_ce0 = 1'd0;
	case (builder_uartwishbonebridge0_rs232phytx0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_tx_tick) begin
				main_uartwishbonebridge0_tx_count_uartwishbonebridge0_rs232phytx0_next_value_ce0 = 1'd1;
			end
		end
		default: begin
			main_uartwishbonebridge0_tx_count_uartwishbonebridge0_rs232phytx0_next_value_ce0 = 1'd1;
		end
	endcase
end
always @(*) begin
	main_platform_obj_serial_dbg_tx_uartwishbonebridge0_rs232phytx0_next_value1 = 1'd0;
	case (builder_uartwishbonebridge0_rs232phytx0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_tx_tick) begin
				main_platform_obj_serial_dbg_tx_uartwishbonebridge0_rs232phytx0_next_value1 = main_uartwishbonebridge0_tx_data;
			end
		end
		default: begin
			main_platform_obj_serial_dbg_tx_uartwishbonebridge0_rs232phytx0_next_value1 = 1'd1;
			if (main_uartwishbonebridge0_tx_sink_valid) begin
				main_platform_obj_serial_dbg_tx_uartwishbonebridge0_rs232phytx0_next_value1 = 1'd0;
			end
		end
	endcase
end
always @(*) begin
	main_platform_obj_serial_dbg_tx_uartwishbonebridge0_rs232phytx0_next_value_ce1 = 1'd0;
	case (builder_uartwishbonebridge0_rs232phytx0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_tx_tick) begin
				main_platform_obj_serial_dbg_tx_uartwishbonebridge0_rs232phytx0_next_value_ce1 = 1'd1;
			end
		end
		default: begin
			main_platform_obj_serial_dbg_tx_uartwishbonebridge0_rs232phytx0_next_value_ce1 = 1'd1;
			if (main_uartwishbonebridge0_tx_sink_valid) begin
				main_platform_obj_serial_dbg_tx_uartwishbonebridge0_rs232phytx0_next_value_ce1 = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_tx_enable = 1'd0;
	case (builder_uartwishbonebridge0_rs232phytx0_state)
		1'd1: begin
			main_uartwishbonebridge0_tx_enable = 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_tx_data_uartwishbonebridge0_rs232phytx0_next_value2 = 8'd0;
	case (builder_uartwishbonebridge0_rs232phytx0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_tx_tick) begin
				main_uartwishbonebridge0_tx_data_uartwishbonebridge0_rs232phytx0_next_value2 = {1'd1, main_uartwishbonebridge0_tx_data[7:1]};
			end
		end
		default: begin
			if (main_uartwishbonebridge0_tx_sink_valid) begin
				main_uartwishbonebridge0_tx_data_uartwishbonebridge0_rs232phytx0_next_value2 = main_uartwishbonebridge0_tx_sink_payload_data;
			end
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_tx_data_uartwishbonebridge0_rs232phytx0_next_value_ce2 = 1'd0;
	case (builder_uartwishbonebridge0_rs232phytx0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_tx_tick) begin
				main_uartwishbonebridge0_tx_data_uartwishbonebridge0_rs232phytx0_next_value_ce2 = 1'd1;
			end
		end
		default: begin
			if (main_uartwishbonebridge0_tx_sink_valid) begin
				main_uartwishbonebridge0_tx_data_uartwishbonebridge0_rs232phytx0_next_value_ce2 = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	builder_uartwishbonebridge0_rs232phyrx0_next_state = 1'd0;
	builder_uartwishbonebridge0_rs232phyrx0_next_state = builder_uartwishbonebridge0_rs232phyrx0_state;
	case (builder_uartwishbonebridge0_rs232phyrx0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_rx_tick) begin
				if ((main_uartwishbonebridge0_rx_count == 4'd9)) begin
					builder_uartwishbonebridge0_rs232phyrx0_next_state = 1'd0;
				end
			end
		end
		default: begin
			if (((main_uartwishbonebridge0_rx_rx == 1'd0) & (main_uartwishbonebridge0_rx_rx_d == 1'd1))) begin
				builder_uartwishbonebridge0_rs232phyrx0_next_state = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_rx_source_valid = 1'd0;
	case (builder_uartwishbonebridge0_rs232phyrx0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_rx_tick) begin
				if ((main_uartwishbonebridge0_rx_count == 4'd9)) begin
					main_uartwishbonebridge0_rx_source_valid = (main_uartwishbonebridge0_rx_rx == 1'd1);
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_rx_count_uartwishbonebridge0_rs232phyrx0_next_value0 = 4'd0;
	case (builder_uartwishbonebridge0_rs232phyrx0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_rx_tick) begin
				main_uartwishbonebridge0_rx_count_uartwishbonebridge0_rs232phyrx0_next_value0 = (main_uartwishbonebridge0_rx_count + 1'd1);
			end
		end
		default: begin
			main_uartwishbonebridge0_rx_count_uartwishbonebridge0_rs232phyrx0_next_value0 = 1'd0;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_rx_count_uartwishbonebridge0_rs232phyrx0_next_value_ce0 = 1'd0;
	case (builder_uartwishbonebridge0_rs232phyrx0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_rx_tick) begin
				main_uartwishbonebridge0_rx_count_uartwishbonebridge0_rs232phyrx0_next_value_ce0 = 1'd1;
			end
		end
		default: begin
			main_uartwishbonebridge0_rx_count_uartwishbonebridge0_rs232phyrx0_next_value_ce0 = 1'd1;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_rx_source_payload_data = 8'd0;
	case (builder_uartwishbonebridge0_rs232phyrx0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_rx_tick) begin
				if ((main_uartwishbonebridge0_rx_count == 4'd9)) begin
					main_uartwishbonebridge0_rx_source_payload_data = main_uartwishbonebridge0_rx_data;
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_rx_enable = 1'd0;
	case (builder_uartwishbonebridge0_rs232phyrx0_state)
		1'd1: begin
			main_uartwishbonebridge0_rx_enable = 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_rx_data_uartwishbonebridge0_rs232phyrx0_next_value1 = 8'd0;
	case (builder_uartwishbonebridge0_rs232phyrx0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_rx_tick) begin
				main_uartwishbonebridge0_rx_data_uartwishbonebridge0_rs232phyrx0_next_value1 = {main_uartwishbonebridge0_rx_rx, main_uartwishbonebridge0_rx_data[7:1]};
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_rx_data_uartwishbonebridge0_rs232phyrx0_next_value_ce1 = 1'd0;
	case (builder_uartwishbonebridge0_rs232phyrx0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_rx_tick) begin
				main_uartwishbonebridge0_rx_data_uartwishbonebridge0_rs232phyrx0_next_value_ce1 = 1'd1;
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_uartwishbonebridge0_next_state = 3'd0;
	builder_uartwishbonebridge0_next_state = builder_uartwishbonebridge0_state;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				builder_uartwishbonebridge0_next_state = 2'd2;
			end
		end
		2'd2: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				if ((main_uartwishbonebridge0_bytes_count == 2'd3)) begin
					if (((main_uartwishbonebridge0_cmd == 1'd1) | (main_uartwishbonebridge0_cmd == 2'd3))) begin
						builder_uartwishbonebridge0_next_state = 2'd3;
					end else begin
						if (((main_uartwishbonebridge0_cmd == 2'd2) | (main_uartwishbonebridge0_cmd == 3'd4))) begin
							builder_uartwishbonebridge0_next_state = 3'd5;
						end else begin
							builder_uartwishbonebridge0_next_state = 1'd0;
						end
					end
				end
			end
		end
		2'd3: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				if ((main_uartwishbonebridge0_bytes_count == 2'd3)) begin
					builder_uartwishbonebridge0_next_state = 3'd4;
				end
			end
		end
		3'd4: begin
			if (main_uartwishbonebridge0_wishbone_ack) begin
				if ((main_uartwishbonebridge0_words_count == (main_uartwishbonebridge0_length - 1'd1))) begin
					builder_uartwishbonebridge0_next_state = 1'd0;
				end else begin
					builder_uartwishbonebridge0_next_state = 2'd3;
				end
			end
		end
		3'd5: begin
			if (main_uartwishbonebridge0_wishbone_ack) begin
				builder_uartwishbonebridge0_next_state = 3'd6;
			end
		end
		3'd6: begin
			if (main_uartwishbonebridge0_tx_sink_ready) begin
				if ((main_uartwishbonebridge0_bytes_count == 2'd3)) begin
					if ((main_uartwishbonebridge0_words_count == (main_uartwishbonebridge0_length - 1'd1))) begin
						builder_uartwishbonebridge0_next_state = 1'd0;
					end else begin
						builder_uartwishbonebridge0_next_state = 3'd5;
					end
				end
			end
		end
		default: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				builder_uartwishbonebridge0_next_state = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_wishbone_we = 1'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			main_uartwishbonebridge0_wishbone_we = 1'd1;
		end
		3'd5: begin
			main_uartwishbonebridge0_wishbone_we = 1'd0;
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_tx_sink_valid = 1'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
			main_uartwishbonebridge0_tx_sink_valid = 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_is_ongoing = 1'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			main_uartwishbonebridge0_is_ongoing = 1'd1;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_bytes_count_uartwishbonebridge0_next_value0 = 2'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				main_uartwishbonebridge0_bytes_count_uartwishbonebridge0_next_value0 = (main_uartwishbonebridge0_bytes_count + 1'd1);
			end
		end
		2'd3: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				main_uartwishbonebridge0_bytes_count_uartwishbonebridge0_next_value0 = (main_uartwishbonebridge0_bytes_count + 1'd1);
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
			if (main_uartwishbonebridge0_tx_sink_ready) begin
				main_uartwishbonebridge0_bytes_count_uartwishbonebridge0_next_value0 = (main_uartwishbonebridge0_bytes_count + 1'd1);
			end
		end
		default: begin
			main_uartwishbonebridge0_bytes_count_uartwishbonebridge0_next_value0 = 1'd0;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_rx_source_ready = 1'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
			main_uartwishbonebridge0_rx_source_ready = 1'd1;
		end
		2'd2: begin
			main_uartwishbonebridge0_rx_source_ready = 1'd1;
		end
		2'd3: begin
			main_uartwishbonebridge0_rx_source_ready = 1'd1;
		end
		3'd4: begin
			main_uartwishbonebridge0_rx_source_ready = 1'd0;
		end
		3'd5: begin
			main_uartwishbonebridge0_rx_source_ready = 1'd0;
		end
		3'd6: begin
			main_uartwishbonebridge0_rx_source_ready = 1'd0;
		end
		default: begin
			main_uartwishbonebridge0_rx_source_ready = 1'd1;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_bytes_count_uartwishbonebridge0_next_value_ce0 = 1'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				main_uartwishbonebridge0_bytes_count_uartwishbonebridge0_next_value_ce0 = 1'd1;
			end
		end
		2'd3: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				main_uartwishbonebridge0_bytes_count_uartwishbonebridge0_next_value_ce0 = 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
			if (main_uartwishbonebridge0_tx_sink_ready) begin
				main_uartwishbonebridge0_bytes_count_uartwishbonebridge0_next_value_ce0 = 1'd1;
			end
		end
		default: begin
			main_uartwishbonebridge0_bytes_count_uartwishbonebridge0_next_value_ce0 = 1'd1;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_words_count_uartwishbonebridge0_next_value1 = 8'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (main_uartwishbonebridge0_wishbone_ack) begin
				main_uartwishbonebridge0_words_count_uartwishbonebridge0_next_value1 = (main_uartwishbonebridge0_words_count + 1'd1);
			end
		end
		3'd5: begin
		end
		3'd6: begin
			if (main_uartwishbonebridge0_tx_sink_ready) begin
				if ((main_uartwishbonebridge0_bytes_count == 2'd3)) begin
					main_uartwishbonebridge0_words_count_uartwishbonebridge0_next_value1 = (main_uartwishbonebridge0_words_count + 1'd1);
				end
			end
		end
		default: begin
			main_uartwishbonebridge0_words_count_uartwishbonebridge0_next_value1 = 1'd0;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_words_count_uartwishbonebridge0_next_value_ce1 = 1'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (main_uartwishbonebridge0_wishbone_ack) begin
				main_uartwishbonebridge0_words_count_uartwishbonebridge0_next_value_ce1 = 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
			if (main_uartwishbonebridge0_tx_sink_ready) begin
				if ((main_uartwishbonebridge0_bytes_count == 2'd3)) begin
					main_uartwishbonebridge0_words_count_uartwishbonebridge0_next_value_ce1 = 1'd1;
				end
			end
		end
		default: begin
			main_uartwishbonebridge0_words_count_uartwishbonebridge0_next_value_ce1 = 1'd1;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_cmd_uartwishbonebridge0_next_value2 = 8'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				main_uartwishbonebridge0_cmd_uartwishbonebridge0_next_value2 = main_uartwishbonebridge0_rx_source_payload_data;
			end
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_cmd_uartwishbonebridge0_next_value_ce2 = 1'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				main_uartwishbonebridge0_cmd_uartwishbonebridge0_next_value_ce2 = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_length_uartwishbonebridge0_next_value3 = 8'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				main_uartwishbonebridge0_length_uartwishbonebridge0_next_value3 = main_uartwishbonebridge0_rx_source_payload_data;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_length_uartwishbonebridge0_next_value_ce3 = 1'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				main_uartwishbonebridge0_length_uartwishbonebridge0_next_value_ce3 = 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_address_uartwishbonebridge0_next_value4 = 32'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				main_uartwishbonebridge0_address_uartwishbonebridge0_next_value4 = {main_uartwishbonebridge0_address, main_uartwishbonebridge0_rx_source_payload_data};
			end
		end
		2'd3: begin
		end
		3'd4: begin
			if (main_uartwishbonebridge0_wishbone_ack) begin
				main_uartwishbonebridge0_address_uartwishbonebridge0_next_value4 = (main_uartwishbonebridge0_address + main_uartwishbonebridge0_incr);
			end
		end
		3'd5: begin
		end
		3'd6: begin
			if (main_uartwishbonebridge0_tx_sink_ready) begin
				if ((main_uartwishbonebridge0_bytes_count == 2'd3)) begin
					main_uartwishbonebridge0_address_uartwishbonebridge0_next_value4 = (main_uartwishbonebridge0_address + main_uartwishbonebridge0_incr);
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_address_uartwishbonebridge0_next_value_ce4 = 1'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				main_uartwishbonebridge0_address_uartwishbonebridge0_next_value_ce4 = 1'd1;
			end
		end
		2'd3: begin
		end
		3'd4: begin
			if (main_uartwishbonebridge0_wishbone_ack) begin
				main_uartwishbonebridge0_address_uartwishbonebridge0_next_value_ce4 = 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
			if (main_uartwishbonebridge0_tx_sink_ready) begin
				if ((main_uartwishbonebridge0_bytes_count == 2'd3)) begin
					main_uartwishbonebridge0_address_uartwishbonebridge0_next_value_ce4 = 1'd1;
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_incr_uartwishbonebridge0_next_value5 = 1'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				if ((main_uartwishbonebridge0_bytes_count == 2'd3)) begin
					if (((main_uartwishbonebridge0_cmd == 1'd1) | (main_uartwishbonebridge0_cmd == 2'd3))) begin
						main_uartwishbonebridge0_incr_uartwishbonebridge0_next_value5 = (main_uartwishbonebridge0_cmd == 1'd1);
					end else begin
						if (((main_uartwishbonebridge0_cmd == 2'd2) | (main_uartwishbonebridge0_cmd == 3'd4))) begin
							main_uartwishbonebridge0_incr_uartwishbonebridge0_next_value5 = (main_uartwishbonebridge0_cmd == 2'd2);
						end else begin
						end
					end
				end
			end
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_incr_uartwishbonebridge0_next_value_ce5 = 1'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				if ((main_uartwishbonebridge0_bytes_count == 2'd3)) begin
					if (((main_uartwishbonebridge0_cmd == 1'd1) | (main_uartwishbonebridge0_cmd == 2'd3))) begin
						main_uartwishbonebridge0_incr_uartwishbonebridge0_next_value_ce5 = 1'd1;
					end else begin
						if (((main_uartwishbonebridge0_cmd == 2'd2) | (main_uartwishbonebridge0_cmd == 3'd4))) begin
							main_uartwishbonebridge0_incr_uartwishbonebridge0_next_value_ce5 = 1'd1;
						end else begin
						end
					end
				end
			end
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_data_uartwishbonebridge0_next_value6 = 32'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				main_uartwishbonebridge0_data_uartwishbonebridge0_next_value6 = {main_uartwishbonebridge0_data, main_uartwishbonebridge0_rx_source_payload_data};
			end
		end
		3'd4: begin
		end
		3'd5: begin
			if (main_uartwishbonebridge0_wishbone_ack) begin
				main_uartwishbonebridge0_data_uartwishbonebridge0_next_value6 = main_uartwishbonebridge0_wishbone_dat_r;
			end
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_data_uartwishbonebridge0_next_value_ce6 = 1'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_uartwishbonebridge0_rx_source_valid) begin
				main_uartwishbonebridge0_data_uartwishbonebridge0_next_value_ce6 = 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
			if (main_uartwishbonebridge0_wishbone_ack) begin
				main_uartwishbonebridge0_data_uartwishbonebridge0_next_value_ce6 = 1'd1;
			end
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_wishbone_cyc = 1'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			main_uartwishbonebridge0_wishbone_cyc = 1'd1;
		end
		3'd5: begin
			main_uartwishbonebridge0_wishbone_cyc = 1'd1;
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge0_wishbone_stb = 1'd0;
	case (builder_uartwishbonebridge0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			main_uartwishbonebridge0_wishbone_stb = 1'd1;
		end
		3'd5: begin
			main_uartwishbonebridge0_wishbone_stb = 1'd1;
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
assign main_uartwishbonebridge0_done = (main_uartwishbonebridge0_count == 1'd0);
assign main_uartwishbonebridge1_wait = (~main_uartwishbonebridge1_is_ongoing);
assign main_uartwishbonebridge1_reset = main_uartwishbonebridge1_done;
assign main_uartwishbonebridge1_wishbone_adr = main_uartwishbonebridge1_address;
assign main_uartwishbonebridge1_wishbone_dat_w = main_uartwishbonebridge1_data;
assign main_uartwishbonebridge1_wishbone_sel = 4'd15;
always @(*) begin
	main_uartwishbonebridge1_tx_sink_payload_data = 8'd0;
	case (main_uartwishbonebridge1_bytes_count)
		1'd0: begin
			main_uartwishbonebridge1_tx_sink_payload_data = main_uartwishbonebridge1_data[31:24];
		end
		1'd1: begin
			main_uartwishbonebridge1_tx_sink_payload_data = main_uartwishbonebridge1_data[31:16];
		end
		2'd2: begin
			main_uartwishbonebridge1_tx_sink_payload_data = main_uartwishbonebridge1_data[31:8];
		end
		2'd3: begin
			main_uartwishbonebridge1_tx_sink_payload_data = main_uartwishbonebridge1_data[31:0];
		end
	endcase
end
assign main_uartwishbonebridge1_tx_sink_last = ((main_uartwishbonebridge1_bytes_count == 2'd3) & (main_uartwishbonebridge1_words_count == (main_uartwishbonebridge1_length - 1'd1)));
always @(*) begin
	builder_uartwishbonebridge1_rs232phytx1_next_state = 1'd0;
	builder_uartwishbonebridge1_rs232phytx1_next_state = builder_uartwishbonebridge1_rs232phytx1_state;
	case (builder_uartwishbonebridge1_rs232phytx1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_tx_tick) begin
				if ((main_uartwishbonebridge1_tx_count == 4'd9)) begin
					builder_uartwishbonebridge1_rs232phytx1_next_state = 1'd0;
				end
			end
		end
		default: begin
			if (main_uartwishbonebridge1_tx_sink_valid) begin
				builder_uartwishbonebridge1_rs232phytx1_next_state = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_platform_obj_ser_tx_uartwishbonebridge1_rs232phytx1_next_value1 = 1'd0;
	case (builder_uartwishbonebridge1_rs232phytx1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_tx_tick) begin
				main_platform_obj_ser_tx_uartwishbonebridge1_rs232phytx1_next_value1 = main_uartwishbonebridge1_tx_data;
			end
		end
		default: begin
			main_platform_obj_ser_tx_uartwishbonebridge1_rs232phytx1_next_value1 = 1'd1;
			if (main_uartwishbonebridge1_tx_sink_valid) begin
				main_platform_obj_ser_tx_uartwishbonebridge1_rs232phytx1_next_value1 = 1'd0;
			end
		end
	endcase
end
always @(*) begin
	main_platform_obj_ser_tx_uartwishbonebridge1_rs232phytx1_next_value_ce1 = 1'd0;
	case (builder_uartwishbonebridge1_rs232phytx1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_tx_tick) begin
				main_platform_obj_ser_tx_uartwishbonebridge1_rs232phytx1_next_value_ce1 = 1'd1;
			end
		end
		default: begin
			main_platform_obj_ser_tx_uartwishbonebridge1_rs232phytx1_next_value_ce1 = 1'd1;
			if (main_uartwishbonebridge1_tx_sink_valid) begin
				main_platform_obj_ser_tx_uartwishbonebridge1_rs232phytx1_next_value_ce1 = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_tx_sink_ready = 1'd0;
	case (builder_uartwishbonebridge1_rs232phytx1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_tx_tick) begin
				if ((main_uartwishbonebridge1_tx_count == 4'd9)) begin
					main_uartwishbonebridge1_tx_sink_ready = 1'd1;
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_tx_data_uartwishbonebridge1_rs232phytx1_next_value2 = 8'd0;
	case (builder_uartwishbonebridge1_rs232phytx1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_tx_tick) begin
				main_uartwishbonebridge1_tx_data_uartwishbonebridge1_rs232phytx1_next_value2 = {1'd1, main_uartwishbonebridge1_tx_data[7:1]};
			end
		end
		default: begin
			if (main_uartwishbonebridge1_tx_sink_valid) begin
				main_uartwishbonebridge1_tx_data_uartwishbonebridge1_rs232phytx1_next_value2 = main_uartwishbonebridge1_tx_sink_payload_data;
			end
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_tx_data_uartwishbonebridge1_rs232phytx1_next_value_ce2 = 1'd0;
	case (builder_uartwishbonebridge1_rs232phytx1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_tx_tick) begin
				main_uartwishbonebridge1_tx_data_uartwishbonebridge1_rs232phytx1_next_value_ce2 = 1'd1;
			end
		end
		default: begin
			if (main_uartwishbonebridge1_tx_sink_valid) begin
				main_uartwishbonebridge1_tx_data_uartwishbonebridge1_rs232phytx1_next_value_ce2 = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_tx_enable = 1'd0;
	case (builder_uartwishbonebridge1_rs232phytx1_state)
		1'd1: begin
			main_uartwishbonebridge1_tx_enable = 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_tx_count_uartwishbonebridge1_rs232phytx1_next_value0 = 4'd0;
	case (builder_uartwishbonebridge1_rs232phytx1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_tx_tick) begin
				main_uartwishbonebridge1_tx_count_uartwishbonebridge1_rs232phytx1_next_value0 = (main_uartwishbonebridge1_tx_count + 1'd1);
			end
		end
		default: begin
			main_uartwishbonebridge1_tx_count_uartwishbonebridge1_rs232phytx1_next_value0 = 1'd0;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_tx_count_uartwishbonebridge1_rs232phytx1_next_value_ce0 = 1'd0;
	case (builder_uartwishbonebridge1_rs232phytx1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_tx_tick) begin
				main_uartwishbonebridge1_tx_count_uartwishbonebridge1_rs232phytx1_next_value_ce0 = 1'd1;
			end
		end
		default: begin
			main_uartwishbonebridge1_tx_count_uartwishbonebridge1_rs232phytx1_next_value_ce0 = 1'd1;
		end
	endcase
end
always @(*) begin
	builder_uartwishbonebridge1_rs232phyrx1_next_state = 1'd0;
	builder_uartwishbonebridge1_rs232phyrx1_next_state = builder_uartwishbonebridge1_rs232phyrx1_state;
	case (builder_uartwishbonebridge1_rs232phyrx1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_rx_tick) begin
				if ((main_uartwishbonebridge1_rx_count == 4'd9)) begin
					builder_uartwishbonebridge1_rs232phyrx1_next_state = 1'd0;
				end
			end
		end
		default: begin
			if (((main_uartwishbonebridge1_rx_rx == 1'd0) & (main_uartwishbonebridge1_rx_rx_d == 1'd1))) begin
				builder_uartwishbonebridge1_rs232phyrx1_next_state = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_rx_count_uartwishbonebridge1_rs232phyrx1_next_value_ce0 = 1'd0;
	case (builder_uartwishbonebridge1_rs232phyrx1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_rx_tick) begin
				main_uartwishbonebridge1_rx_count_uartwishbonebridge1_rs232phyrx1_next_value_ce0 = 1'd1;
			end
		end
		default: begin
			main_uartwishbonebridge1_rx_count_uartwishbonebridge1_rs232phyrx1_next_value_ce0 = 1'd1;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_rx_source_valid = 1'd0;
	case (builder_uartwishbonebridge1_rs232phyrx1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_rx_tick) begin
				if ((main_uartwishbonebridge1_rx_count == 4'd9)) begin
					main_uartwishbonebridge1_rx_source_valid = (main_uartwishbonebridge1_rx_rx == 1'd1);
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_rx_data_uartwishbonebridge1_rs232phyrx1_next_value1 = 8'd0;
	case (builder_uartwishbonebridge1_rs232phyrx1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_rx_tick) begin
				main_uartwishbonebridge1_rx_data_uartwishbonebridge1_rs232phyrx1_next_value1 = {main_uartwishbonebridge1_rx_rx, main_uartwishbonebridge1_rx_data[7:1]};
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_rx_data_uartwishbonebridge1_rs232phyrx1_next_value_ce1 = 1'd0;
	case (builder_uartwishbonebridge1_rs232phyrx1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_rx_tick) begin
				main_uartwishbonebridge1_rx_data_uartwishbonebridge1_rs232phyrx1_next_value_ce1 = 1'd1;
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_rx_source_payload_data = 8'd0;
	case (builder_uartwishbonebridge1_rs232phyrx1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_rx_tick) begin
				if ((main_uartwishbonebridge1_rx_count == 4'd9)) begin
					main_uartwishbonebridge1_rx_source_payload_data = main_uartwishbonebridge1_rx_data;
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_rx_enable = 1'd0;
	case (builder_uartwishbonebridge1_rs232phyrx1_state)
		1'd1: begin
			main_uartwishbonebridge1_rx_enable = 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_rx_count_uartwishbonebridge1_rs232phyrx1_next_value0 = 4'd0;
	case (builder_uartwishbonebridge1_rs232phyrx1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_rx_tick) begin
				main_uartwishbonebridge1_rx_count_uartwishbonebridge1_rs232phyrx1_next_value0 = (main_uartwishbonebridge1_rx_count + 1'd1);
			end
		end
		default: begin
			main_uartwishbonebridge1_rx_count_uartwishbonebridge1_rs232phyrx1_next_value0 = 1'd0;
		end
	endcase
end
always @(*) begin
	builder_uartwishbonebridge1_next_state = 3'd0;
	builder_uartwishbonebridge1_next_state = builder_uartwishbonebridge1_state;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				builder_uartwishbonebridge1_next_state = 2'd2;
			end
		end
		2'd2: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				if ((main_uartwishbonebridge1_bytes_count == 2'd3)) begin
					if (((main_uartwishbonebridge1_cmd == 1'd1) | (main_uartwishbonebridge1_cmd == 2'd3))) begin
						builder_uartwishbonebridge1_next_state = 2'd3;
					end else begin
						if (((main_uartwishbonebridge1_cmd == 2'd2) | (main_uartwishbonebridge1_cmd == 3'd4))) begin
							builder_uartwishbonebridge1_next_state = 3'd5;
						end else begin
							builder_uartwishbonebridge1_next_state = 1'd0;
						end
					end
				end
			end
		end
		2'd3: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				if ((main_uartwishbonebridge1_bytes_count == 2'd3)) begin
					builder_uartwishbonebridge1_next_state = 3'd4;
				end
			end
		end
		3'd4: begin
			if (main_uartwishbonebridge1_wishbone_ack) begin
				if ((main_uartwishbonebridge1_words_count == (main_uartwishbonebridge1_length - 1'd1))) begin
					builder_uartwishbonebridge1_next_state = 1'd0;
				end else begin
					builder_uartwishbonebridge1_next_state = 2'd3;
				end
			end
		end
		3'd5: begin
			if (main_uartwishbonebridge1_wishbone_ack) begin
				builder_uartwishbonebridge1_next_state = 3'd6;
			end
		end
		3'd6: begin
			if (main_uartwishbonebridge1_tx_sink_ready) begin
				if ((main_uartwishbonebridge1_bytes_count == 2'd3)) begin
					if ((main_uartwishbonebridge1_words_count == (main_uartwishbonebridge1_length - 1'd1))) begin
						builder_uartwishbonebridge1_next_state = 1'd0;
					end else begin
						builder_uartwishbonebridge1_next_state = 3'd5;
					end
				end
			end
		end
		default: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				builder_uartwishbonebridge1_next_state = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_data_uartwishbonebridge1_next_value6 = 32'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				main_uartwishbonebridge1_data_uartwishbonebridge1_next_value6 = {main_uartwishbonebridge1_data, main_uartwishbonebridge1_rx_source_payload_data};
			end
		end
		3'd4: begin
		end
		3'd5: begin
			if (main_uartwishbonebridge1_wishbone_ack) begin
				main_uartwishbonebridge1_data_uartwishbonebridge1_next_value6 = main_uartwishbonebridge1_wishbone_dat_r;
			end
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_rx_source_ready = 1'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
			main_uartwishbonebridge1_rx_source_ready = 1'd1;
		end
		2'd2: begin
			main_uartwishbonebridge1_rx_source_ready = 1'd1;
		end
		2'd3: begin
			main_uartwishbonebridge1_rx_source_ready = 1'd1;
		end
		3'd4: begin
			main_uartwishbonebridge1_rx_source_ready = 1'd0;
		end
		3'd5: begin
			main_uartwishbonebridge1_rx_source_ready = 1'd0;
		end
		3'd6: begin
			main_uartwishbonebridge1_rx_source_ready = 1'd0;
		end
		default: begin
			main_uartwishbonebridge1_rx_source_ready = 1'd1;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_data_uartwishbonebridge1_next_value_ce6 = 1'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				main_uartwishbonebridge1_data_uartwishbonebridge1_next_value_ce6 = 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
			if (main_uartwishbonebridge1_wishbone_ack) begin
				main_uartwishbonebridge1_data_uartwishbonebridge1_next_value_ce6 = 1'd1;
			end
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_wishbone_cyc = 1'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			main_uartwishbonebridge1_wishbone_cyc = 1'd1;
		end
		3'd5: begin
			main_uartwishbonebridge1_wishbone_cyc = 1'd1;
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_wishbone_stb = 1'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			main_uartwishbonebridge1_wishbone_stb = 1'd1;
		end
		3'd5: begin
			main_uartwishbonebridge1_wishbone_stb = 1'd1;
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_wishbone_we = 1'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			main_uartwishbonebridge1_wishbone_we = 1'd1;
		end
		3'd5: begin
			main_uartwishbonebridge1_wishbone_we = 1'd0;
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_bytes_count_uartwishbonebridge1_next_value0 = 2'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				main_uartwishbonebridge1_bytes_count_uartwishbonebridge1_next_value0 = (main_uartwishbonebridge1_bytes_count + 1'd1);
			end
		end
		2'd3: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				main_uartwishbonebridge1_bytes_count_uartwishbonebridge1_next_value0 = (main_uartwishbonebridge1_bytes_count + 1'd1);
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
			if (main_uartwishbonebridge1_tx_sink_ready) begin
				main_uartwishbonebridge1_bytes_count_uartwishbonebridge1_next_value0 = (main_uartwishbonebridge1_bytes_count + 1'd1);
			end
		end
		default: begin
			main_uartwishbonebridge1_bytes_count_uartwishbonebridge1_next_value0 = 1'd0;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_bytes_count_uartwishbonebridge1_next_value_ce0 = 1'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				main_uartwishbonebridge1_bytes_count_uartwishbonebridge1_next_value_ce0 = 1'd1;
			end
		end
		2'd3: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				main_uartwishbonebridge1_bytes_count_uartwishbonebridge1_next_value_ce0 = 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
			if (main_uartwishbonebridge1_tx_sink_ready) begin
				main_uartwishbonebridge1_bytes_count_uartwishbonebridge1_next_value_ce0 = 1'd1;
			end
		end
		default: begin
			main_uartwishbonebridge1_bytes_count_uartwishbonebridge1_next_value_ce0 = 1'd1;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_words_count_uartwishbonebridge1_next_value1 = 8'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (main_uartwishbonebridge1_wishbone_ack) begin
				main_uartwishbonebridge1_words_count_uartwishbonebridge1_next_value1 = (main_uartwishbonebridge1_words_count + 1'd1);
			end
		end
		3'd5: begin
		end
		3'd6: begin
			if (main_uartwishbonebridge1_tx_sink_ready) begin
				if ((main_uartwishbonebridge1_bytes_count == 2'd3)) begin
					main_uartwishbonebridge1_words_count_uartwishbonebridge1_next_value1 = (main_uartwishbonebridge1_words_count + 1'd1);
				end
			end
		end
		default: begin
			main_uartwishbonebridge1_words_count_uartwishbonebridge1_next_value1 = 1'd0;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_words_count_uartwishbonebridge1_next_value_ce1 = 1'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (main_uartwishbonebridge1_wishbone_ack) begin
				main_uartwishbonebridge1_words_count_uartwishbonebridge1_next_value_ce1 = 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
			if (main_uartwishbonebridge1_tx_sink_ready) begin
				if ((main_uartwishbonebridge1_bytes_count == 2'd3)) begin
					main_uartwishbonebridge1_words_count_uartwishbonebridge1_next_value_ce1 = 1'd1;
				end
			end
		end
		default: begin
			main_uartwishbonebridge1_words_count_uartwishbonebridge1_next_value_ce1 = 1'd1;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_tx_sink_valid = 1'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
			main_uartwishbonebridge1_tx_sink_valid = 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_cmd_uartwishbonebridge1_next_value2 = 8'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				main_uartwishbonebridge1_cmd_uartwishbonebridge1_next_value2 = main_uartwishbonebridge1_rx_source_payload_data;
			end
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_cmd_uartwishbonebridge1_next_value_ce2 = 1'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				main_uartwishbonebridge1_cmd_uartwishbonebridge1_next_value_ce2 = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_is_ongoing = 1'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			main_uartwishbonebridge1_is_ongoing = 1'd1;
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_length_uartwishbonebridge1_next_value3 = 8'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				main_uartwishbonebridge1_length_uartwishbonebridge1_next_value3 = main_uartwishbonebridge1_rx_source_payload_data;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_length_uartwishbonebridge1_next_value_ce3 = 1'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				main_uartwishbonebridge1_length_uartwishbonebridge1_next_value_ce3 = 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_address_uartwishbonebridge1_next_value4 = 32'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				main_uartwishbonebridge1_address_uartwishbonebridge1_next_value4 = {main_uartwishbonebridge1_address, main_uartwishbonebridge1_rx_source_payload_data};
			end
		end
		2'd3: begin
		end
		3'd4: begin
			if (main_uartwishbonebridge1_wishbone_ack) begin
				main_uartwishbonebridge1_address_uartwishbonebridge1_next_value4 = (main_uartwishbonebridge1_address + main_uartwishbonebridge1_incr);
			end
		end
		3'd5: begin
		end
		3'd6: begin
			if (main_uartwishbonebridge1_tx_sink_ready) begin
				if ((main_uartwishbonebridge1_bytes_count == 2'd3)) begin
					main_uartwishbonebridge1_address_uartwishbonebridge1_next_value4 = (main_uartwishbonebridge1_address + main_uartwishbonebridge1_incr);
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_address_uartwishbonebridge1_next_value_ce4 = 1'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				main_uartwishbonebridge1_address_uartwishbonebridge1_next_value_ce4 = 1'd1;
			end
		end
		2'd3: begin
		end
		3'd4: begin
			if (main_uartwishbonebridge1_wishbone_ack) begin
				main_uartwishbonebridge1_address_uartwishbonebridge1_next_value_ce4 = 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
			if (main_uartwishbonebridge1_tx_sink_ready) begin
				if ((main_uartwishbonebridge1_bytes_count == 2'd3)) begin
					main_uartwishbonebridge1_address_uartwishbonebridge1_next_value_ce4 = 1'd1;
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_incr_uartwishbonebridge1_next_value5 = 1'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				if ((main_uartwishbonebridge1_bytes_count == 2'd3)) begin
					if (((main_uartwishbonebridge1_cmd == 1'd1) | (main_uartwishbonebridge1_cmd == 2'd3))) begin
						main_uartwishbonebridge1_incr_uartwishbonebridge1_next_value5 = (main_uartwishbonebridge1_cmd == 1'd1);
					end else begin
						if (((main_uartwishbonebridge1_cmd == 2'd2) | (main_uartwishbonebridge1_cmd == 3'd4))) begin
							main_uartwishbonebridge1_incr_uartwishbonebridge1_next_value5 = (main_uartwishbonebridge1_cmd == 2'd2);
						end else begin
						end
					end
				end
			end
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_uartwishbonebridge1_incr_uartwishbonebridge1_next_value_ce5 = 1'd0;
	case (builder_uartwishbonebridge1_state)
		1'd1: begin
		end
		2'd2: begin
			if (main_uartwishbonebridge1_rx_source_valid) begin
				if ((main_uartwishbonebridge1_bytes_count == 2'd3)) begin
					if (((main_uartwishbonebridge1_cmd == 1'd1) | (main_uartwishbonebridge1_cmd == 2'd3))) begin
						main_uartwishbonebridge1_incr_uartwishbonebridge1_next_value_ce5 = 1'd1;
					end else begin
						if (((main_uartwishbonebridge1_cmd == 2'd2) | (main_uartwishbonebridge1_cmd == 3'd4))) begin
							main_uartwishbonebridge1_incr_uartwishbonebridge1_next_value_ce5 = 1'd1;
						end else begin
						end
					end
				end
			end
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
assign main_uartwishbonebridge1_done = (main_uartwishbonebridge1_count == 1'd0);
assign gpio_mode0_pad = main_gpio_mode0_storage;
assign gpio_mode1_pad = main_gpio_mode1_storage;
assign gpio_inenb_pad = (~main_gpio_ien_storage);
assign gpio_outenb_pad = (~main_gpio_oe_storage);
assign gpio_out_pad = main_gpio_out_storage;
always @(*) begin
	la_iena = 128'd0;
	la_iena[0] = (~main_la_ien_storage[0]);
	la_iena[1] = (~main_la_ien_storage[1]);
	la_iena[2] = (~main_la_ien_storage[2]);
	la_iena[3] = (~main_la_ien_storage[3]);
	la_iena[4] = (~main_la_ien_storage[4]);
	la_iena[5] = (~main_la_ien_storage[5]);
	la_iena[6] = (~main_la_ien_storage[6]);
	la_iena[7] = (~main_la_ien_storage[7]);
	la_iena[8] = (~main_la_ien_storage[8]);
	la_iena[9] = (~main_la_ien_storage[9]);
	la_iena[10] = (~main_la_ien_storage[10]);
	la_iena[11] = (~main_la_ien_storage[11]);
	la_iena[12] = (~main_la_ien_storage[12]);
	la_iena[13] = (~main_la_ien_storage[13]);
	la_iena[14] = (~main_la_ien_storage[14]);
	la_iena[15] = (~main_la_ien_storage[15]);
	la_iena[16] = (~main_la_ien_storage[16]);
	la_iena[17] = (~main_la_ien_storage[17]);
	la_iena[18] = (~main_la_ien_storage[18]);
	la_iena[19] = (~main_la_ien_storage[19]);
	la_iena[20] = (~main_la_ien_storage[20]);
	la_iena[21] = (~main_la_ien_storage[21]);
	la_iena[22] = (~main_la_ien_storage[22]);
	la_iena[23] = (~main_la_ien_storage[23]);
	la_iena[24] = (~main_la_ien_storage[24]);
	la_iena[25] = (~main_la_ien_storage[25]);
	la_iena[26] = (~main_la_ien_storage[26]);
	la_iena[27] = (~main_la_ien_storage[27]);
	la_iena[28] = (~main_la_ien_storage[28]);
	la_iena[29] = (~main_la_ien_storage[29]);
	la_iena[30] = (~main_la_ien_storage[30]);
	la_iena[31] = (~main_la_ien_storage[31]);
	la_iena[32] = (~main_la_ien_storage[32]);
	la_iena[33] = (~main_la_ien_storage[33]);
	la_iena[34] = (~main_la_ien_storage[34]);
	la_iena[35] = (~main_la_ien_storage[35]);
	la_iena[36] = (~main_la_ien_storage[36]);
	la_iena[37] = (~main_la_ien_storage[37]);
	la_iena[38] = (~main_la_ien_storage[38]);
	la_iena[39] = (~main_la_ien_storage[39]);
	la_iena[40] = (~main_la_ien_storage[40]);
	la_iena[41] = (~main_la_ien_storage[41]);
	la_iena[42] = (~main_la_ien_storage[42]);
	la_iena[43] = (~main_la_ien_storage[43]);
	la_iena[44] = (~main_la_ien_storage[44]);
	la_iena[45] = (~main_la_ien_storage[45]);
	la_iena[46] = (~main_la_ien_storage[46]);
	la_iena[47] = (~main_la_ien_storage[47]);
	la_iena[48] = (~main_la_ien_storage[48]);
	la_iena[49] = (~main_la_ien_storage[49]);
	la_iena[50] = (~main_la_ien_storage[50]);
	la_iena[51] = (~main_la_ien_storage[51]);
	la_iena[52] = (~main_la_ien_storage[52]);
	la_iena[53] = (~main_la_ien_storage[53]);
	la_iena[54] = (~main_la_ien_storage[54]);
	la_iena[55] = (~main_la_ien_storage[55]);
	la_iena[56] = (~main_la_ien_storage[56]);
	la_iena[57] = (~main_la_ien_storage[57]);
	la_iena[58] = (~main_la_ien_storage[58]);
	la_iena[59] = (~main_la_ien_storage[59]);
	la_iena[60] = (~main_la_ien_storage[60]);
	la_iena[61] = (~main_la_ien_storage[61]);
	la_iena[62] = (~main_la_ien_storage[62]);
	la_iena[63] = (~main_la_ien_storage[63]);
	la_iena[64] = (~main_la_ien_storage[64]);
	la_iena[65] = (~main_la_ien_storage[65]);
	la_iena[66] = (~main_la_ien_storage[66]);
	la_iena[67] = (~main_la_ien_storage[67]);
	la_iena[68] = (~main_la_ien_storage[68]);
	la_iena[69] = (~main_la_ien_storage[69]);
	la_iena[70] = (~main_la_ien_storage[70]);
	la_iena[71] = (~main_la_ien_storage[71]);
	la_iena[72] = (~main_la_ien_storage[72]);
	la_iena[73] = (~main_la_ien_storage[73]);
	la_iena[74] = (~main_la_ien_storage[74]);
	la_iena[75] = (~main_la_ien_storage[75]);
	la_iena[76] = (~main_la_ien_storage[76]);
	la_iena[77] = (~main_la_ien_storage[77]);
	la_iena[78] = (~main_la_ien_storage[78]);
	la_iena[79] = (~main_la_ien_storage[79]);
	la_iena[80] = (~main_la_ien_storage[80]);
	la_iena[81] = (~main_la_ien_storage[81]);
	la_iena[82] = (~main_la_ien_storage[82]);
	la_iena[83] = (~main_la_ien_storage[83]);
	la_iena[84] = (~main_la_ien_storage[84]);
	la_iena[85] = (~main_la_ien_storage[85]);
	la_iena[86] = (~main_la_ien_storage[86]);
	la_iena[87] = (~main_la_ien_storage[87]);
	la_iena[88] = (~main_la_ien_storage[88]);
	la_iena[89] = (~main_la_ien_storage[89]);
	la_iena[90] = (~main_la_ien_storage[90]);
	la_iena[91] = (~main_la_ien_storage[91]);
	la_iena[92] = (~main_la_ien_storage[92]);
	la_iena[93] = (~main_la_ien_storage[93]);
	la_iena[94] = (~main_la_ien_storage[94]);
	la_iena[95] = (~main_la_ien_storage[95]);
	la_iena[96] = (~main_la_ien_storage[96]);
	la_iena[97] = (~main_la_ien_storage[97]);
	la_iena[98] = (~main_la_ien_storage[98]);
	la_iena[99] = (~main_la_ien_storage[99]);
	la_iena[100] = (~main_la_ien_storage[100]);
	la_iena[101] = (~main_la_ien_storage[101]);
	la_iena[102] = (~main_la_ien_storage[102]);
	la_iena[103] = (~main_la_ien_storage[103]);
	la_iena[104] = (~main_la_ien_storage[104]);
	la_iena[105] = (~main_la_ien_storage[105]);
	la_iena[106] = (~main_la_ien_storage[106]);
	la_iena[107] = (~main_la_ien_storage[107]);
	la_iena[108] = (~main_la_ien_storage[108]);
	la_iena[109] = (~main_la_ien_storage[109]);
	la_iena[110] = (~main_la_ien_storage[110]);
	la_iena[111] = (~main_la_ien_storage[111]);
	la_iena[112] = (~main_la_ien_storage[112]);
	la_iena[113] = (~main_la_ien_storage[113]);
	la_iena[114] = (~main_la_ien_storage[114]);
	la_iena[115] = (~main_la_ien_storage[115]);
	la_iena[116] = (~main_la_ien_storage[116]);
	la_iena[117] = (~main_la_ien_storage[117]);
	la_iena[118] = (~main_la_ien_storage[118]);
	la_iena[119] = (~main_la_ien_storage[119]);
	la_iena[120] = (~main_la_ien_storage[120]);
	la_iena[121] = (~main_la_ien_storage[121]);
	la_iena[122] = (~main_la_ien_storage[122]);
	la_iena[123] = (~main_la_ien_storage[123]);
	la_iena[124] = (~main_la_ien_storage[124]);
	la_iena[125] = (~main_la_ien_storage[125]);
	la_iena[126] = (~main_la_ien_storage[126]);
	la_iena[127] = (~main_la_ien_storage[127]);
end
always @(*) begin
	la_oenb = 128'd0;
	la_oenb[0] = (~main_la_oe_storage[0]);
	la_oenb[1] = (~main_la_oe_storage[1]);
	la_oenb[2] = (~main_la_oe_storage[2]);
	la_oenb[3] = (~main_la_oe_storage[3]);
	la_oenb[4] = (~main_la_oe_storage[4]);
	la_oenb[5] = (~main_la_oe_storage[5]);
	la_oenb[6] = (~main_la_oe_storage[6]);
	la_oenb[7] = (~main_la_oe_storage[7]);
	la_oenb[8] = (~main_la_oe_storage[8]);
	la_oenb[9] = (~main_la_oe_storage[9]);
	la_oenb[10] = (~main_la_oe_storage[10]);
	la_oenb[11] = (~main_la_oe_storage[11]);
	la_oenb[12] = (~main_la_oe_storage[12]);
	la_oenb[13] = (~main_la_oe_storage[13]);
	la_oenb[14] = (~main_la_oe_storage[14]);
	la_oenb[15] = (~main_la_oe_storage[15]);
	la_oenb[16] = (~main_la_oe_storage[16]);
	la_oenb[17] = (~main_la_oe_storage[17]);
	la_oenb[18] = (~main_la_oe_storage[18]);
	la_oenb[19] = (~main_la_oe_storage[19]);
	la_oenb[20] = (~main_la_oe_storage[20]);
	la_oenb[21] = (~main_la_oe_storage[21]);
	la_oenb[22] = (~main_la_oe_storage[22]);
	la_oenb[23] = (~main_la_oe_storage[23]);
	la_oenb[24] = (~main_la_oe_storage[24]);
	la_oenb[25] = (~main_la_oe_storage[25]);
	la_oenb[26] = (~main_la_oe_storage[26]);
	la_oenb[27] = (~main_la_oe_storage[27]);
	la_oenb[28] = (~main_la_oe_storage[28]);
	la_oenb[29] = (~main_la_oe_storage[29]);
	la_oenb[30] = (~main_la_oe_storage[30]);
	la_oenb[31] = (~main_la_oe_storage[31]);
	la_oenb[32] = (~main_la_oe_storage[32]);
	la_oenb[33] = (~main_la_oe_storage[33]);
	la_oenb[34] = (~main_la_oe_storage[34]);
	la_oenb[35] = (~main_la_oe_storage[35]);
	la_oenb[36] = (~main_la_oe_storage[36]);
	la_oenb[37] = (~main_la_oe_storage[37]);
	la_oenb[38] = (~main_la_oe_storage[38]);
	la_oenb[39] = (~main_la_oe_storage[39]);
	la_oenb[40] = (~main_la_oe_storage[40]);
	la_oenb[41] = (~main_la_oe_storage[41]);
	la_oenb[42] = (~main_la_oe_storage[42]);
	la_oenb[43] = (~main_la_oe_storage[43]);
	la_oenb[44] = (~main_la_oe_storage[44]);
	la_oenb[45] = (~main_la_oe_storage[45]);
	la_oenb[46] = (~main_la_oe_storage[46]);
	la_oenb[47] = (~main_la_oe_storage[47]);
	la_oenb[48] = (~main_la_oe_storage[48]);
	la_oenb[49] = (~main_la_oe_storage[49]);
	la_oenb[50] = (~main_la_oe_storage[50]);
	la_oenb[51] = (~main_la_oe_storage[51]);
	la_oenb[52] = (~main_la_oe_storage[52]);
	la_oenb[53] = (~main_la_oe_storage[53]);
	la_oenb[54] = (~main_la_oe_storage[54]);
	la_oenb[55] = (~main_la_oe_storage[55]);
	la_oenb[56] = (~main_la_oe_storage[56]);
	la_oenb[57] = (~main_la_oe_storage[57]);
	la_oenb[58] = (~main_la_oe_storage[58]);
	la_oenb[59] = (~main_la_oe_storage[59]);
	la_oenb[60] = (~main_la_oe_storage[60]);
	la_oenb[61] = (~main_la_oe_storage[61]);
	la_oenb[62] = (~main_la_oe_storage[62]);
	la_oenb[63] = (~main_la_oe_storage[63]);
	la_oenb[64] = (~main_la_oe_storage[64]);
	la_oenb[65] = (~main_la_oe_storage[65]);
	la_oenb[66] = (~main_la_oe_storage[66]);
	la_oenb[67] = (~main_la_oe_storage[67]);
	la_oenb[68] = (~main_la_oe_storage[68]);
	la_oenb[69] = (~main_la_oe_storage[69]);
	la_oenb[70] = (~main_la_oe_storage[70]);
	la_oenb[71] = (~main_la_oe_storage[71]);
	la_oenb[72] = (~main_la_oe_storage[72]);
	la_oenb[73] = (~main_la_oe_storage[73]);
	la_oenb[74] = (~main_la_oe_storage[74]);
	la_oenb[75] = (~main_la_oe_storage[75]);
	la_oenb[76] = (~main_la_oe_storage[76]);
	la_oenb[77] = (~main_la_oe_storage[77]);
	la_oenb[78] = (~main_la_oe_storage[78]);
	la_oenb[79] = (~main_la_oe_storage[79]);
	la_oenb[80] = (~main_la_oe_storage[80]);
	la_oenb[81] = (~main_la_oe_storage[81]);
	la_oenb[82] = (~main_la_oe_storage[82]);
	la_oenb[83] = (~main_la_oe_storage[83]);
	la_oenb[84] = (~main_la_oe_storage[84]);
	la_oenb[85] = (~main_la_oe_storage[85]);
	la_oenb[86] = (~main_la_oe_storage[86]);
	la_oenb[87] = (~main_la_oe_storage[87]);
	la_oenb[88] = (~main_la_oe_storage[88]);
	la_oenb[89] = (~main_la_oe_storage[89]);
	la_oenb[90] = (~main_la_oe_storage[90]);
	la_oenb[91] = (~main_la_oe_storage[91]);
	la_oenb[92] = (~main_la_oe_storage[92]);
	la_oenb[93] = (~main_la_oe_storage[93]);
	la_oenb[94] = (~main_la_oe_storage[94]);
	la_oenb[95] = (~main_la_oe_storage[95]);
	la_oenb[96] = (~main_la_oe_storage[96]);
	la_oenb[97] = (~main_la_oe_storage[97]);
	la_oenb[98] = (~main_la_oe_storage[98]);
	la_oenb[99] = (~main_la_oe_storage[99]);
	la_oenb[100] = (~main_la_oe_storage[100]);
	la_oenb[101] = (~main_la_oe_storage[101]);
	la_oenb[102] = (~main_la_oe_storage[102]);
	la_oenb[103] = (~main_la_oe_storage[103]);
	la_oenb[104] = (~main_la_oe_storage[104]);
	la_oenb[105] = (~main_la_oe_storage[105]);
	la_oenb[106] = (~main_la_oe_storage[106]);
	la_oenb[107] = (~main_la_oe_storage[107]);
	la_oenb[108] = (~main_la_oe_storage[108]);
	la_oenb[109] = (~main_la_oe_storage[109]);
	la_oenb[110] = (~main_la_oe_storage[110]);
	la_oenb[111] = (~main_la_oe_storage[111]);
	la_oenb[112] = (~main_la_oe_storage[112]);
	la_oenb[113] = (~main_la_oe_storage[113]);
	la_oenb[114] = (~main_la_oe_storage[114]);
	la_oenb[115] = (~main_la_oe_storage[115]);
	la_oenb[116] = (~main_la_oe_storage[116]);
	la_oenb[117] = (~main_la_oe_storage[117]);
	la_oenb[118] = (~main_la_oe_storage[118]);
	la_oenb[119] = (~main_la_oe_storage[119]);
	la_oenb[120] = (~main_la_oe_storage[120]);
	la_oenb[121] = (~main_la_oe_storage[121]);
	la_oenb[122] = (~main_la_oe_storage[122]);
	la_oenb[123] = (~main_la_oe_storage[123]);
	la_oenb[124] = (~main_la_oe_storage[124]);
	la_oenb[125] = (~main_la_oe_storage[125]);
	la_oenb[126] = (~main_la_oe_storage[126]);
	la_oenb[127] = (~main_la_oe_storage[127]);
end
always @(*) begin
	la_output = 128'd0;
	la_output[0] = main_la_out_storage[0];
	la_output[1] = main_la_out_storage[1];
	la_output[2] = main_la_out_storage[2];
	la_output[3] = main_la_out_storage[3];
	la_output[4] = main_la_out_storage[4];
	la_output[5] = main_la_out_storage[5];
	la_output[6] = main_la_out_storage[6];
	la_output[7] = main_la_out_storage[7];
	la_output[8] = main_la_out_storage[8];
	la_output[9] = main_la_out_storage[9];
	la_output[10] = main_la_out_storage[10];
	la_output[11] = main_la_out_storage[11];
	la_output[12] = main_la_out_storage[12];
	la_output[13] = main_la_out_storage[13];
	la_output[14] = main_la_out_storage[14];
	la_output[15] = main_la_out_storage[15];
	la_output[16] = main_la_out_storage[16];
	la_output[17] = main_la_out_storage[17];
	la_output[18] = main_la_out_storage[18];
	la_output[19] = main_la_out_storage[19];
	la_output[20] = main_la_out_storage[20];
	la_output[21] = main_la_out_storage[21];
	la_output[22] = main_la_out_storage[22];
	la_output[23] = main_la_out_storage[23];
	la_output[24] = main_la_out_storage[24];
	la_output[25] = main_la_out_storage[25];
	la_output[26] = main_la_out_storage[26];
	la_output[27] = main_la_out_storage[27];
	la_output[28] = main_la_out_storage[28];
	la_output[29] = main_la_out_storage[29];
	la_output[30] = main_la_out_storage[30];
	la_output[31] = main_la_out_storage[31];
	la_output[32] = main_la_out_storage[32];
	la_output[33] = main_la_out_storage[33];
	la_output[34] = main_la_out_storage[34];
	la_output[35] = main_la_out_storage[35];
	la_output[36] = main_la_out_storage[36];
	la_output[37] = main_la_out_storage[37];
	la_output[38] = main_la_out_storage[38];
	la_output[39] = main_la_out_storage[39];
	la_output[40] = main_la_out_storage[40];
	la_output[41] = main_la_out_storage[41];
	la_output[42] = main_la_out_storage[42];
	la_output[43] = main_la_out_storage[43];
	la_output[44] = main_la_out_storage[44];
	la_output[45] = main_la_out_storage[45];
	la_output[46] = main_la_out_storage[46];
	la_output[47] = main_la_out_storage[47];
	la_output[48] = main_la_out_storage[48];
	la_output[49] = main_la_out_storage[49];
	la_output[50] = main_la_out_storage[50];
	la_output[51] = main_la_out_storage[51];
	la_output[52] = main_la_out_storage[52];
	la_output[53] = main_la_out_storage[53];
	la_output[54] = main_la_out_storage[54];
	la_output[55] = main_la_out_storage[55];
	la_output[56] = main_la_out_storage[56];
	la_output[57] = main_la_out_storage[57];
	la_output[58] = main_la_out_storage[58];
	la_output[59] = main_la_out_storage[59];
	la_output[60] = main_la_out_storage[60];
	la_output[61] = main_la_out_storage[61];
	la_output[62] = main_la_out_storage[62];
	la_output[63] = main_la_out_storage[63];
	la_output[64] = main_la_out_storage[64];
	la_output[65] = main_la_out_storage[65];
	la_output[66] = main_la_out_storage[66];
	la_output[67] = main_la_out_storage[67];
	la_output[68] = main_la_out_storage[68];
	la_output[69] = main_la_out_storage[69];
	la_output[70] = main_la_out_storage[70];
	la_output[71] = main_la_out_storage[71];
	la_output[72] = main_la_out_storage[72];
	la_output[73] = main_la_out_storage[73];
	la_output[74] = main_la_out_storage[74];
	la_output[75] = main_la_out_storage[75];
	la_output[76] = main_la_out_storage[76];
	la_output[77] = main_la_out_storage[77];
	la_output[78] = main_la_out_storage[78];
	la_output[79] = main_la_out_storage[79];
	la_output[80] = main_la_out_storage[80];
	la_output[81] = main_la_out_storage[81];
	la_output[82] = main_la_out_storage[82];
	la_output[83] = main_la_out_storage[83];
	la_output[84] = main_la_out_storage[84];
	la_output[85] = main_la_out_storage[85];
	la_output[86] = main_la_out_storage[86];
	la_output[87] = main_la_out_storage[87];
	la_output[88] = main_la_out_storage[88];
	la_output[89] = main_la_out_storage[89];
	la_output[90] = main_la_out_storage[90];
	la_output[91] = main_la_out_storage[91];
	la_output[92] = main_la_out_storage[92];
	la_output[93] = main_la_out_storage[93];
	la_output[94] = main_la_out_storage[94];
	la_output[95] = main_la_out_storage[95];
	la_output[96] = main_la_out_storage[96];
	la_output[97] = main_la_out_storage[97];
	la_output[98] = main_la_out_storage[98];
	la_output[99] = main_la_out_storage[99];
	la_output[100] = main_la_out_storage[100];
	la_output[101] = main_la_out_storage[101];
	la_output[102] = main_la_out_storage[102];
	la_output[103] = main_la_out_storage[103];
	la_output[104] = main_la_out_storage[104];
	la_output[105] = main_la_out_storage[105];
	la_output[106] = main_la_out_storage[106];
	la_output[107] = main_la_out_storage[107];
	la_output[108] = main_la_out_storage[108];
	la_output[109] = main_la_out_storage[109];
	la_output[110] = main_la_out_storage[110];
	la_output[111] = main_la_out_storage[111];
	la_output[112] = main_la_out_storage[112];
	la_output[113] = main_la_out_storage[113];
	la_output[114] = main_la_out_storage[114];
	la_output[115] = main_la_out_storage[115];
	la_output[116] = main_la_out_storage[116];
	la_output[117] = main_la_out_storage[117];
	la_output[118] = main_la_out_storage[118];
	la_output[119] = main_la_out_storage[119];
	la_output[120] = main_la_out_storage[120];
	la_output[121] = main_la_out_storage[121];
	la_output[122] = main_la_out_storage[122];
	la_output[123] = main_la_out_storage[123];
	la_output[124] = main_la_out_storage[124];
	la_output[125] = main_la_out_storage[125];
	la_output[126] = main_la_out_storage[126];
	la_output[127] = main_la_out_storage[127];
end
assign mprj_wb_iena = main_mprj_wb_iena_storage;
assign user_irq_ena = main_user_irq_ena_storage;
always @(*) begin
	main_gpioin0_gpioin0_trigger = 1'd0;
	if (main_gpioin0_gpioin0_mode_storage) begin
		main_gpioin0_gpioin0_trigger = (main_gpioin0_in_status ^ main_gpioin0_gpioin0_in_pads_n_d);
	end else begin
		main_gpioin0_gpioin0_trigger = (main_gpioin0_in_status ^ main_gpioin0_gpioin0_edge_storage);
	end
end
assign builder_gpioin0_i00 = main_gpioin0_gpioin0_status;
assign builder_gpioin0_i01 = main_gpioin0_gpioin0_pending;
always @(*) begin
	main_gpioin0_gpioin0_clear = 1'd0;
	if ((builder_gpioin0_pending_re & builder_gpioin0_pending_r)) begin
		main_gpioin0_gpioin0_clear = 1'd1;
	end
end
assign main_gpioin0_gpioin0_irq = (builder_gpioin0_pending_status & builder_gpioin0_enable_storage);
assign main_gpioin0_gpioin0_status = main_gpioin0_gpioin0_trigger;
always @(*) begin
	main_gpioin1_gpioin1_trigger = 1'd0;
	if (main_gpioin1_gpioin1_mode_storage) begin
		main_gpioin1_gpioin1_trigger = (main_gpioin1_in_status ^ main_gpioin1_gpioin1_in_pads_n_d);
	end else begin
		main_gpioin1_gpioin1_trigger = (main_gpioin1_in_status ^ main_gpioin1_gpioin1_edge_storage);
	end
end
assign builder_gpioin1_i00 = main_gpioin1_gpioin1_status;
assign builder_gpioin1_i01 = main_gpioin1_gpioin1_pending;
always @(*) begin
	main_gpioin1_gpioin1_clear = 1'd0;
	if ((builder_gpioin1_pending_re & builder_gpioin1_pending_r)) begin
		main_gpioin1_gpioin1_clear = 1'd1;
	end
end
assign main_gpioin1_gpioin1_irq = (builder_gpioin1_pending_status & builder_gpioin1_enable_storage);
assign main_gpioin1_gpioin1_status = main_gpioin1_gpioin1_trigger;
always @(*) begin
	main_gpioin2_gpioin2_trigger = 1'd0;
	if (main_gpioin2_gpioin2_mode_storage) begin
		main_gpioin2_gpioin2_trigger = (main_gpioin2_in_status ^ main_gpioin2_gpioin2_in_pads_n_d);
	end else begin
		main_gpioin2_gpioin2_trigger = (main_gpioin2_in_status ^ main_gpioin2_gpioin2_edge_storage);
	end
end
assign builder_gpioin2_i00 = main_gpioin2_gpioin2_status;
assign builder_gpioin2_i01 = main_gpioin2_gpioin2_pending;
always @(*) begin
	main_gpioin2_gpioin2_clear = 1'd0;
	if ((builder_gpioin2_pending_re & builder_gpioin2_pending_r)) begin
		main_gpioin2_gpioin2_clear = 1'd1;
	end
end
assign main_gpioin2_gpioin2_irq = (builder_gpioin2_pending_status & builder_gpioin2_enable_storage);
assign main_gpioin2_gpioin2_status = main_gpioin2_gpioin2_trigger;
always @(*) begin
	main_gpioin3_gpioin3_trigger = 1'd0;
	if (main_gpioin3_gpioin3_mode_storage) begin
		main_gpioin3_gpioin3_trigger = (main_gpioin3_in_status ^ main_gpioin3_gpioin3_in_pads_n_d);
	end else begin
		main_gpioin3_gpioin3_trigger = (main_gpioin3_in_status ^ main_gpioin3_gpioin3_edge_storage);
	end
end
assign builder_gpioin3_i00 = main_gpioin3_gpioin3_status;
assign builder_gpioin3_i01 = main_gpioin3_gpioin3_pending;
always @(*) begin
	main_gpioin3_gpioin3_clear = 1'd0;
	if ((builder_gpioin3_pending_re & builder_gpioin3_pending_r)) begin
		main_gpioin3_gpioin3_clear = 1'd1;
	end
end
assign main_gpioin3_gpioin3_irq = (builder_gpioin3_pending_status & builder_gpioin3_enable_storage);
assign main_gpioin3_gpioin3_status = main_gpioin3_gpioin3_trigger;
always @(*) begin
	main_gpioin4_gpioin4_trigger = 1'd0;
	if (main_gpioin4_gpioin4_mode_storage) begin
		main_gpioin4_gpioin4_trigger = (main_gpioin4_in_status ^ main_gpioin4_gpioin4_in_pads_n_d);
	end else begin
		main_gpioin4_gpioin4_trigger = (main_gpioin4_in_status ^ main_gpioin4_gpioin4_edge_storage);
	end
end
assign builder_gpioin4_i00 = main_gpioin4_gpioin4_status;
assign builder_gpioin4_i01 = main_gpioin4_gpioin4_pending;
always @(*) begin
	main_gpioin4_gpioin4_clear = 1'd0;
	if ((builder_gpioin4_pending_re & builder_gpioin4_pending_r)) begin
		main_gpioin4_gpioin4_clear = 1'd1;
	end
end
assign main_gpioin4_gpioin4_irq = (builder_gpioin4_pending_status & builder_gpioin4_enable_storage);
assign main_gpioin4_gpioin4_status = main_gpioin4_gpioin4_trigger;
always @(*) begin
	main_gpioin5_gpioin5_trigger = 1'd0;
	if (main_gpioin5_gpioin5_mode_storage) begin
		main_gpioin5_gpioin5_trigger = (main_gpioin5_in_status ^ main_gpioin5_gpioin5_in_pads_n_d);
	end else begin
		main_gpioin5_gpioin5_trigger = (main_gpioin5_in_status ^ main_gpioin5_gpioin5_edge_storage);
	end
end
assign builder_gpioin5_i00 = main_gpioin5_gpioin5_status;
assign builder_gpioin5_i01 = main_gpioin5_gpioin5_pending;
always @(*) begin
	main_gpioin5_gpioin5_clear = 1'd0;
	if ((builder_gpioin5_pending_re & builder_gpioin5_pending_r)) begin
		main_gpioin5_gpioin5_clear = 1'd1;
	end
end
assign main_gpioin5_gpioin5_irq = (builder_gpioin5_pending_status & builder_gpioin5_enable_storage);
assign main_gpioin5_gpioin5_status = main_gpioin5_gpioin5_trigger;
always @(*) begin
	builder_next_state = 1'd0;
	builder_next_state = builder_state;
	case (builder_state)
		1'd1: begin
			builder_next_state = 1'd0;
		end
		default: begin
			if ((builder_mgmtsoc_wishbone_cyc & builder_mgmtsoc_wishbone_stb)) begin
				builder_next_state = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	builder_mgmtsoc_adr = 14'd0;
	case (builder_state)
		1'd1: begin
		end
		default: begin
			if ((builder_mgmtsoc_wishbone_cyc & builder_mgmtsoc_wishbone_stb)) begin
				builder_mgmtsoc_adr = builder_mgmtsoc_wishbone_adr;
			end
		end
	endcase
end
always @(*) begin
	builder_mgmtsoc_we = 1'd0;
	case (builder_state)
		1'd1: begin
		end
		default: begin
			if ((builder_mgmtsoc_wishbone_cyc & builder_mgmtsoc_wishbone_stb)) begin
				builder_mgmtsoc_we = (builder_mgmtsoc_wishbone_we & (builder_mgmtsoc_wishbone_sel != 1'd0));
			end
		end
	endcase
end
always @(*) begin
	builder_mgmtsoc_dat_w = 32'd0;
	case (builder_state)
		1'd1: begin
		end
		default: begin
			builder_mgmtsoc_dat_w = builder_mgmtsoc_wishbone_dat_w;
		end
	endcase
end
always @(*) begin
	builder_mgmtsoc_wishbone_dat_r = 32'd0;
	case (builder_state)
		1'd1: begin
			builder_mgmtsoc_wishbone_dat_r = builder_mgmtsoc_dat_r;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_mgmtsoc_wishbone_ack = 1'd0;
	case (builder_state)
		1'd1: begin
			builder_mgmtsoc_wishbone_ack = 1'd1;
		end
		default: begin
		end
	endcase
end
assign builder_shared_adr = builder_comb_array_muxed0;
assign builder_shared_dat_w = builder_comb_array_muxed1;
assign builder_shared_sel = builder_comb_array_muxed2;
assign builder_shared_cyc = builder_comb_array_muxed3;
assign builder_shared_stb = builder_comb_array_muxed4;
assign builder_shared_we = builder_comb_array_muxed5;
assign builder_shared_cti = builder_comb_array_muxed6;
assign builder_shared_bte = builder_comb_array_muxed7;
assign main_picorv32_idbus_dat_r = builder_shared_dat_r;
assign main_uartwishbonebridge0_wishbone_dat_r = builder_shared_dat_r;
assign main_picorv32_idbus_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_uartwishbonebridge0_wishbone_ack = (builder_shared_ack & (builder_grant == 1'd1));
assign main_picorv32_idbus_err = (builder_shared_err & (builder_grant == 1'd0));
assign main_uartwishbonebridge0_wishbone_err = (builder_shared_err & (builder_grant == 1'd1));
assign builder_request = {main_uartwishbonebridge0_wishbone_cyc, main_picorv32_idbus_cyc};
always @(*) begin
	builder_slave_sel = 3'd0;
	builder_slave_sel[0] = (builder_shared_adr[29:9] == 19'd262144);
	builder_slave_sel[1] = (builder_shared_adr[29:22] == 1'd0);
	builder_slave_sel[2] = (builder_shared_adr[29:14] == 16'd33280);
end
assign main_bus_adr = builder_shared_adr;
assign main_bus_dat_w = builder_shared_dat_w;
assign main_bus_sel = builder_shared_sel;
assign main_bus_stb = builder_shared_stb;
assign main_bus_we = builder_shared_we;
assign main_bus_cti = builder_shared_cti;
assign main_bus_bte = builder_shared_bte;
assign main_litespimmap_bus_adr = builder_shared_adr;
assign main_litespimmap_bus_dat_w = builder_shared_dat_w;
assign main_litespimmap_bus_sel = builder_shared_sel;
assign main_litespimmap_bus_stb = builder_shared_stb;
assign main_litespimmap_bus_we = builder_shared_we;
assign main_litespimmap_bus_cti = builder_shared_cti;
assign main_litespimmap_bus_bte = builder_shared_bte;
assign builder_mgmtsoc_wishbone_adr = builder_shared_adr;
assign builder_mgmtsoc_wishbone_dat_w = builder_shared_dat_w;
assign builder_mgmtsoc_wishbone_sel = builder_shared_sel;
assign builder_mgmtsoc_wishbone_stb = builder_shared_stb;
assign builder_mgmtsoc_wishbone_we = builder_shared_we;
assign builder_mgmtsoc_wishbone_cti = builder_shared_cti;
assign builder_mgmtsoc_wishbone_bte = builder_shared_bte;
assign main_bus_cyc = (builder_shared_cyc & builder_slave_sel[0]);
assign main_litespimmap_bus_cyc = (builder_shared_cyc & builder_slave_sel[1]);
assign builder_mgmtsoc_wishbone_cyc = (builder_shared_cyc & builder_slave_sel[2]);
always @(*) begin
	builder_shared_ack = 1'd0;
	builder_shared_ack = ((main_bus_ack | main_litespimmap_bus_ack) | builder_mgmtsoc_wishbone_ack);
	if (builder_done) begin
		builder_shared_ack = 1'd1;
	end
end
assign builder_shared_err = ((main_bus_err | main_litespimmap_bus_err) | builder_mgmtsoc_wishbone_err);
always @(*) begin
	builder_shared_dat_r = 32'd0;
	builder_shared_dat_r = ((({32{builder_slave_sel_r[0]}} & main_bus_dat_r) | ({32{builder_slave_sel_r[1]}} & main_litespimmap_bus_dat_r)) | ({32{builder_slave_sel_r[2]}} & builder_mgmtsoc_wishbone_dat_r));
	if (builder_done) begin
		builder_shared_dat_r = 32'd4294967295;
	end
end
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
	builder_error = 1'd0;
	if (builder_done) begin
		builder_error = 1'd1;
	end
end
assign builder_done = (builder_count == 1'd0);
assign builder_csrbank0_sel = (builder_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csrbank0_reset0_r = builder_interface0_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csrbank0_reset0_re = 1'd0;
	if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank0_reset0_re = builder_interface0_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank0_reset0_we = 1'd0;
	if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank0_reset0_we = (~builder_interface0_bank_bus_we);
	end
end
assign builder_csrbank0_scratch0_r = builder_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank0_scratch0_re = 1'd0;
	if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank0_scratch0_re = builder_interface0_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank0_scratch0_we = 1'd0;
	if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank0_scratch0_we = (~builder_interface0_bank_bus_we);
	end
end
assign builder_csrbank0_bus_errors_r = builder_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank0_bus_errors_we = 1'd0;
	if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank0_bus_errors_we = (~builder_interface0_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank0_bus_errors_re = 1'd0;
	if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank0_bus_errors_re = builder_interface0_bank_bus_we;
	end
end
always @(*) begin
	main_soc_rst = 1'd0;
	if (main_reset_re) begin
		main_soc_rst = main_reset_storage[0];
	end
end
assign main_cpu_rst = main_reset_storage[1];
assign builder_csrbank0_reset0_w = main_reset_storage[1:0];
assign builder_csrbank0_scratch0_w = main_scratch_storage[31:0];
assign builder_csrbank0_bus_errors_w = main_bus_errors_status[31:0];
assign main_bus_errors_we = builder_csrbank0_bus_errors_we;
assign builder_csrbank1_sel = (builder_interface1_bank_bus_adr[13:9] == 1'd1);
assign builder_csrbank1_mmap_dummy_bits0_r = builder_interface1_bank_bus_dat_w[7:0];
always @(*) begin
	builder_csrbank1_mmap_dummy_bits0_we = 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank1_mmap_dummy_bits0_we = (~builder_interface1_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank1_mmap_dummy_bits0_re = 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank1_mmap_dummy_bits0_re = builder_interface1_bank_bus_we;
	end
end
assign builder_csrbank1_master_cs0_r = builder_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank1_master_cs0_we = 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank1_master_cs0_we = (~builder_interface1_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank1_master_cs0_re = 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank1_master_cs0_re = builder_interface1_bank_bus_we;
	end
end
assign builder_csrbank1_master_phyconfig0_r = builder_interface1_bank_bus_dat_w[23:0];
always @(*) begin
	builder_csrbank1_master_phyconfig0_re = 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank1_master_phyconfig0_re = builder_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank1_master_phyconfig0_we = 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank1_master_phyconfig0_we = (~builder_interface1_bank_bus_we);
	end
end
assign main_master_rxtx_r = builder_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	main_master_rxtx_we = 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 2'd3))) begin
		main_master_rxtx_we = (~builder_interface1_bank_bus_we);
	end
end
always @(*) begin
	main_master_rxtx_re = 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 2'd3))) begin
		main_master_rxtx_re = builder_interface1_bank_bus_we;
	end
end
assign builder_csrbank1_master_status_r = builder_interface1_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csrbank1_master_status_we = 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank1_master_status_we = (~builder_interface1_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank1_master_status_re = 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank1_master_status_re = builder_interface1_bank_bus_we;
	end
end
assign builder_csrbank1_mmap_dummy_bits0_w = main_litespimmap_storage[7:0];
assign builder_csrbank1_master_cs0_w = main_master_cs_storage;
assign main_master_len = main_master_phyconfig_storage[7:0];
assign main_master_width = main_master_phyconfig_storage[11:8];
assign main_master_mask = main_master_phyconfig_storage[23:16];
assign builder_csrbank1_master_phyconfig0_w = main_master_phyconfig_storage[23:0];
always @(*) begin
	main_master_status_status = 2'd0;
	main_master_status_status[0] = main_master_tx_ready;
	main_master_status_status[1] = main_master_rx_ready;
end
assign builder_csrbank1_master_status_w = main_master_status_status[1:0];
assign main_master_status_we = builder_csrbank1_master_status_we;
assign builder_csrbank2_sel = (builder_interface2_bank_bus_adr[13:9] == 2'd2);
assign builder_csrbank2_clk_divisor0_r = builder_interface2_bank_bus_dat_w[7:0];
always @(*) begin
	builder_csrbank2_clk_divisor0_re = 1'd0;
	if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank2_clk_divisor0_re = builder_interface2_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank2_clk_divisor0_we = 1'd0;
	if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank2_clk_divisor0_we = (~builder_interface2_bank_bus_we);
	end
end
assign builder_csrbank2_clk_divisor0_w = main_litespisdrphycore_storage[7:0];
assign builder_csrbank3_sel = (builder_interface3_bank_bus_adr[13:9] == 2'd3);
assign builder_csrbank3_mode10_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank3_mode10_re = 1'd0;
	if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank3_mode10_re = builder_interface3_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank3_mode10_we = 1'd0;
	if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank3_mode10_we = (~builder_interface3_bank_bus_we);
	end
end
assign builder_csrbank3_mode00_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank3_mode00_we = 1'd0;
	if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank3_mode00_we = (~builder_interface3_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank3_mode00_re = 1'd0;
	if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank3_mode00_re = builder_interface3_bank_bus_we;
	end
end
assign builder_csrbank3_ien0_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank3_ien0_re = 1'd0;
	if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank3_ien0_re = builder_interface3_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank3_ien0_we = 1'd0;
	if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank3_ien0_we = (~builder_interface3_bank_bus_we);
	end
end
assign builder_csrbank3_oe0_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank3_oe0_re = 1'd0;
	if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank3_oe0_re = builder_interface3_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank3_oe0_we = 1'd0;
	if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank3_oe0_we = (~builder_interface3_bank_bus_we);
	end
end
assign builder_csrbank3_in_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank3_in_we = 1'd0;
	if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank3_in_we = (~builder_interface3_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank3_in_re = 1'd0;
	if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank3_in_re = builder_interface3_bank_bus_we;
	end
end
assign builder_csrbank3_out0_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank3_out0_re = 1'd0;
	if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank3_out0_re = builder_interface3_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank3_out0_we = 1'd0;
	if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank3_out0_we = (~builder_interface3_bank_bus_we);
	end
end
assign builder_csrbank3_mode10_w = main_gpio_mode1_storage;
assign builder_csrbank3_mode00_w = main_gpio_mode0_storage;
assign builder_csrbank3_ien0_w = main_gpio_ien_storage;
assign builder_csrbank3_oe0_w = main_gpio_oe_storage;
assign builder_csrbank3_in_w = main_gpio_in_status;
assign main_gpio_in_we = builder_csrbank3_in_we;
assign builder_csrbank3_out0_w = main_gpio_out_storage;
assign builder_csrbank4_sel = (builder_interface4_bank_bus_adr[13:9] == 3'd4);
assign builder_csrbank4_ien3_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_ien3_we = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank4_ien3_we = (~builder_interface4_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank4_ien3_re = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank4_ien3_re = builder_interface4_bank_bus_we;
	end
end
assign builder_csrbank4_ien2_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_ien2_we = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank4_ien2_we = (~builder_interface4_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank4_ien2_re = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank4_ien2_re = builder_interface4_bank_bus_we;
	end
end
assign builder_csrbank4_ien1_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_ien1_re = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank4_ien1_re = builder_interface4_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank4_ien1_we = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank4_ien1_we = (~builder_interface4_bank_bus_we);
	end
end
assign builder_csrbank4_ien0_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_ien0_we = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank4_ien0_we = (~builder_interface4_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank4_ien0_re = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank4_ien0_re = builder_interface4_bank_bus_we;
	end
end
assign builder_csrbank4_oe3_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_oe3_re = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank4_oe3_re = builder_interface4_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank4_oe3_we = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank4_oe3_we = (~builder_interface4_bank_bus_we);
	end
end
assign builder_csrbank4_oe2_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_oe2_re = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank4_oe2_re = builder_interface4_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank4_oe2_we = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank4_oe2_we = (~builder_interface4_bank_bus_we);
	end
end
assign builder_csrbank4_oe1_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_oe1_we = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csrbank4_oe1_we = (~builder_interface4_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank4_oe1_re = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csrbank4_oe1_re = builder_interface4_bank_bus_we;
	end
end
assign builder_csrbank4_oe0_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_oe0_re = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csrbank4_oe0_re = builder_interface4_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank4_oe0_we = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csrbank4_oe0_we = (~builder_interface4_bank_bus_we);
	end
end
assign builder_csrbank4_in3_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_in3_we = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd8))) begin
		builder_csrbank4_in3_we = (~builder_interface4_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank4_in3_re = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd8))) begin
		builder_csrbank4_in3_re = builder_interface4_bank_bus_we;
	end
end
assign builder_csrbank4_in2_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_in2_we = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd9))) begin
		builder_csrbank4_in2_we = (~builder_interface4_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank4_in2_re = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd9))) begin
		builder_csrbank4_in2_re = builder_interface4_bank_bus_we;
	end
end
assign builder_csrbank4_in1_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_in1_re = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd10))) begin
		builder_csrbank4_in1_re = builder_interface4_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank4_in1_we = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd10))) begin
		builder_csrbank4_in1_we = (~builder_interface4_bank_bus_we);
	end
end
assign builder_csrbank4_in0_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_in0_re = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd11))) begin
		builder_csrbank4_in0_re = builder_interface4_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank4_in0_we = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd11))) begin
		builder_csrbank4_in0_we = (~builder_interface4_bank_bus_we);
	end
end
assign builder_csrbank4_out3_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_out3_we = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd12))) begin
		builder_csrbank4_out3_we = (~builder_interface4_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank4_out3_re = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd12))) begin
		builder_csrbank4_out3_re = builder_interface4_bank_bus_we;
	end
end
assign builder_csrbank4_out2_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_out2_we = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd13))) begin
		builder_csrbank4_out2_we = (~builder_interface4_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank4_out2_re = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd13))) begin
		builder_csrbank4_out2_re = builder_interface4_bank_bus_we;
	end
end
assign builder_csrbank4_out1_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_out1_re = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd14))) begin
		builder_csrbank4_out1_re = builder_interface4_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank4_out1_we = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd14))) begin
		builder_csrbank4_out1_we = (~builder_interface4_bank_bus_we);
	end
end
assign builder_csrbank4_out0_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_out0_we = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd15))) begin
		builder_csrbank4_out0_we = (~builder_interface4_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank4_out0_re = 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd15))) begin
		builder_csrbank4_out0_re = builder_interface4_bank_bus_we;
	end
end
assign builder_csrbank4_ien3_w = main_la_ien_storage[127:96];
assign builder_csrbank4_ien2_w = main_la_ien_storage[95:64];
assign builder_csrbank4_ien1_w = main_la_ien_storage[63:32];
assign builder_csrbank4_ien0_w = main_la_ien_storage[31:0];
assign builder_csrbank4_oe3_w = main_la_oe_storage[127:96];
assign builder_csrbank4_oe2_w = main_la_oe_storage[95:64];
assign builder_csrbank4_oe1_w = main_la_oe_storage[63:32];
assign builder_csrbank4_oe0_w = main_la_oe_storage[31:0];
assign builder_csrbank4_in3_w = main_la_in_status[127:96];
assign builder_csrbank4_in2_w = main_la_in_status[95:64];
assign builder_csrbank4_in1_w = main_la_in_status[63:32];
assign builder_csrbank4_in0_w = main_la_in_status[31:0];
assign main_la_in_we = builder_csrbank4_in0_we;
assign builder_csrbank4_out3_w = main_la_out_storage[127:96];
assign builder_csrbank4_out2_w = main_la_out_storage[95:64];
assign builder_csrbank4_out1_w = main_la_out_storage[63:32];
assign builder_csrbank4_out0_w = main_la_out_storage[31:0];
assign builder_csrbank5_sel = (builder_interface5_bank_bus_adr[13:9] == 3'd5);
assign builder_csrbank5_out0_r = builder_interface5_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank5_out0_we = 1'd0;
	if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank5_out0_we = (~builder_interface5_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank5_out0_re = 1'd0;
	if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank5_out0_re = builder_interface5_bank_bus_we;
	end
end
assign builder_csrbank5_out0_w = main_mprj_wb_iena_storage;
assign builder_csrbank6_sel = (builder_interface6_bank_bus_adr[13:9] == 3'd6);
assign builder_csrbank6_control0_r = builder_interface6_bank_bus_dat_w[15:0];
always @(*) begin
	builder_csrbank6_control0_re = 1'd0;
	if ((builder_csrbank6_sel & (builder_interface6_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank6_control0_re = builder_interface6_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank6_control0_we = 1'd0;
	if ((builder_csrbank6_sel & (builder_interface6_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank6_control0_we = (~builder_interface6_bank_bus_we);
	end
end
assign builder_csrbank6_status_r = builder_interface6_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank6_status_re = 1'd0;
	if ((builder_csrbank6_sel & (builder_interface6_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank6_status_re = builder_interface6_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank6_status_we = 1'd0;
	if ((builder_csrbank6_sel & (builder_interface6_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank6_status_we = (~builder_interface6_bank_bus_we);
	end
end
assign builder_csrbank6_mosi0_r = builder_interface6_bank_bus_dat_w[7:0];
always @(*) begin
	builder_csrbank6_mosi0_we = 1'd0;
	if ((builder_csrbank6_sel & (builder_interface6_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank6_mosi0_we = (~builder_interface6_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank6_mosi0_re = 1'd0;
	if ((builder_csrbank6_sel & (builder_interface6_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank6_mosi0_re = builder_interface6_bank_bus_we;
	end
end
assign builder_csrbank6_miso_r = builder_interface6_bank_bus_dat_w[7:0];
always @(*) begin
	builder_csrbank6_miso_re = 1'd0;
	if ((builder_csrbank6_sel & (builder_interface6_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank6_miso_re = builder_interface6_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank6_miso_we = 1'd0;
	if ((builder_csrbank6_sel & (builder_interface6_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank6_miso_we = (~builder_interface6_bank_bus_we);
	end
end
assign builder_csrbank6_cs0_r = builder_interface6_bank_bus_dat_w[16:0];
always @(*) begin
	builder_csrbank6_cs0_re = 1'd0;
	if ((builder_csrbank6_sel & (builder_interface6_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank6_cs0_re = builder_interface6_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank6_cs0_we = 1'd0;
	if ((builder_csrbank6_sel & (builder_interface6_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank6_cs0_we = (~builder_interface6_bank_bus_we);
	end
end
assign builder_csrbank6_loopback0_r = builder_interface6_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank6_loopback0_we = 1'd0;
	if ((builder_csrbank6_sel & (builder_interface6_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank6_loopback0_we = (~builder_interface6_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank6_loopback0_re = 1'd0;
	if ((builder_csrbank6_sel & (builder_interface6_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank6_loopback0_re = builder_interface6_bank_bus_we;
	end
end
assign builder_csrbank6_clk_divider0_r = builder_interface6_bank_bus_dat_w[15:0];
always @(*) begin
	builder_csrbank6_clk_divider0_re = 1'd0;
	if ((builder_csrbank6_sel & (builder_interface6_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csrbank6_clk_divider0_re = builder_interface6_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank6_clk_divider0_we = 1'd0;
	if ((builder_csrbank6_sel & (builder_interface6_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csrbank6_clk_divider0_we = (~builder_interface6_bank_bus_we);
	end
end
always @(*) begin
	main_start1 = 1'd0;
	if (main_control_re) begin
		main_start1 = main_control_storage[0];
	end
end
assign main_length1 = main_control_storage[15:8];
assign builder_csrbank6_control0_w = main_control_storage[15:0];
assign main_status_status = main_done1;
assign builder_csrbank6_status_w = main_status_status;
assign main_status_we = builder_csrbank6_status_we;
assign builder_csrbank6_mosi0_w = main_mosi_storage[7:0];
assign builder_csrbank6_miso_w = main_miso_status[7:0];
assign main_miso_we = builder_csrbank6_miso_we;
assign main_sel = main_cs_storage[0];
assign main_mode0 = main_cs_storage[16];
assign builder_csrbank6_cs0_w = main_cs_storage[16:0];
assign main_mode1 = main_loopback_storage;
assign builder_csrbank6_loopback0_w = main_loopback_storage;
assign builder_csrbank6_clk_divider0_w = main_spimaster_storage[15:0];
assign builder_csrbank7_sel = (builder_interface7_bank_bus_adr[13:9] == 3'd7);
assign builder_csrbank7_in_r = builder_interface7_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank7_in_re = 1'd0;
	if ((builder_csrbank7_sel & (builder_interface7_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank7_in_re = builder_interface7_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank7_in_we = 1'd0;
	if ((builder_csrbank7_sel & (builder_interface7_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank7_in_we = (~builder_interface7_bank_bus_we);
	end
end
assign builder_csrbank7_mode0_r = builder_interface7_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank7_mode0_we = 1'd0;
	if ((builder_csrbank7_sel & (builder_interface7_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank7_mode0_we = (~builder_interface7_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank7_mode0_re = 1'd0;
	if ((builder_csrbank7_sel & (builder_interface7_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank7_mode0_re = builder_interface7_bank_bus_we;
	end
end
assign builder_csrbank7_edge0_r = builder_interface7_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank7_edge0_re = 1'd0;
	if ((builder_csrbank7_sel & (builder_interface7_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank7_edge0_re = builder_interface7_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank7_edge0_we = 1'd0;
	if ((builder_csrbank7_sel & (builder_interface7_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank7_edge0_we = (~builder_interface7_bank_bus_we);
	end
end
assign builder_csrbank7_ev_status_r = builder_interface7_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank7_ev_status_re = 1'd0;
	if ((builder_csrbank7_sel & (builder_interface7_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank7_ev_status_re = builder_interface7_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank7_ev_status_we = 1'd0;
	if ((builder_csrbank7_sel & (builder_interface7_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank7_ev_status_we = (~builder_interface7_bank_bus_we);
	end
end
assign builder_csrbank7_ev_pending_r = builder_interface7_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank7_ev_pending_we = 1'd0;
	if ((builder_csrbank7_sel & (builder_interface7_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank7_ev_pending_we = (~builder_interface7_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank7_ev_pending_re = 1'd0;
	if ((builder_csrbank7_sel & (builder_interface7_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank7_ev_pending_re = builder_interface7_bank_bus_we;
	end
end
assign builder_csrbank7_ev_enable0_r = builder_interface7_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank7_ev_enable0_re = 1'd0;
	if ((builder_csrbank7_sel & (builder_interface7_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank7_ev_enable0_re = builder_interface7_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank7_ev_enable0_we = 1'd0;
	if ((builder_csrbank7_sel & (builder_interface7_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank7_ev_enable0_we = (~builder_interface7_bank_bus_we);
	end
end
assign builder_csrbank7_in_w = main_gpioin0_in_status;
assign main_gpioin0_in_we = builder_csrbank7_in_we;
assign builder_csrbank7_mode0_w = main_gpioin0_gpioin0_mode_storage;
assign builder_csrbank7_edge0_w = main_gpioin0_gpioin0_edge_storage;
assign builder_gpioin0_status_status = builder_gpioin0_i00;
assign builder_csrbank7_ev_status_w = builder_gpioin0_status_status;
assign builder_gpioin0_status_we = builder_csrbank7_ev_status_we;
assign builder_gpioin0_pending_status = builder_gpioin0_i01;
assign builder_csrbank7_ev_pending_w = builder_gpioin0_pending_status;
assign builder_gpioin0_pending_we = builder_csrbank7_ev_pending_we;
assign builder_gpioin0_i02 = builder_gpioin0_enable_storage;
assign builder_csrbank7_ev_enable0_w = builder_gpioin0_enable_storage;
assign builder_csrbank8_sel = (builder_interface8_bank_bus_adr[13:9] == 4'd8);
assign builder_csrbank8_in_r = builder_interface8_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank8_in_we = 1'd0;
	if ((builder_csrbank8_sel & (builder_interface8_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank8_in_we = (~builder_interface8_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank8_in_re = 1'd0;
	if ((builder_csrbank8_sel & (builder_interface8_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank8_in_re = builder_interface8_bank_bus_we;
	end
end
assign builder_csrbank8_mode0_r = builder_interface8_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank8_mode0_we = 1'd0;
	if ((builder_csrbank8_sel & (builder_interface8_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank8_mode0_we = (~builder_interface8_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank8_mode0_re = 1'd0;
	if ((builder_csrbank8_sel & (builder_interface8_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank8_mode0_re = builder_interface8_bank_bus_we;
	end
end
assign builder_csrbank8_edge0_r = builder_interface8_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank8_edge0_re = 1'd0;
	if ((builder_csrbank8_sel & (builder_interface8_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank8_edge0_re = builder_interface8_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank8_edge0_we = 1'd0;
	if ((builder_csrbank8_sel & (builder_interface8_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank8_edge0_we = (~builder_interface8_bank_bus_we);
	end
end
assign builder_csrbank8_ev_status_r = builder_interface8_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank8_ev_status_we = 1'd0;
	if ((builder_csrbank8_sel & (builder_interface8_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank8_ev_status_we = (~builder_interface8_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank8_ev_status_re = 1'd0;
	if ((builder_csrbank8_sel & (builder_interface8_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank8_ev_status_re = builder_interface8_bank_bus_we;
	end
end
assign builder_csrbank8_ev_pending_r = builder_interface8_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank8_ev_pending_we = 1'd0;
	if ((builder_csrbank8_sel & (builder_interface8_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank8_ev_pending_we = (~builder_interface8_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank8_ev_pending_re = 1'd0;
	if ((builder_csrbank8_sel & (builder_interface8_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank8_ev_pending_re = builder_interface8_bank_bus_we;
	end
end
assign builder_csrbank8_ev_enable0_r = builder_interface8_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank8_ev_enable0_re = 1'd0;
	if ((builder_csrbank8_sel & (builder_interface8_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank8_ev_enable0_re = builder_interface8_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank8_ev_enable0_we = 1'd0;
	if ((builder_csrbank8_sel & (builder_interface8_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank8_ev_enable0_we = (~builder_interface8_bank_bus_we);
	end
end
assign builder_csrbank8_in_w = main_gpioin1_in_status;
assign main_gpioin1_in_we = builder_csrbank8_in_we;
assign builder_csrbank8_mode0_w = main_gpioin1_gpioin1_mode_storage;
assign builder_csrbank8_edge0_w = main_gpioin1_gpioin1_edge_storage;
assign builder_gpioin1_status_status = builder_gpioin1_i00;
assign builder_csrbank8_ev_status_w = builder_gpioin1_status_status;
assign builder_gpioin1_status_we = builder_csrbank8_ev_status_we;
assign builder_gpioin1_pending_status = builder_gpioin1_i01;
assign builder_csrbank8_ev_pending_w = builder_gpioin1_pending_status;
assign builder_gpioin1_pending_we = builder_csrbank8_ev_pending_we;
assign builder_gpioin1_i02 = builder_gpioin1_enable_storage;
assign builder_csrbank8_ev_enable0_w = builder_gpioin1_enable_storage;
assign builder_csrbank9_sel = (builder_interface9_bank_bus_adr[13:9] == 4'd9);
assign builder_csrbank9_in_r = builder_interface9_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank9_in_we = 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank9_in_we = (~builder_interface9_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank9_in_re = 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank9_in_re = builder_interface9_bank_bus_we;
	end
end
assign builder_csrbank9_mode0_r = builder_interface9_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank9_mode0_we = 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank9_mode0_we = (~builder_interface9_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank9_mode0_re = 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank9_mode0_re = builder_interface9_bank_bus_we;
	end
end
assign builder_csrbank9_edge0_r = builder_interface9_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank9_edge0_re = 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank9_edge0_re = builder_interface9_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank9_edge0_we = 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank9_edge0_we = (~builder_interface9_bank_bus_we);
	end
end
assign builder_csrbank9_ev_status_r = builder_interface9_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank9_ev_status_we = 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank9_ev_status_we = (~builder_interface9_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank9_ev_status_re = 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank9_ev_status_re = builder_interface9_bank_bus_we;
	end
end
assign builder_csrbank9_ev_pending_r = builder_interface9_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank9_ev_pending_we = 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank9_ev_pending_we = (~builder_interface9_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank9_ev_pending_re = 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank9_ev_pending_re = builder_interface9_bank_bus_we;
	end
end
assign builder_csrbank9_ev_enable0_r = builder_interface9_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank9_ev_enable0_re = 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank9_ev_enable0_re = builder_interface9_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank9_ev_enable0_we = 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank9_ev_enable0_we = (~builder_interface9_bank_bus_we);
	end
end
assign builder_csrbank9_in_w = main_gpioin2_in_status;
assign main_gpioin2_in_we = builder_csrbank9_in_we;
assign builder_csrbank9_mode0_w = main_gpioin2_gpioin2_mode_storage;
assign builder_csrbank9_edge0_w = main_gpioin2_gpioin2_edge_storage;
assign builder_gpioin2_status_status = builder_gpioin2_i00;
assign builder_csrbank9_ev_status_w = builder_gpioin2_status_status;
assign builder_gpioin2_status_we = builder_csrbank9_ev_status_we;
assign builder_gpioin2_pending_status = builder_gpioin2_i01;
assign builder_csrbank9_ev_pending_w = builder_gpioin2_pending_status;
assign builder_gpioin2_pending_we = builder_csrbank9_ev_pending_we;
assign builder_gpioin2_i02 = builder_gpioin2_enable_storage;
assign builder_csrbank9_ev_enable0_w = builder_gpioin2_enable_storage;
assign builder_csrbank10_sel = (builder_interface10_bank_bus_adr[13:9] == 4'd10);
assign builder_csrbank10_in_r = builder_interface10_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank10_in_we = 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank10_in_we = (~builder_interface10_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank10_in_re = 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank10_in_re = builder_interface10_bank_bus_we;
	end
end
assign builder_csrbank10_mode0_r = builder_interface10_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank10_mode0_re = 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank10_mode0_re = builder_interface10_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank10_mode0_we = 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank10_mode0_we = (~builder_interface10_bank_bus_we);
	end
end
assign builder_csrbank10_edge0_r = builder_interface10_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank10_edge0_re = 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank10_edge0_re = builder_interface10_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank10_edge0_we = 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank10_edge0_we = (~builder_interface10_bank_bus_we);
	end
end
assign builder_csrbank10_ev_status_r = builder_interface10_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank10_ev_status_we = 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank10_ev_status_we = (~builder_interface10_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank10_ev_status_re = 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank10_ev_status_re = builder_interface10_bank_bus_we;
	end
end
assign builder_csrbank10_ev_pending_r = builder_interface10_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank10_ev_pending_re = 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank10_ev_pending_re = builder_interface10_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank10_ev_pending_we = 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank10_ev_pending_we = (~builder_interface10_bank_bus_we);
	end
end
assign builder_csrbank10_ev_enable0_r = builder_interface10_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank10_ev_enable0_re = 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank10_ev_enable0_re = builder_interface10_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank10_ev_enable0_we = 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank10_ev_enable0_we = (~builder_interface10_bank_bus_we);
	end
end
assign builder_csrbank10_in_w = main_gpioin3_in_status;
assign main_gpioin3_in_we = builder_csrbank10_in_we;
assign builder_csrbank10_mode0_w = main_gpioin3_gpioin3_mode_storage;
assign builder_csrbank10_edge0_w = main_gpioin3_gpioin3_edge_storage;
assign builder_gpioin3_status_status = builder_gpioin3_i00;
assign builder_csrbank10_ev_status_w = builder_gpioin3_status_status;
assign builder_gpioin3_status_we = builder_csrbank10_ev_status_we;
assign builder_gpioin3_pending_status = builder_gpioin3_i01;
assign builder_csrbank10_ev_pending_w = builder_gpioin3_pending_status;
assign builder_gpioin3_pending_we = builder_csrbank10_ev_pending_we;
assign builder_gpioin3_i02 = builder_gpioin3_enable_storage;
assign builder_csrbank10_ev_enable0_w = builder_gpioin3_enable_storage;
assign builder_csrbank11_sel = (builder_interface11_bank_bus_adr[13:9] == 4'd11);
assign builder_csrbank11_in_r = builder_interface11_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank11_in_we = 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank11_in_we = (~builder_interface11_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank11_in_re = 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank11_in_re = builder_interface11_bank_bus_we;
	end
end
assign builder_csrbank11_mode0_r = builder_interface11_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank11_mode0_re = 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank11_mode0_re = builder_interface11_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank11_mode0_we = 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank11_mode0_we = (~builder_interface11_bank_bus_we);
	end
end
assign builder_csrbank11_edge0_r = builder_interface11_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank11_edge0_we = 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank11_edge0_we = (~builder_interface11_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank11_edge0_re = 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank11_edge0_re = builder_interface11_bank_bus_we;
	end
end
assign builder_csrbank11_ev_status_r = builder_interface11_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank11_ev_status_we = 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank11_ev_status_we = (~builder_interface11_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank11_ev_status_re = 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank11_ev_status_re = builder_interface11_bank_bus_we;
	end
end
assign builder_csrbank11_ev_pending_r = builder_interface11_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank11_ev_pending_re = 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank11_ev_pending_re = builder_interface11_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank11_ev_pending_we = 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank11_ev_pending_we = (~builder_interface11_bank_bus_we);
	end
end
assign builder_csrbank11_ev_enable0_r = builder_interface11_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank11_ev_enable0_we = 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank11_ev_enable0_we = (~builder_interface11_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank11_ev_enable0_re = 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank11_ev_enable0_re = builder_interface11_bank_bus_we;
	end
end
assign builder_csrbank11_in_w = main_gpioin4_in_status;
assign main_gpioin4_in_we = builder_csrbank11_in_we;
assign builder_csrbank11_mode0_w = main_gpioin4_gpioin4_mode_storage;
assign builder_csrbank11_edge0_w = main_gpioin4_gpioin4_edge_storage;
assign builder_gpioin4_status_status = builder_gpioin4_i00;
assign builder_csrbank11_ev_status_w = builder_gpioin4_status_status;
assign builder_gpioin4_status_we = builder_csrbank11_ev_status_we;
assign builder_gpioin4_pending_status = builder_gpioin4_i01;
assign builder_csrbank11_ev_pending_w = builder_gpioin4_pending_status;
assign builder_gpioin4_pending_we = builder_csrbank11_ev_pending_we;
assign builder_gpioin4_i02 = builder_gpioin4_enable_storage;
assign builder_csrbank11_ev_enable0_w = builder_gpioin4_enable_storage;
assign builder_csrbank12_sel = (builder_interface12_bank_bus_adr[13:9] == 4'd12);
assign builder_csrbank12_in_r = builder_interface12_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank12_in_re = 1'd0;
	if ((builder_csrbank12_sel & (builder_interface12_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank12_in_re = builder_interface12_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank12_in_we = 1'd0;
	if ((builder_csrbank12_sel & (builder_interface12_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank12_in_we = (~builder_interface12_bank_bus_we);
	end
end
assign builder_csrbank12_mode0_r = builder_interface12_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank12_mode0_re = 1'd0;
	if ((builder_csrbank12_sel & (builder_interface12_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank12_mode0_re = builder_interface12_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank12_mode0_we = 1'd0;
	if ((builder_csrbank12_sel & (builder_interface12_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank12_mode0_we = (~builder_interface12_bank_bus_we);
	end
end
assign builder_csrbank12_edge0_r = builder_interface12_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank12_edge0_we = 1'd0;
	if ((builder_csrbank12_sel & (builder_interface12_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank12_edge0_we = (~builder_interface12_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank12_edge0_re = 1'd0;
	if ((builder_csrbank12_sel & (builder_interface12_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank12_edge0_re = builder_interface12_bank_bus_we;
	end
end
assign builder_csrbank12_ev_status_r = builder_interface12_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank12_ev_status_re = 1'd0;
	if ((builder_csrbank12_sel & (builder_interface12_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank12_ev_status_re = builder_interface12_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank12_ev_status_we = 1'd0;
	if ((builder_csrbank12_sel & (builder_interface12_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank12_ev_status_we = (~builder_interface12_bank_bus_we);
	end
end
assign builder_csrbank12_ev_pending_r = builder_interface12_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank12_ev_pending_re = 1'd0;
	if ((builder_csrbank12_sel & (builder_interface12_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank12_ev_pending_re = builder_interface12_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank12_ev_pending_we = 1'd0;
	if ((builder_csrbank12_sel & (builder_interface12_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank12_ev_pending_we = (~builder_interface12_bank_bus_we);
	end
end
assign builder_csrbank12_ev_enable0_r = builder_interface12_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank12_ev_enable0_we = 1'd0;
	if ((builder_csrbank12_sel & (builder_interface12_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank12_ev_enable0_we = (~builder_interface12_bank_bus_we);
	end
end
always @(*) begin
	builder_csrbank12_ev_enable0_re = 1'd0;
	if ((builder_csrbank12_sel & (builder_interface12_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank12_ev_enable0_re = builder_interface12_bank_bus_we;
	end
end
assign builder_csrbank12_in_w = main_gpioin5_in_status;
assign main_gpioin5_in_we = builder_csrbank12_in_we;
assign builder_csrbank12_mode0_w = main_gpioin5_gpioin5_mode_storage;
assign builder_csrbank12_edge0_w = main_gpioin5_gpioin5_edge_storage;
assign builder_gpioin5_status_status = builder_gpioin5_i00;
assign builder_csrbank12_ev_status_w = builder_gpioin5_status_status;
assign builder_gpioin5_status_we = builder_csrbank12_ev_status_we;
assign builder_gpioin5_pending_status = builder_gpioin5_i01;
assign builder_csrbank12_ev_pending_w = builder_gpioin5_pending_status;
assign builder_gpioin5_pending_we = builder_csrbank12_ev_pending_we;
assign builder_gpioin5_i02 = builder_gpioin5_enable_storage;
assign builder_csrbank12_ev_enable0_w = builder_gpioin5_enable_storage;
assign builder_csrbank13_sel = (builder_interface13_bank_bus_adr[13:9] == 4'd13);
assign builder_csrbank13_out0_r = builder_interface13_bank_bus_dat_w[2:0];
always @(*) begin
	builder_csrbank13_out0_re = 1'd0;
	if ((builder_csrbank13_sel & (builder_interface13_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank13_out0_re = builder_interface13_bank_bus_we;
	end
end
always @(*) begin
	builder_csrbank13_out0_we = 1'd0;
	if ((builder_csrbank13_sel & (builder_interface13_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank13_out0_we = (~builder_interface13_bank_bus_we);
	end
end
assign builder_csrbank13_out0_w = main_user_irq_ena_storage[2:0];
assign builder_csr_interconnect_adr = builder_mgmtsoc_adr;
assign builder_csr_interconnect_we = builder_mgmtsoc_we;
assign builder_csr_interconnect_dat_w = builder_mgmtsoc_dat_w;
assign builder_mgmtsoc_dat_r = builder_csr_interconnect_dat_r;
assign builder_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface4_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface5_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface6_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface7_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface8_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface9_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface10_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface11_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface12_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface13_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface4_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface5_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface6_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface7_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface8_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface9_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface10_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface11_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface12_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface13_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface4_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface5_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface6_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface7_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface8_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface9_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface10_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface11_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface12_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface13_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = (((((((((((((builder_interface0_bank_bus_dat_r | builder_interface1_bank_bus_dat_r) | builder_interface2_bank_bus_dat_r) | builder_interface3_bank_bus_dat_r) | builder_interface4_bank_bus_dat_r) | builder_interface5_bank_bus_dat_r) | builder_interface6_bank_bus_dat_r) | builder_interface7_bank_bus_dat_r) | builder_interface8_bank_bus_dat_r) | builder_interface9_bank_bus_dat_r) | builder_interface10_bank_bus_dat_r) | builder_interface11_bank_bus_dat_r) | builder_interface12_bank_bus_dat_r) | builder_interface13_bank_bus_dat_r);
always @(*) begin
	builder_comb_array_muxed0 = 30'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_array_muxed0 = main_picorv32_idbus_adr;
		end
		default: begin
			builder_comb_array_muxed0 = main_uartwishbonebridge0_wishbone_adr;
		end
	endcase
end
always @(*) begin
	builder_comb_array_muxed1 = 32'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_array_muxed1 = main_picorv32_idbus_dat_w;
		end
		default: begin
			builder_comb_array_muxed1 = main_uartwishbonebridge0_wishbone_dat_w;
		end
	endcase
end
always @(*) begin
	builder_comb_array_muxed2 = 4'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_array_muxed2 = main_picorv32_idbus_sel;
		end
		default: begin
			builder_comb_array_muxed2 = main_uartwishbonebridge0_wishbone_sel;
		end
	endcase
end
always @(*) begin
	builder_comb_array_muxed3 = 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_array_muxed3 = main_picorv32_idbus_cyc;
		end
		default: begin
			builder_comb_array_muxed3 = main_uartwishbonebridge0_wishbone_cyc;
		end
	endcase
end
always @(*) begin
	builder_comb_array_muxed4 = 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_array_muxed4 = main_picorv32_idbus_stb;
		end
		default: begin
			builder_comb_array_muxed4 = main_uartwishbonebridge0_wishbone_stb;
		end
	endcase
end
always @(*) begin
	builder_comb_array_muxed5 = 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_array_muxed5 = main_picorv32_idbus_we;
		end
		default: begin
			builder_comb_array_muxed5 = main_uartwishbonebridge0_wishbone_we;
		end
	endcase
end
always @(*) begin
	builder_comb_array_muxed6 = 3'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_array_muxed6 = main_picorv32_idbus_cti;
		end
		default: begin
			builder_comb_array_muxed6 = main_uartwishbonebridge0_wishbone_cti;
		end
	endcase
end
always @(*) begin
	builder_comb_array_muxed7 = 2'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_array_muxed7 = main_picorv32_idbus_bte;
		end
		default: begin
			builder_comb_array_muxed7 = main_uartwishbonebridge0_wishbone_bte;
		end
	endcase
end
always @(*) begin
	builder_sync_array_muxed = 1'd0;
	case (main_mosi_sel)
		1'd0: begin
			builder_sync_array_muxed = main_mosi_data[0];
		end
		1'd1: begin
			builder_sync_array_muxed = main_mosi_data[1];
		end
		2'd2: begin
			builder_sync_array_muxed = main_mosi_data[2];
		end
		2'd3: begin
			builder_sync_array_muxed = main_mosi_data[3];
		end
		3'd4: begin
			builder_sync_array_muxed = main_mosi_data[4];
		end
		3'd5: begin
			builder_sync_array_muxed = main_mosi_data[5];
		end
		3'd6: begin
			builder_sync_array_muxed = main_mosi_data[6];
		end
		default: begin
			builder_sync_array_muxed = main_mosi_data[7];
		end
	endcase
end
assign sdrio_clk = sys_clk;
assign sdrio_clk_1 = sys_clk;
assign sdrio_clk_2 = sys_clk;
assign sdrio_clk_3 = sys_clk;
assign main_uartwishbonebridge0_rx_rx = builder_multiregimpl0_regs1;
assign main_uartwishbonebridge1_rx_rx = builder_multiregimpl1_regs1;
assign main_gpio_in_status = builder_multiregimpl2_regs1;
always @(*) begin
	main_la_in_status = 128'd0;
	main_la_in_status[0] = builder_multiregimpl3_regs1;
	main_la_in_status[1] = builder_multiregimpl4_regs1;
	main_la_in_status[2] = builder_multiregimpl5_regs1;
	main_la_in_status[3] = builder_multiregimpl6_regs1;
	main_la_in_status[4] = builder_multiregimpl7_regs1;
	main_la_in_status[5] = builder_multiregimpl8_regs1;
	main_la_in_status[6] = builder_multiregimpl9_regs1;
	main_la_in_status[7] = builder_multiregimpl10_regs1;
	main_la_in_status[8] = builder_multiregimpl11_regs1;
	main_la_in_status[9] = builder_multiregimpl12_regs1;
	main_la_in_status[10] = builder_multiregimpl13_regs1;
	main_la_in_status[11] = builder_multiregimpl14_regs1;
	main_la_in_status[12] = builder_multiregimpl15_regs1;
	main_la_in_status[13] = builder_multiregimpl16_regs1;
	main_la_in_status[14] = builder_multiregimpl17_regs1;
	main_la_in_status[15] = builder_multiregimpl18_regs1;
	main_la_in_status[16] = builder_multiregimpl19_regs1;
	main_la_in_status[17] = builder_multiregimpl20_regs1;
	main_la_in_status[18] = builder_multiregimpl21_regs1;
	main_la_in_status[19] = builder_multiregimpl22_regs1;
	main_la_in_status[20] = builder_multiregimpl23_regs1;
	main_la_in_status[21] = builder_multiregimpl24_regs1;
	main_la_in_status[22] = builder_multiregimpl25_regs1;
	main_la_in_status[23] = builder_multiregimpl26_regs1;
	main_la_in_status[24] = builder_multiregimpl27_regs1;
	main_la_in_status[25] = builder_multiregimpl28_regs1;
	main_la_in_status[26] = builder_multiregimpl29_regs1;
	main_la_in_status[27] = builder_multiregimpl30_regs1;
	main_la_in_status[28] = builder_multiregimpl31_regs1;
	main_la_in_status[29] = builder_multiregimpl32_regs1;
	main_la_in_status[30] = builder_multiregimpl33_regs1;
	main_la_in_status[31] = builder_multiregimpl34_regs1;
	main_la_in_status[32] = builder_multiregimpl35_regs1;
	main_la_in_status[33] = builder_multiregimpl36_regs1;
	main_la_in_status[34] = builder_multiregimpl37_regs1;
	main_la_in_status[35] = builder_multiregimpl38_regs1;
	main_la_in_status[36] = builder_multiregimpl39_regs1;
	main_la_in_status[37] = builder_multiregimpl40_regs1;
	main_la_in_status[38] = builder_multiregimpl41_regs1;
	main_la_in_status[39] = builder_multiregimpl42_regs1;
	main_la_in_status[40] = builder_multiregimpl43_regs1;
	main_la_in_status[41] = builder_multiregimpl44_regs1;
	main_la_in_status[42] = builder_multiregimpl45_regs1;
	main_la_in_status[43] = builder_multiregimpl46_regs1;
	main_la_in_status[44] = builder_multiregimpl47_regs1;
	main_la_in_status[45] = builder_multiregimpl48_regs1;
	main_la_in_status[46] = builder_multiregimpl49_regs1;
	main_la_in_status[47] = builder_multiregimpl50_regs1;
	main_la_in_status[48] = builder_multiregimpl51_regs1;
	main_la_in_status[49] = builder_multiregimpl52_regs1;
	main_la_in_status[50] = builder_multiregimpl53_regs1;
	main_la_in_status[51] = builder_multiregimpl54_regs1;
	main_la_in_status[52] = builder_multiregimpl55_regs1;
	main_la_in_status[53] = builder_multiregimpl56_regs1;
	main_la_in_status[54] = builder_multiregimpl57_regs1;
	main_la_in_status[55] = builder_multiregimpl58_regs1;
	main_la_in_status[56] = builder_multiregimpl59_regs1;
	main_la_in_status[57] = builder_multiregimpl60_regs1;
	main_la_in_status[58] = builder_multiregimpl61_regs1;
	main_la_in_status[59] = builder_multiregimpl62_regs1;
	main_la_in_status[60] = builder_multiregimpl63_regs1;
	main_la_in_status[61] = builder_multiregimpl64_regs1;
	main_la_in_status[62] = builder_multiregimpl65_regs1;
	main_la_in_status[63] = builder_multiregimpl66_regs1;
	main_la_in_status[64] = builder_multiregimpl67_regs1;
	main_la_in_status[65] = builder_multiregimpl68_regs1;
	main_la_in_status[66] = builder_multiregimpl69_regs1;
	main_la_in_status[67] = builder_multiregimpl70_regs1;
	main_la_in_status[68] = builder_multiregimpl71_regs1;
	main_la_in_status[69] = builder_multiregimpl72_regs1;
	main_la_in_status[70] = builder_multiregimpl73_regs1;
	main_la_in_status[71] = builder_multiregimpl74_regs1;
	main_la_in_status[72] = builder_multiregimpl75_regs1;
	main_la_in_status[73] = builder_multiregimpl76_regs1;
	main_la_in_status[74] = builder_multiregimpl77_regs1;
	main_la_in_status[75] = builder_multiregimpl78_regs1;
	main_la_in_status[76] = builder_multiregimpl79_regs1;
	main_la_in_status[77] = builder_multiregimpl80_regs1;
	main_la_in_status[78] = builder_multiregimpl81_regs1;
	main_la_in_status[79] = builder_multiregimpl82_regs1;
	main_la_in_status[80] = builder_multiregimpl83_regs1;
	main_la_in_status[81] = builder_multiregimpl84_regs1;
	main_la_in_status[82] = builder_multiregimpl85_regs1;
	main_la_in_status[83] = builder_multiregimpl86_regs1;
	main_la_in_status[84] = builder_multiregimpl87_regs1;
	main_la_in_status[85] = builder_multiregimpl88_regs1;
	main_la_in_status[86] = builder_multiregimpl89_regs1;
	main_la_in_status[87] = builder_multiregimpl90_regs1;
	main_la_in_status[88] = builder_multiregimpl91_regs1;
	main_la_in_status[89] = builder_multiregimpl92_regs1;
	main_la_in_status[90] = builder_multiregimpl93_regs1;
	main_la_in_status[91] = builder_multiregimpl94_regs1;
	main_la_in_status[92] = builder_multiregimpl95_regs1;
	main_la_in_status[93] = builder_multiregimpl96_regs1;
	main_la_in_status[94] = builder_multiregimpl97_regs1;
	main_la_in_status[95] = builder_multiregimpl98_regs1;
	main_la_in_status[96] = builder_multiregimpl99_regs1;
	main_la_in_status[97] = builder_multiregimpl100_regs1;
	main_la_in_status[98] = builder_multiregimpl101_regs1;
	main_la_in_status[99] = builder_multiregimpl102_regs1;
	main_la_in_status[100] = builder_multiregimpl103_regs1;
	main_la_in_status[101] = builder_multiregimpl104_regs1;
	main_la_in_status[102] = builder_multiregimpl105_regs1;
	main_la_in_status[103] = builder_multiregimpl106_regs1;
	main_la_in_status[104] = builder_multiregimpl107_regs1;
	main_la_in_status[105] = builder_multiregimpl108_regs1;
	main_la_in_status[106] = builder_multiregimpl109_regs1;
	main_la_in_status[107] = builder_multiregimpl110_regs1;
	main_la_in_status[108] = builder_multiregimpl111_regs1;
	main_la_in_status[109] = builder_multiregimpl112_regs1;
	main_la_in_status[110] = builder_multiregimpl113_regs1;
	main_la_in_status[111] = builder_multiregimpl114_regs1;
	main_la_in_status[112] = builder_multiregimpl115_regs1;
	main_la_in_status[113] = builder_multiregimpl116_regs1;
	main_la_in_status[114] = builder_multiregimpl117_regs1;
	main_la_in_status[115] = builder_multiregimpl118_regs1;
	main_la_in_status[116] = builder_multiregimpl119_regs1;
	main_la_in_status[117] = builder_multiregimpl120_regs1;
	main_la_in_status[118] = builder_multiregimpl121_regs1;
	main_la_in_status[119] = builder_multiregimpl122_regs1;
	main_la_in_status[120] = builder_multiregimpl123_regs1;
	main_la_in_status[121] = builder_multiregimpl124_regs1;
	main_la_in_status[122] = builder_multiregimpl125_regs1;
	main_la_in_status[123] = builder_multiregimpl126_regs1;
	main_la_in_status[124] = builder_multiregimpl127_regs1;
	main_la_in_status[125] = builder_multiregimpl128_regs1;
	main_la_in_status[126] = builder_multiregimpl129_regs1;
	main_la_in_status[127] = builder_multiregimpl130_regs1;
end
assign main_gpioin0_in_status = builder_multiregimpl131_regs1;
assign main_gpioin1_in_status = builder_multiregimpl132_regs1;
assign main_gpioin2_in_status = builder_multiregimpl133_regs1;
assign main_gpioin3_in_status = builder_multiregimpl134_regs1;
assign main_gpioin4_in_status = builder_multiregimpl135_regs1;
assign main_gpioin5_in_status = builder_multiregimpl136_regs1;

always @(posedge por_clk) begin
	main_int_rst <= core_rst;
end

always @(posedge sdrio_clk) begin
	flash_clk <= main_litespisdrphycore_clk;
	flash_io0_oeb <= main_litespisdrphycore_dq_oe;
	flash_io0_do <= main_litespisdrphycore_dq_o;
	main_litespisdrphycore_dq_i[1] <= flash_io1_di;
end

always @(posedge sys_clk) begin
	if ((main_bus_errors != 32'd4294967295)) begin
		if (main_bus_error) begin
			main_bus_errors <= (main_bus_errors + 1'd1);
		end
	end
	main_clk_divider1 <= (main_clk_divider1 + 1'd1);
	if (main_clk_rise) begin
		spi_clk <= main_clk_enable;
	end else begin
		if (main_clk_fall) begin
			main_clk_divider1 <= 1'd0;
			spi_clk <= 1'd0;
		end
	end
	spi_cs_n <= (~(main_cs & (main_xfer_enable | (main_cs_mode == 1'd1))));
	if (main_mosi_latch) begin
		main_mosi_data <= main_mosi;
		main_mosi_sel <= 3'd7;
	end else begin
		if (main_clk_fall) begin
			if (main_xfer_enable) begin
				spi_mosi <= builder_sync_array_muxed;
			end
			main_mosi_sel <= (main_mosi_sel - 1'd1);
		end
	end
	if (main_clk_rise) begin
		if (main_loopback) begin
			main_miso_data <= {main_miso_data, spi_mosi};
		end else begin
			main_miso_data <= {main_miso_data, spi_miso};
		end
	end
	if (main_miso_latch) begin
		main_miso <= main_miso_data;
	end
	builder_spimaster_state <= builder_spimaster_next_state;
	if (main_count_spimaster_next_value_ce) begin
		main_count <= main_count_spimaster_next_value;
	end
	main_bus_ack <= ((main_bus_stb & main_bus_cyc) & (~main_bus_ack));
	if (main_litespisdrphycore_sr_out_load) begin
		main_litespisdrphycore_sr_out <= (main_litespisdrphycore_sink_payload_data <<< (6'd32 - main_litespisdrphycore_sink_payload_len));
	end
	if (main_litespisdrphycore_sr_out_shift) begin
		case (main_litespisdrphycore_sink_payload_width)
			1'd1: begin
				main_litespisdrphycore_sr_out <= {main_litespisdrphycore_sr_out, main_litespisdrphycore0};
			end
			2'd2: begin
				main_litespisdrphycore_sr_out <= {main_litespisdrphycore_sr_out, main_litespisdrphycore1};
			end
			3'd4: begin
				main_litespisdrphycore_sr_out <= {main_litespisdrphycore_sr_out, main_litespisdrphycore2};
			end
			4'd8: begin
				main_litespisdrphycore_sr_out <= {main_litespisdrphycore_sr_out, main_litespisdrphycore3};
			end
		endcase
	end
	if (main_litespisdrphycore_sr_in_shift) begin
		case (main_litespisdrphycore_sink_payload_width)
			1'd1: begin
				main_litespisdrphycore_sr_in <= {main_litespisdrphycore_sr_in, main_litespisdrphycore_dq_i[1]};
			end
			2'd2: begin
				main_litespisdrphycore_sr_in <= {main_litespisdrphycore_sr_in, main_litespisdrphycore_dq_i[1:0]};
			end
			3'd4: begin
				main_litespisdrphycore_sr_in <= {main_litespisdrphycore_sr_in, main_litespisdrphycore_dq_i[1:0]};
			end
			4'd8: begin
				main_litespisdrphycore_sr_in <= {main_litespisdrphycore_sr_in, main_litespisdrphycore_dq_i[1:0]};
			end
		endcase
	end
	main_litespisdrphycore_posedge_reg <= main_litespisdrphycore_posedge;
	main_litespisdrphycore_posedge_reg2 <= main_litespisdrphycore_posedge_reg;
	if ((main_litespisdrphycore_en | main_litespisdrphycore_en_int)) begin
		if ((main_litespisdrphycore_cnt < main_litespisdrphycore_div)) begin
			main_litespisdrphycore_cnt <= (main_litespisdrphycore_cnt + 1'd1);
		end else begin
			main_litespisdrphycore_cnt <= 1'd0;
			main_litespisdrphycore_clk <= (~main_litespisdrphycore_clk);
		end
	end else begin
		main_litespisdrphycore_clk <= 1'd0;
		main_litespisdrphycore_cnt <= 1'd0;
	end
	if (main_litespisdrphycore_wait) begin
		if ((~main_litespisdrphycore_done)) begin
			main_litespisdrphycore_count <= (main_litespisdrphycore_count - 1'd1);
		end
	end else begin
		main_litespisdrphycore_count <= 4'd11;
	end
	builder_litespiphy_state <= builder_litespiphy_next_state;
	if (main_litespisdrphycore_sr_cnt_litespiphy_next_value_ce) begin
		main_litespisdrphycore_sr_cnt <= main_litespisdrphycore_sr_cnt_litespiphy_next_value;
	end
	case (builder_litespi_grant)
		1'd0: begin
			if ((~builder_litespi_request[0])) begin
				if (builder_litespi_request[1]) begin
					builder_litespi_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~builder_litespi_request[1])) begin
				if (builder_litespi_request[0]) begin
					builder_litespi_grant <= 1'd0;
				end
			end
		end
	endcase
	if (main_litespimmap_wait) begin
		if ((~main_litespimmap_done)) begin
			main_litespimmap_count <= (main_litespimmap_count - 1'd1);
		end
	end else begin
		main_litespimmap_count <= 9'd256;
	end
	builder_litespi_state <= builder_litespi_next_state;
	if (main_litespimmap_burst_cs_litespi_next_value_ce0) begin
		main_litespimmap_burst_cs <= main_litespimmap_burst_cs_litespi_next_value0;
	end
	if (main_litespimmap_burst_adr_litespi_next_value_ce1) begin
		main_litespimmap_burst_adr <= main_litespimmap_burst_adr_litespi_next_value1;
	end
	if (((~main_master_tx_fifo_source_valid) | main_master_tx_fifo_source_ready)) begin
		main_master_tx_fifo_source_valid <= main_master_tx_fifo_sink_valid;
		main_master_tx_fifo_source_first <= main_master_tx_fifo_sink_first;
		main_master_tx_fifo_source_last <= main_master_tx_fifo_sink_last;
		main_master_tx_fifo_source_payload_data <= main_master_tx_fifo_sink_payload_data;
		main_master_tx_fifo_source_payload_len <= main_master_tx_fifo_sink_payload_len;
		main_master_tx_fifo_source_payload_width <= main_master_tx_fifo_sink_payload_width;
		main_master_tx_fifo_source_payload_mask <= main_master_tx_fifo_sink_payload_mask;
	end
	if (((~main_master_rx_fifo_source_valid) | main_master_rx_fifo_source_ready)) begin
		main_master_rx_fifo_source_valid <= main_master_rx_fifo_sink_valid;
		main_master_rx_fifo_source_first <= main_master_rx_fifo_sink_first;
		main_master_rx_fifo_source_last <= main_master_rx_fifo_sink_last;
		main_master_rx_fifo_source_payload_data <= main_master_rx_fifo_sink_payload_data;
	end
	{main_uartwishbonebridge0_tx_tick, main_uartwishbonebridge0_tx_phase} <= 26'd49478023;
	if (main_uartwishbonebridge0_tx_enable) begin
		{main_uartwishbonebridge0_tx_tick, main_uartwishbonebridge0_tx_phase} <= (main_uartwishbonebridge0_tx_phase + 26'd49478023);
	end
	builder_uartwishbonebridge0_rs232phytx0_state <= builder_uartwishbonebridge0_rs232phytx0_next_state;
	if (main_uartwishbonebridge0_tx_count_uartwishbonebridge0_rs232phytx0_next_value_ce0) begin
		main_uartwishbonebridge0_tx_count <= main_uartwishbonebridge0_tx_count_uartwishbonebridge0_rs232phytx0_next_value0;
	end
	if (main_platform_obj_serial_dbg_tx_uartwishbonebridge0_rs232phytx0_next_value_ce1) begin
		serial_dbg_tx <= main_platform_obj_serial_dbg_tx_uartwishbonebridge0_rs232phytx0_next_value1;
	end
	if (main_uartwishbonebridge0_tx_data_uartwishbonebridge0_rs232phytx0_next_value_ce2) begin
		main_uartwishbonebridge0_tx_data <= main_uartwishbonebridge0_tx_data_uartwishbonebridge0_rs232phytx0_next_value2;
	end
	main_uartwishbonebridge0_rx_rx_d <= main_uartwishbonebridge0_rx_rx;
	{main_uartwishbonebridge0_rx_tick, main_uartwishbonebridge0_rx_phase} <= 32'd2147483648;
	if (main_uartwishbonebridge0_rx_enable) begin
		{main_uartwishbonebridge0_rx_tick, main_uartwishbonebridge0_rx_phase} <= (main_uartwishbonebridge0_rx_phase + 26'd49478023);
	end
	builder_uartwishbonebridge0_rs232phyrx0_state <= builder_uartwishbonebridge0_rs232phyrx0_next_state;
	if (main_uartwishbonebridge0_rx_count_uartwishbonebridge0_rs232phyrx0_next_value_ce0) begin
		main_uartwishbonebridge0_rx_count <= main_uartwishbonebridge0_rx_count_uartwishbonebridge0_rs232phyrx0_next_value0;
	end
	if (main_uartwishbonebridge0_rx_data_uartwishbonebridge0_rs232phyrx0_next_value_ce1) begin
		main_uartwishbonebridge0_rx_data <= main_uartwishbonebridge0_rx_data_uartwishbonebridge0_rs232phyrx0_next_value1;
	end
	builder_uartwishbonebridge0_state <= builder_uartwishbonebridge0_next_state;
	if (main_uartwishbonebridge0_bytes_count_uartwishbonebridge0_next_value_ce0) begin
		main_uartwishbonebridge0_bytes_count <= main_uartwishbonebridge0_bytes_count_uartwishbonebridge0_next_value0;
	end
	if (main_uartwishbonebridge0_words_count_uartwishbonebridge0_next_value_ce1) begin
		main_uartwishbonebridge0_words_count <= main_uartwishbonebridge0_words_count_uartwishbonebridge0_next_value1;
	end
	if (main_uartwishbonebridge0_cmd_uartwishbonebridge0_next_value_ce2) begin
		main_uartwishbonebridge0_cmd <= main_uartwishbonebridge0_cmd_uartwishbonebridge0_next_value2;
	end
	if (main_uartwishbonebridge0_length_uartwishbonebridge0_next_value_ce3) begin
		main_uartwishbonebridge0_length <= main_uartwishbonebridge0_length_uartwishbonebridge0_next_value3;
	end
	if (main_uartwishbonebridge0_address_uartwishbonebridge0_next_value_ce4) begin
		main_uartwishbonebridge0_address <= main_uartwishbonebridge0_address_uartwishbonebridge0_next_value4;
	end
	if (main_uartwishbonebridge0_incr_uartwishbonebridge0_next_value_ce5) begin
		main_uartwishbonebridge0_incr <= main_uartwishbonebridge0_incr_uartwishbonebridge0_next_value5;
	end
	if (main_uartwishbonebridge0_data_uartwishbonebridge0_next_value_ce6) begin
		main_uartwishbonebridge0_data <= main_uartwishbonebridge0_data_uartwishbonebridge0_next_value6;
	end
	if (main_uartwishbonebridge0_reset) begin
		main_uartwishbonebridge0_incr <= 1'd0;
		builder_uartwishbonebridge0_state <= 3'd0;
	end
	if (main_uartwishbonebridge0_wait) begin
		if ((~main_uartwishbonebridge0_done)) begin
			main_uartwishbonebridge0_count <= (main_uartwishbonebridge0_count - 1'd1);
		end
	end else begin
		main_uartwishbonebridge0_count <= 20'd1000000;
	end
	{main_uartwishbonebridge1_tx_tick, main_uartwishbonebridge1_tx_phase} <= 26'd49478023;
	if (main_uartwishbonebridge1_tx_enable) begin
		{main_uartwishbonebridge1_tx_tick, main_uartwishbonebridge1_tx_phase} <= (main_uartwishbonebridge1_tx_phase + 26'd49478023);
	end
	builder_uartwishbonebridge1_rs232phytx1_state <= builder_uartwishbonebridge1_rs232phytx1_next_state;
	if (main_uartwishbonebridge1_tx_count_uartwishbonebridge1_rs232phytx1_next_value_ce0) begin
		main_uartwishbonebridge1_tx_count <= main_uartwishbonebridge1_tx_count_uartwishbonebridge1_rs232phytx1_next_value0;
	end
	if (main_platform_obj_ser_tx_uartwishbonebridge1_rs232phytx1_next_value_ce1) begin
		ser_tx <= main_platform_obj_ser_tx_uartwishbonebridge1_rs232phytx1_next_value1;
	end
	if (main_uartwishbonebridge1_tx_data_uartwishbonebridge1_rs232phytx1_next_value_ce2) begin
		main_uartwishbonebridge1_tx_data <= main_uartwishbonebridge1_tx_data_uartwishbonebridge1_rs232phytx1_next_value2;
	end
	main_uartwishbonebridge1_rx_rx_d <= main_uartwishbonebridge1_rx_rx;
	{main_uartwishbonebridge1_rx_tick, main_uartwishbonebridge1_rx_phase} <= 32'd2147483648;
	if (main_uartwishbonebridge1_rx_enable) begin
		{main_uartwishbonebridge1_rx_tick, main_uartwishbonebridge1_rx_phase} <= (main_uartwishbonebridge1_rx_phase + 26'd49478023);
	end
	builder_uartwishbonebridge1_rs232phyrx1_state <= builder_uartwishbonebridge1_rs232phyrx1_next_state;
	if (main_uartwishbonebridge1_rx_count_uartwishbonebridge1_rs232phyrx1_next_value_ce0) begin
		main_uartwishbonebridge1_rx_count <= main_uartwishbonebridge1_rx_count_uartwishbonebridge1_rs232phyrx1_next_value0;
	end
	if (main_uartwishbonebridge1_rx_data_uartwishbonebridge1_rs232phyrx1_next_value_ce1) begin
		main_uartwishbonebridge1_rx_data <= main_uartwishbonebridge1_rx_data_uartwishbonebridge1_rs232phyrx1_next_value1;
	end
	builder_uartwishbonebridge1_state <= builder_uartwishbonebridge1_next_state;
	if (main_uartwishbonebridge1_bytes_count_uartwishbonebridge1_next_value_ce0) begin
		main_uartwishbonebridge1_bytes_count <= main_uartwishbonebridge1_bytes_count_uartwishbonebridge1_next_value0;
	end
	if (main_uartwishbonebridge1_words_count_uartwishbonebridge1_next_value_ce1) begin
		main_uartwishbonebridge1_words_count <= main_uartwishbonebridge1_words_count_uartwishbonebridge1_next_value1;
	end
	if (main_uartwishbonebridge1_cmd_uartwishbonebridge1_next_value_ce2) begin
		main_uartwishbonebridge1_cmd <= main_uartwishbonebridge1_cmd_uartwishbonebridge1_next_value2;
	end
	if (main_uartwishbonebridge1_length_uartwishbonebridge1_next_value_ce3) begin
		main_uartwishbonebridge1_length <= main_uartwishbonebridge1_length_uartwishbonebridge1_next_value3;
	end
	if (main_uartwishbonebridge1_address_uartwishbonebridge1_next_value_ce4) begin
		main_uartwishbonebridge1_address <= main_uartwishbonebridge1_address_uartwishbonebridge1_next_value4;
	end
	if (main_uartwishbonebridge1_incr_uartwishbonebridge1_next_value_ce5) begin
		main_uartwishbonebridge1_incr <= main_uartwishbonebridge1_incr_uartwishbonebridge1_next_value5;
	end
	if (main_uartwishbonebridge1_data_uartwishbonebridge1_next_value_ce6) begin
		main_uartwishbonebridge1_data <= main_uartwishbonebridge1_data_uartwishbonebridge1_next_value6;
	end
	if (main_uartwishbonebridge1_reset) begin
		main_uartwishbonebridge1_incr <= 1'd0;
		builder_uartwishbonebridge1_state <= 3'd0;
	end
	if (main_uartwishbonebridge1_wait) begin
		if ((~main_uartwishbonebridge1_done)) begin
			main_uartwishbonebridge1_count <= (main_uartwishbonebridge1_count - 1'd1);
		end
	end else begin
		main_uartwishbonebridge1_count <= 20'd1000000;
	end
	main_gpioin0_gpioin0_in_pads_n_d <= main_gpioin0_in_status;
	if (main_gpioin0_gpioin0_clear) begin
		main_gpioin0_gpioin0_pending <= 1'd0;
	end
	main_gpioin0_gpioin0_trigger_d <= main_gpioin0_gpioin0_trigger;
	if ((main_gpioin0_gpioin0_trigger & (~main_gpioin0_gpioin0_trigger_d))) begin
		main_gpioin0_gpioin0_pending <= 1'd1;
	end
	main_gpioin1_gpioin1_in_pads_n_d <= main_gpioin1_in_status;
	if (main_gpioin1_gpioin1_clear) begin
		main_gpioin1_gpioin1_pending <= 1'd0;
	end
	main_gpioin1_gpioin1_trigger_d <= main_gpioin1_gpioin1_trigger;
	if ((main_gpioin1_gpioin1_trigger & (~main_gpioin1_gpioin1_trigger_d))) begin
		main_gpioin1_gpioin1_pending <= 1'd1;
	end
	main_gpioin2_gpioin2_in_pads_n_d <= main_gpioin2_in_status;
	if (main_gpioin2_gpioin2_clear) begin
		main_gpioin2_gpioin2_pending <= 1'd0;
	end
	main_gpioin2_gpioin2_trigger_d <= main_gpioin2_gpioin2_trigger;
	if ((main_gpioin2_gpioin2_trigger & (~main_gpioin2_gpioin2_trigger_d))) begin
		main_gpioin2_gpioin2_pending <= 1'd1;
	end
	main_gpioin3_gpioin3_in_pads_n_d <= main_gpioin3_in_status;
	if (main_gpioin3_gpioin3_clear) begin
		main_gpioin3_gpioin3_pending <= 1'd0;
	end
	main_gpioin3_gpioin3_trigger_d <= main_gpioin3_gpioin3_trigger;
	if ((main_gpioin3_gpioin3_trigger & (~main_gpioin3_gpioin3_trigger_d))) begin
		main_gpioin3_gpioin3_pending <= 1'd1;
	end
	main_gpioin4_gpioin4_in_pads_n_d <= main_gpioin4_in_status;
	if (main_gpioin4_gpioin4_clear) begin
		main_gpioin4_gpioin4_pending <= 1'd0;
	end
	main_gpioin4_gpioin4_trigger_d <= main_gpioin4_gpioin4_trigger;
	if ((main_gpioin4_gpioin4_trigger & (~main_gpioin4_gpioin4_trigger_d))) begin
		main_gpioin4_gpioin4_pending <= 1'd1;
	end
	main_gpioin5_gpioin5_in_pads_n_d <= main_gpioin5_in_status;
	if (main_gpioin5_gpioin5_clear) begin
		main_gpioin5_gpioin5_pending <= 1'd0;
	end
	main_gpioin5_gpioin5_trigger_d <= main_gpioin5_gpioin5_trigger;
	if ((main_gpioin5_gpioin5_trigger & (~main_gpioin5_gpioin5_trigger_d))) begin
		main_gpioin5_gpioin5_pending <= 1'd1;
	end
	builder_state <= builder_next_state;
	case (builder_grant)
		1'd0: begin
			if ((~builder_request[0])) begin
				if (builder_request[1]) begin
					builder_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~builder_request[1])) begin
				if (builder_request[0]) begin
					builder_grant <= 1'd0;
				end
			end
		end
	endcase
	builder_slave_sel_r <= builder_slave_sel;
	if (builder_wait) begin
		if ((~builder_done)) begin
			builder_count <= (builder_count - 1'd1);
		end
	end else begin
		builder_count <= 20'd1000000;
	end
	builder_interface0_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank0_sel) begin
		case (builder_interface0_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface0_bank_bus_dat_r <= builder_csrbank0_reset0_w;
			end
			1'd1: begin
				builder_interface0_bank_bus_dat_r <= builder_csrbank0_scratch0_w;
			end
			2'd2: begin
				builder_interface0_bank_bus_dat_r <= builder_csrbank0_bus_errors_w;
			end
		endcase
	end
	if (builder_csrbank0_reset0_re) begin
		main_reset_storage[1:0] <= builder_csrbank0_reset0_r;
	end
	main_reset_re <= builder_csrbank0_reset0_re;
	if (builder_csrbank0_scratch0_re) begin
		main_scratch_storage[31:0] <= builder_csrbank0_scratch0_r;
	end
	main_scratch_re <= builder_csrbank0_scratch0_re;
	main_bus_errors_re <= builder_csrbank0_bus_errors_re;
	builder_interface1_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank1_sel) begin
		case (builder_interface1_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_mmap_dummy_bits0_w;
			end
			1'd1: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_master_cs0_w;
			end
			2'd2: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_master_phyconfig0_w;
			end
			2'd3: begin
				builder_interface1_bank_bus_dat_r <= main_master_rxtx_w;
			end
			3'd4: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_master_status_w;
			end
		endcase
	end
	if (builder_csrbank1_mmap_dummy_bits0_re) begin
		main_litespimmap_storage[7:0] <= builder_csrbank1_mmap_dummy_bits0_r;
	end
	main_litespimmap_re <= builder_csrbank1_mmap_dummy_bits0_re;
	if (builder_csrbank1_master_cs0_re) begin
		main_master_cs_storage <= builder_csrbank1_master_cs0_r;
	end
	main_master_cs_re <= builder_csrbank1_master_cs0_re;
	if (builder_csrbank1_master_phyconfig0_re) begin
		main_master_phyconfig_storage[23:0] <= builder_csrbank1_master_phyconfig0_r;
	end
	main_master_phyconfig_re <= builder_csrbank1_master_phyconfig0_re;
	main_master_status_re <= builder_csrbank1_master_status_re;
	builder_interface2_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank2_sel) begin
		case (builder_interface2_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface2_bank_bus_dat_r <= builder_csrbank2_clk_divisor0_w;
			end
		endcase
	end
	if (builder_csrbank2_clk_divisor0_re) begin
		main_litespisdrphycore_storage[7:0] <= builder_csrbank2_clk_divisor0_r;
	end
	main_litespisdrphycore_re <= builder_csrbank2_clk_divisor0_re;
	builder_interface3_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank3_sel) begin
		case (builder_interface3_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface3_bank_bus_dat_r <= builder_csrbank3_mode10_w;
			end
			1'd1: begin
				builder_interface3_bank_bus_dat_r <= builder_csrbank3_mode00_w;
			end
			2'd2: begin
				builder_interface3_bank_bus_dat_r <= builder_csrbank3_ien0_w;
			end
			2'd3: begin
				builder_interface3_bank_bus_dat_r <= builder_csrbank3_oe0_w;
			end
			3'd4: begin
				builder_interface3_bank_bus_dat_r <= builder_csrbank3_in_w;
			end
			3'd5: begin
				builder_interface3_bank_bus_dat_r <= builder_csrbank3_out0_w;
			end
		endcase
	end
	if (builder_csrbank3_mode10_re) begin
		main_gpio_mode1_storage <= builder_csrbank3_mode10_r;
	end
	main_gpio_mode1_re <= builder_csrbank3_mode10_re;
	if (builder_csrbank3_mode00_re) begin
		main_gpio_mode0_storage <= builder_csrbank3_mode00_r;
	end
	main_gpio_mode0_re <= builder_csrbank3_mode00_re;
	if (builder_csrbank3_ien0_re) begin
		main_gpio_ien_storage <= builder_csrbank3_ien0_r;
	end
	main_gpio_ien_re <= builder_csrbank3_ien0_re;
	if (builder_csrbank3_oe0_re) begin
		main_gpio_oe_storage <= builder_csrbank3_oe0_r;
	end
	main_gpio_oe_re <= builder_csrbank3_oe0_re;
	main_gpio_in_re <= builder_csrbank3_in_re;
	if (builder_csrbank3_out0_re) begin
		main_gpio_out_storage <= builder_csrbank3_out0_r;
	end
	main_gpio_out_re <= builder_csrbank3_out0_re;
	builder_interface4_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank4_sel) begin
		case (builder_interface4_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_ien3_w;
			end
			1'd1: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_ien2_w;
			end
			2'd2: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_ien1_w;
			end
			2'd3: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_ien0_w;
			end
			3'd4: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_oe3_w;
			end
			3'd5: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_oe2_w;
			end
			3'd6: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_oe1_w;
			end
			3'd7: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_oe0_w;
			end
			4'd8: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_in3_w;
			end
			4'd9: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_in2_w;
			end
			4'd10: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_in1_w;
			end
			4'd11: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_in0_w;
			end
			4'd12: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_out3_w;
			end
			4'd13: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_out2_w;
			end
			4'd14: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_out1_w;
			end
			4'd15: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_out0_w;
			end
		endcase
	end
	if (builder_csrbank4_ien3_re) begin
		main_la_ien_storage[127:96] <= builder_csrbank4_ien3_r;
	end
	if (builder_csrbank4_ien2_re) begin
		main_la_ien_storage[95:64] <= builder_csrbank4_ien2_r;
	end
	if (builder_csrbank4_ien1_re) begin
		main_la_ien_storage[63:32] <= builder_csrbank4_ien1_r;
	end
	if (builder_csrbank4_ien0_re) begin
		main_la_ien_storage[31:0] <= builder_csrbank4_ien0_r;
	end
	main_la_ien_re <= builder_csrbank4_ien0_re;
	if (builder_csrbank4_oe3_re) begin
		main_la_oe_storage[127:96] <= builder_csrbank4_oe3_r;
	end
	if (builder_csrbank4_oe2_re) begin
		main_la_oe_storage[95:64] <= builder_csrbank4_oe2_r;
	end
	if (builder_csrbank4_oe1_re) begin
		main_la_oe_storage[63:32] <= builder_csrbank4_oe1_r;
	end
	if (builder_csrbank4_oe0_re) begin
		main_la_oe_storage[31:0] <= builder_csrbank4_oe0_r;
	end
	main_la_oe_re <= builder_csrbank4_oe0_re;
	main_la_in_re <= builder_csrbank4_in0_re;
	if (builder_csrbank4_out3_re) begin
		main_la_out_storage[127:96] <= builder_csrbank4_out3_r;
	end
	if (builder_csrbank4_out2_re) begin
		main_la_out_storage[95:64] <= builder_csrbank4_out2_r;
	end
	if (builder_csrbank4_out1_re) begin
		main_la_out_storage[63:32] <= builder_csrbank4_out1_r;
	end
	if (builder_csrbank4_out0_re) begin
		main_la_out_storage[31:0] <= builder_csrbank4_out0_r;
	end
	main_la_out_re <= builder_csrbank4_out0_re;
	builder_interface5_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank5_sel) begin
		case (builder_interface5_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface5_bank_bus_dat_r <= builder_csrbank5_out0_w;
			end
		endcase
	end
	if (builder_csrbank5_out0_re) begin
		main_mprj_wb_iena_storage <= builder_csrbank5_out0_r;
	end
	main_mprj_wb_iena_re <= builder_csrbank5_out0_re;
	builder_interface6_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank6_sel) begin
		case (builder_interface6_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface6_bank_bus_dat_r <= builder_csrbank6_control0_w;
			end
			1'd1: begin
				builder_interface6_bank_bus_dat_r <= builder_csrbank6_status_w;
			end
			2'd2: begin
				builder_interface6_bank_bus_dat_r <= builder_csrbank6_mosi0_w;
			end
			2'd3: begin
				builder_interface6_bank_bus_dat_r <= builder_csrbank6_miso_w;
			end
			3'd4: begin
				builder_interface6_bank_bus_dat_r <= builder_csrbank6_cs0_w;
			end
			3'd5: begin
				builder_interface6_bank_bus_dat_r <= builder_csrbank6_loopback0_w;
			end
			3'd6: begin
				builder_interface6_bank_bus_dat_r <= builder_csrbank6_clk_divider0_w;
			end
		endcase
	end
	if (builder_csrbank6_control0_re) begin
		main_control_storage[15:0] <= builder_csrbank6_control0_r;
	end
	main_control_re <= builder_csrbank6_control0_re;
	main_status_re <= builder_csrbank6_status_re;
	if (builder_csrbank6_mosi0_re) begin
		main_mosi_storage[7:0] <= builder_csrbank6_mosi0_r;
	end
	main_mosi_re <= builder_csrbank6_mosi0_re;
	main_miso_re <= builder_csrbank6_miso_re;
	if (builder_csrbank6_cs0_re) begin
		main_cs_storage[16:0] <= builder_csrbank6_cs0_r;
	end
	main_cs_re <= builder_csrbank6_cs0_re;
	if (builder_csrbank6_loopback0_re) begin
		main_loopback_storage <= builder_csrbank6_loopback0_r;
	end
	main_loopback_re <= builder_csrbank6_loopback0_re;
	if (builder_csrbank6_clk_divider0_re) begin
		main_spimaster_storage[15:0] <= builder_csrbank6_clk_divider0_r;
	end
	main_spimaster_re <= builder_csrbank6_clk_divider0_re;
	builder_interface7_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank7_sel) begin
		case (builder_interface7_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface7_bank_bus_dat_r <= builder_csrbank7_in_w;
			end
			1'd1: begin
				builder_interface7_bank_bus_dat_r <= builder_csrbank7_mode0_w;
			end
			2'd2: begin
				builder_interface7_bank_bus_dat_r <= builder_csrbank7_edge0_w;
			end
			2'd3: begin
				builder_interface7_bank_bus_dat_r <= builder_csrbank7_ev_status_w;
			end
			3'd4: begin
				builder_interface7_bank_bus_dat_r <= builder_csrbank7_ev_pending_w;
			end
			3'd5: begin
				builder_interface7_bank_bus_dat_r <= builder_csrbank7_ev_enable0_w;
			end
		endcase
	end
	main_gpioin0_in_re <= builder_csrbank7_in_re;
	if (builder_csrbank7_mode0_re) begin
		main_gpioin0_gpioin0_mode_storage <= builder_csrbank7_mode0_r;
	end
	main_gpioin0_gpioin0_mode_re <= builder_csrbank7_mode0_re;
	if (builder_csrbank7_edge0_re) begin
		main_gpioin0_gpioin0_edge_storage <= builder_csrbank7_edge0_r;
	end
	main_gpioin0_gpioin0_edge_re <= builder_csrbank7_edge0_re;
	builder_gpioin0_status_re <= builder_csrbank7_ev_status_re;
	if (builder_csrbank7_ev_pending_re) begin
		builder_gpioin0_pending_r <= builder_csrbank7_ev_pending_r;
	end
	builder_gpioin0_pending_re <= builder_csrbank7_ev_pending_re;
	if (builder_csrbank7_ev_enable0_re) begin
		builder_gpioin0_enable_storage <= builder_csrbank7_ev_enable0_r;
	end
	builder_gpioin0_enable_re <= builder_csrbank7_ev_enable0_re;
	builder_interface8_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank8_sel) begin
		case (builder_interface8_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface8_bank_bus_dat_r <= builder_csrbank8_in_w;
			end
			1'd1: begin
				builder_interface8_bank_bus_dat_r <= builder_csrbank8_mode0_w;
			end
			2'd2: begin
				builder_interface8_bank_bus_dat_r <= builder_csrbank8_edge0_w;
			end
			2'd3: begin
				builder_interface8_bank_bus_dat_r <= builder_csrbank8_ev_status_w;
			end
			3'd4: begin
				builder_interface8_bank_bus_dat_r <= builder_csrbank8_ev_pending_w;
			end
			3'd5: begin
				builder_interface8_bank_bus_dat_r <= builder_csrbank8_ev_enable0_w;
			end
		endcase
	end
	main_gpioin1_in_re <= builder_csrbank8_in_re;
	if (builder_csrbank8_mode0_re) begin
		main_gpioin1_gpioin1_mode_storage <= builder_csrbank8_mode0_r;
	end
	main_gpioin1_gpioin1_mode_re <= builder_csrbank8_mode0_re;
	if (builder_csrbank8_edge0_re) begin
		main_gpioin1_gpioin1_edge_storage <= builder_csrbank8_edge0_r;
	end
	main_gpioin1_gpioin1_edge_re <= builder_csrbank8_edge0_re;
	builder_gpioin1_status_re <= builder_csrbank8_ev_status_re;
	if (builder_csrbank8_ev_pending_re) begin
		builder_gpioin1_pending_r <= builder_csrbank8_ev_pending_r;
	end
	builder_gpioin1_pending_re <= builder_csrbank8_ev_pending_re;
	if (builder_csrbank8_ev_enable0_re) begin
		builder_gpioin1_enable_storage <= builder_csrbank8_ev_enable0_r;
	end
	builder_gpioin1_enable_re <= builder_csrbank8_ev_enable0_re;
	builder_interface9_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank9_sel) begin
		case (builder_interface9_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface9_bank_bus_dat_r <= builder_csrbank9_in_w;
			end
			1'd1: begin
				builder_interface9_bank_bus_dat_r <= builder_csrbank9_mode0_w;
			end
			2'd2: begin
				builder_interface9_bank_bus_dat_r <= builder_csrbank9_edge0_w;
			end
			2'd3: begin
				builder_interface9_bank_bus_dat_r <= builder_csrbank9_ev_status_w;
			end
			3'd4: begin
				builder_interface9_bank_bus_dat_r <= builder_csrbank9_ev_pending_w;
			end
			3'd5: begin
				builder_interface9_bank_bus_dat_r <= builder_csrbank9_ev_enable0_w;
			end
		endcase
	end
	main_gpioin2_in_re <= builder_csrbank9_in_re;
	if (builder_csrbank9_mode0_re) begin
		main_gpioin2_gpioin2_mode_storage <= builder_csrbank9_mode0_r;
	end
	main_gpioin2_gpioin2_mode_re <= builder_csrbank9_mode0_re;
	if (builder_csrbank9_edge0_re) begin
		main_gpioin2_gpioin2_edge_storage <= builder_csrbank9_edge0_r;
	end
	main_gpioin2_gpioin2_edge_re <= builder_csrbank9_edge0_re;
	builder_gpioin2_status_re <= builder_csrbank9_ev_status_re;
	if (builder_csrbank9_ev_pending_re) begin
		builder_gpioin2_pending_r <= builder_csrbank9_ev_pending_r;
	end
	builder_gpioin2_pending_re <= builder_csrbank9_ev_pending_re;
	if (builder_csrbank9_ev_enable0_re) begin
		builder_gpioin2_enable_storage <= builder_csrbank9_ev_enable0_r;
	end
	builder_gpioin2_enable_re <= builder_csrbank9_ev_enable0_re;
	builder_interface10_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank10_sel) begin
		case (builder_interface10_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface10_bank_bus_dat_r <= builder_csrbank10_in_w;
			end
			1'd1: begin
				builder_interface10_bank_bus_dat_r <= builder_csrbank10_mode0_w;
			end
			2'd2: begin
				builder_interface10_bank_bus_dat_r <= builder_csrbank10_edge0_w;
			end
			2'd3: begin
				builder_interface10_bank_bus_dat_r <= builder_csrbank10_ev_status_w;
			end
			3'd4: begin
				builder_interface10_bank_bus_dat_r <= builder_csrbank10_ev_pending_w;
			end
			3'd5: begin
				builder_interface10_bank_bus_dat_r <= builder_csrbank10_ev_enable0_w;
			end
		endcase
	end
	main_gpioin3_in_re <= builder_csrbank10_in_re;
	if (builder_csrbank10_mode0_re) begin
		main_gpioin3_gpioin3_mode_storage <= builder_csrbank10_mode0_r;
	end
	main_gpioin3_gpioin3_mode_re <= builder_csrbank10_mode0_re;
	if (builder_csrbank10_edge0_re) begin
		main_gpioin3_gpioin3_edge_storage <= builder_csrbank10_edge0_r;
	end
	main_gpioin3_gpioin3_edge_re <= builder_csrbank10_edge0_re;
	builder_gpioin3_status_re <= builder_csrbank10_ev_status_re;
	if (builder_csrbank10_ev_pending_re) begin
		builder_gpioin3_pending_r <= builder_csrbank10_ev_pending_r;
	end
	builder_gpioin3_pending_re <= builder_csrbank10_ev_pending_re;
	if (builder_csrbank10_ev_enable0_re) begin
		builder_gpioin3_enable_storage <= builder_csrbank10_ev_enable0_r;
	end
	builder_gpioin3_enable_re <= builder_csrbank10_ev_enable0_re;
	builder_interface11_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank11_sel) begin
		case (builder_interface11_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface11_bank_bus_dat_r <= builder_csrbank11_in_w;
			end
			1'd1: begin
				builder_interface11_bank_bus_dat_r <= builder_csrbank11_mode0_w;
			end
			2'd2: begin
				builder_interface11_bank_bus_dat_r <= builder_csrbank11_edge0_w;
			end
			2'd3: begin
				builder_interface11_bank_bus_dat_r <= builder_csrbank11_ev_status_w;
			end
			3'd4: begin
				builder_interface11_bank_bus_dat_r <= builder_csrbank11_ev_pending_w;
			end
			3'd5: begin
				builder_interface11_bank_bus_dat_r <= builder_csrbank11_ev_enable0_w;
			end
		endcase
	end
	main_gpioin4_in_re <= builder_csrbank11_in_re;
	if (builder_csrbank11_mode0_re) begin
		main_gpioin4_gpioin4_mode_storage <= builder_csrbank11_mode0_r;
	end
	main_gpioin4_gpioin4_mode_re <= builder_csrbank11_mode0_re;
	if (builder_csrbank11_edge0_re) begin
		main_gpioin4_gpioin4_edge_storage <= builder_csrbank11_edge0_r;
	end
	main_gpioin4_gpioin4_edge_re <= builder_csrbank11_edge0_re;
	builder_gpioin4_status_re <= builder_csrbank11_ev_status_re;
	if (builder_csrbank11_ev_pending_re) begin
		builder_gpioin4_pending_r <= builder_csrbank11_ev_pending_r;
	end
	builder_gpioin4_pending_re <= builder_csrbank11_ev_pending_re;
	if (builder_csrbank11_ev_enable0_re) begin
		builder_gpioin4_enable_storage <= builder_csrbank11_ev_enable0_r;
	end
	builder_gpioin4_enable_re <= builder_csrbank11_ev_enable0_re;
	builder_interface12_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank12_sel) begin
		case (builder_interface12_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface12_bank_bus_dat_r <= builder_csrbank12_in_w;
			end
			1'd1: begin
				builder_interface12_bank_bus_dat_r <= builder_csrbank12_mode0_w;
			end
			2'd2: begin
				builder_interface12_bank_bus_dat_r <= builder_csrbank12_edge0_w;
			end
			2'd3: begin
				builder_interface12_bank_bus_dat_r <= builder_csrbank12_ev_status_w;
			end
			3'd4: begin
				builder_interface12_bank_bus_dat_r <= builder_csrbank12_ev_pending_w;
			end
			3'd5: begin
				builder_interface12_bank_bus_dat_r <= builder_csrbank12_ev_enable0_w;
			end
		endcase
	end
	main_gpioin5_in_re <= builder_csrbank12_in_re;
	if (builder_csrbank12_mode0_re) begin
		main_gpioin5_gpioin5_mode_storage <= builder_csrbank12_mode0_r;
	end
	main_gpioin5_gpioin5_mode_re <= builder_csrbank12_mode0_re;
	if (builder_csrbank12_edge0_re) begin
		main_gpioin5_gpioin5_edge_storage <= builder_csrbank12_edge0_r;
	end
	main_gpioin5_gpioin5_edge_re <= builder_csrbank12_edge0_re;
	builder_gpioin5_status_re <= builder_csrbank12_ev_status_re;
	if (builder_csrbank12_ev_pending_re) begin
		builder_gpioin5_pending_r <= builder_csrbank12_ev_pending_r;
	end
	builder_gpioin5_pending_re <= builder_csrbank12_ev_pending_re;
	if (builder_csrbank12_ev_enable0_re) begin
		builder_gpioin5_enable_storage <= builder_csrbank12_ev_enable0_r;
	end
	builder_gpioin5_enable_re <= builder_csrbank12_ev_enable0_re;
	builder_interface13_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank13_sel) begin
		case (builder_interface13_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface13_bank_bus_dat_r <= builder_csrbank13_out0_w;
			end
		endcase
	end
	if (builder_csrbank13_out0_re) begin
		main_user_irq_ena_storage[2:0] <= builder_csrbank13_out0_r;
	end
	main_user_irq_ena_re <= builder_csrbank13_out0_re;
	if (sys_rst) begin
		main_reset_storage <= 2'd0;
		main_reset_re <= 1'd0;
		main_scratch_storage <= 32'd305419896;
		main_scratch_re <= 1'd0;
		main_bus_errors_re <= 1'd0;
		main_bus_errors <= 32'd0;
		spi_clk <= 1'd0;
		spi_cs_n <= 1'd0;
		spi_mosi <= 1'd0;
		main_miso <= 8'd0;
		main_control_storage <= 16'd0;
		main_control_re <= 1'd0;
		main_status_re <= 1'd0;
		main_mosi_re <= 1'd0;
		main_miso_re <= 1'd0;
		main_cs_storage <= 17'd1;
		main_cs_re <= 1'd0;
		main_loopback_storage <= 1'd0;
		main_loopback_re <= 1'd0;
		main_count <= 3'd0;
		main_clk_divider1 <= 16'd0;
		main_mosi_data <= 8'd0;
		main_mosi_sel <= 3'd0;
		main_miso_data <= 8'd0;
		main_spimaster_storage <= 16'd100;
		main_spimaster_re <= 1'd0;
		main_bus_ack <= 1'd0;
		main_litespisdrphycore_storage <= 8'd1;
		main_litespisdrphycore_re <= 1'd0;
		main_litespisdrphycore_cnt <= 8'd0;
		main_litespisdrphycore_clk <= 1'd0;
		main_litespisdrphycore_posedge_reg <= 1'd0;
		main_litespisdrphycore_posedge_reg2 <= 1'd0;
		main_litespisdrphycore_count <= 4'd11;
		main_litespimmap_burst_cs <= 1'd0;
		main_litespimmap_count <= 9'd256;
		main_litespimmap_storage <= 8'd0;
		main_litespimmap_re <= 1'd0;
		main_master_cs_storage <= 1'd0;
		main_master_cs_re <= 1'd0;
		main_master_phyconfig_storage <= 24'd0;
		main_master_phyconfig_re <= 1'd0;
		main_master_status_re <= 1'd0;
		main_master_tx_fifo_source_valid <= 1'd0;
		main_master_tx_fifo_source_payload_data <= 32'd0;
		main_master_tx_fifo_source_payload_len <= 6'd0;
		main_master_tx_fifo_source_payload_width <= 4'd0;
		main_master_tx_fifo_source_payload_mask <= 8'd0;
		main_master_rx_fifo_source_valid <= 1'd0;
		main_master_rx_fifo_source_payload_data <= 32'd0;
		serial_dbg_tx <= 1'd1;
		main_uartwishbonebridge0_tx_tick <= 1'd0;
		main_uartwishbonebridge0_rx_tick <= 1'd0;
		main_uartwishbonebridge0_rx_rx_d <= 1'd0;
		main_uartwishbonebridge0_incr <= 1'd0;
		main_uartwishbonebridge0_count <= 20'd1000000;
		ser_tx <= 1'd1;
		main_uartwishbonebridge1_tx_tick <= 1'd0;
		main_uartwishbonebridge1_rx_tick <= 1'd0;
		main_uartwishbonebridge1_rx_rx_d <= 1'd0;
		main_uartwishbonebridge1_incr <= 1'd0;
		main_uartwishbonebridge1_count <= 20'd1000000;
		main_gpio_mode1_storage <= 1'd0;
		main_gpio_mode1_re <= 1'd0;
		main_gpio_mode0_storage <= 1'd0;
		main_gpio_mode0_re <= 1'd0;
		main_gpio_ien_storage <= 1'd0;
		main_gpio_ien_re <= 1'd0;
		main_gpio_oe_storage <= 1'd0;
		main_gpio_oe_re <= 1'd0;
		main_gpio_in_re <= 1'd0;
		main_gpio_out_storage <= 1'd0;
		main_gpio_out_re <= 1'd0;
		main_la_ien_storage <= 128'd0;
		main_la_ien_re <= 1'd0;
		main_la_oe_storage <= 128'd0;
		main_la_oe_re <= 1'd0;
		main_la_in_re <= 1'd0;
		main_la_out_storage <= 128'd0;
		main_la_out_re <= 1'd0;
		main_mprj_wb_iena_storage <= 1'd0;
		main_mprj_wb_iena_re <= 1'd0;
		main_user_irq_ena_storage <= 3'd0;
		main_user_irq_ena_re <= 1'd0;
		main_gpioin0_in_re <= 1'd0;
		main_gpioin0_gpioin0_mode_storage <= 1'd0;
		main_gpioin0_gpioin0_mode_re <= 1'd0;
		main_gpioin0_gpioin0_edge_storage <= 1'd0;
		main_gpioin0_gpioin0_edge_re <= 1'd0;
		main_gpioin0_gpioin0_in_pads_n_d <= 1'd0;
		main_gpioin0_gpioin0_pending <= 1'd0;
		main_gpioin0_gpioin0_trigger_d <= 1'd0;
		main_gpioin1_in_re <= 1'd0;
		main_gpioin1_gpioin1_mode_storage <= 1'd0;
		main_gpioin1_gpioin1_mode_re <= 1'd0;
		main_gpioin1_gpioin1_edge_storage <= 1'd0;
		main_gpioin1_gpioin1_edge_re <= 1'd0;
		main_gpioin1_gpioin1_in_pads_n_d <= 1'd0;
		main_gpioin1_gpioin1_pending <= 1'd0;
		main_gpioin1_gpioin1_trigger_d <= 1'd0;
		main_gpioin2_in_re <= 1'd0;
		main_gpioin2_gpioin2_mode_storage <= 1'd0;
		main_gpioin2_gpioin2_mode_re <= 1'd0;
		main_gpioin2_gpioin2_edge_storage <= 1'd0;
		main_gpioin2_gpioin2_edge_re <= 1'd0;
		main_gpioin2_gpioin2_in_pads_n_d <= 1'd0;
		main_gpioin2_gpioin2_pending <= 1'd0;
		main_gpioin2_gpioin2_trigger_d <= 1'd0;
		main_gpioin3_in_re <= 1'd0;
		main_gpioin3_gpioin3_mode_storage <= 1'd0;
		main_gpioin3_gpioin3_mode_re <= 1'd0;
		main_gpioin3_gpioin3_edge_storage <= 1'd0;
		main_gpioin3_gpioin3_edge_re <= 1'd0;
		main_gpioin3_gpioin3_in_pads_n_d <= 1'd0;
		main_gpioin3_gpioin3_pending <= 1'd0;
		main_gpioin3_gpioin3_trigger_d <= 1'd0;
		main_gpioin4_in_re <= 1'd0;
		main_gpioin4_gpioin4_mode_storage <= 1'd0;
		main_gpioin4_gpioin4_mode_re <= 1'd0;
		main_gpioin4_gpioin4_edge_storage <= 1'd0;
		main_gpioin4_gpioin4_edge_re <= 1'd0;
		main_gpioin4_gpioin4_in_pads_n_d <= 1'd0;
		main_gpioin4_gpioin4_pending <= 1'd0;
		main_gpioin4_gpioin4_trigger_d <= 1'd0;
		main_gpioin5_in_re <= 1'd0;
		main_gpioin5_gpioin5_mode_storage <= 1'd0;
		main_gpioin5_gpioin5_mode_re <= 1'd0;
		main_gpioin5_gpioin5_edge_storage <= 1'd0;
		main_gpioin5_gpioin5_edge_re <= 1'd0;
		main_gpioin5_gpioin5_in_pads_n_d <= 1'd0;
		main_gpioin5_gpioin5_pending <= 1'd0;
		main_gpioin5_gpioin5_trigger_d <= 1'd0;
		builder_spimaster_state <= 2'd0;
		builder_litespiphy_state <= 2'd0;
		builder_litespi_grant <= 1'd0;
		builder_litespi_state <= 4'd0;
		builder_uartwishbonebridge0_rs232phytx0_state <= 1'd0;
		builder_uartwishbonebridge0_rs232phyrx0_state <= 1'd0;
		builder_uartwishbonebridge0_state <= 3'd0;
		builder_uartwishbonebridge1_rs232phytx1_state <= 1'd0;
		builder_uartwishbonebridge1_rs232phyrx1_state <= 1'd0;
		builder_uartwishbonebridge1_state <= 3'd0;
		builder_gpioin0_status_re <= 1'd0;
		builder_gpioin0_pending_re <= 1'd0;
		builder_gpioin0_pending_r <= 1'd0;
		builder_gpioin0_enable_storage <= 1'd0;
		builder_gpioin0_enable_re <= 1'd0;
		builder_gpioin1_status_re <= 1'd0;
		builder_gpioin1_pending_re <= 1'd0;
		builder_gpioin1_pending_r <= 1'd0;
		builder_gpioin1_enable_storage <= 1'd0;
		builder_gpioin1_enable_re <= 1'd0;
		builder_gpioin2_status_re <= 1'd0;
		builder_gpioin2_pending_re <= 1'd0;
		builder_gpioin2_pending_r <= 1'd0;
		builder_gpioin2_enable_storage <= 1'd0;
		builder_gpioin2_enable_re <= 1'd0;
		builder_gpioin3_status_re <= 1'd0;
		builder_gpioin3_pending_re <= 1'd0;
		builder_gpioin3_pending_r <= 1'd0;
		builder_gpioin3_enable_storage <= 1'd0;
		builder_gpioin3_enable_re <= 1'd0;
		builder_gpioin4_status_re <= 1'd0;
		builder_gpioin4_pending_re <= 1'd0;
		builder_gpioin4_pending_r <= 1'd0;
		builder_gpioin4_enable_storage <= 1'd0;
		builder_gpioin4_enable_re <= 1'd0;
		builder_gpioin5_status_re <= 1'd0;
		builder_gpioin5_pending_re <= 1'd0;
		builder_gpioin5_pending_r <= 1'd0;
		builder_gpioin5_enable_storage <= 1'd0;
		builder_gpioin5_enable_re <= 1'd0;
		builder_grant <= 1'd0;
		builder_slave_sel_r <= 3'd0;
		builder_count <= 20'd1000000;
		builder_state <= 1'd0;
	end
	builder_multiregimpl0_regs0 <= serial_dbg_rx;
	builder_multiregimpl0_regs1 <= builder_multiregimpl0_regs0;
	builder_multiregimpl1_regs0 <= ser_rx;
	builder_multiregimpl1_regs1 <= builder_multiregimpl1_regs0;
	builder_multiregimpl2_regs0 <= gpio_in_pad;
	builder_multiregimpl2_regs1 <= builder_multiregimpl2_regs0;
	builder_multiregimpl3_regs0 <= la_input[0];
	builder_multiregimpl3_regs1 <= builder_multiregimpl3_regs0;
	builder_multiregimpl4_regs0 <= la_input[1];
	builder_multiregimpl4_regs1 <= builder_multiregimpl4_regs0;
	builder_multiregimpl5_regs0 <= la_input[2];
	builder_multiregimpl5_regs1 <= builder_multiregimpl5_regs0;
	builder_multiregimpl6_regs0 <= la_input[3];
	builder_multiregimpl6_regs1 <= builder_multiregimpl6_regs0;
	builder_multiregimpl7_regs0 <= la_input[4];
	builder_multiregimpl7_regs1 <= builder_multiregimpl7_regs0;
	builder_multiregimpl8_regs0 <= la_input[5];
	builder_multiregimpl8_regs1 <= builder_multiregimpl8_regs0;
	builder_multiregimpl9_regs0 <= la_input[6];
	builder_multiregimpl9_regs1 <= builder_multiregimpl9_regs0;
	builder_multiregimpl10_regs0 <= la_input[7];
	builder_multiregimpl10_regs1 <= builder_multiregimpl10_regs0;
	builder_multiregimpl11_regs0 <= la_input[8];
	builder_multiregimpl11_regs1 <= builder_multiregimpl11_regs0;
	builder_multiregimpl12_regs0 <= la_input[9];
	builder_multiregimpl12_regs1 <= builder_multiregimpl12_regs0;
	builder_multiregimpl13_regs0 <= la_input[10];
	builder_multiregimpl13_regs1 <= builder_multiregimpl13_regs0;
	builder_multiregimpl14_regs0 <= la_input[11];
	builder_multiregimpl14_regs1 <= builder_multiregimpl14_regs0;
	builder_multiregimpl15_regs0 <= la_input[12];
	builder_multiregimpl15_regs1 <= builder_multiregimpl15_regs0;
	builder_multiregimpl16_regs0 <= la_input[13];
	builder_multiregimpl16_regs1 <= builder_multiregimpl16_regs0;
	builder_multiregimpl17_regs0 <= la_input[14];
	builder_multiregimpl17_regs1 <= builder_multiregimpl17_regs0;
	builder_multiregimpl18_regs0 <= la_input[15];
	builder_multiregimpl18_regs1 <= builder_multiregimpl18_regs0;
	builder_multiregimpl19_regs0 <= la_input[16];
	builder_multiregimpl19_regs1 <= builder_multiregimpl19_regs0;
	builder_multiregimpl20_regs0 <= la_input[17];
	builder_multiregimpl20_regs1 <= builder_multiregimpl20_regs0;
	builder_multiregimpl21_regs0 <= la_input[18];
	builder_multiregimpl21_regs1 <= builder_multiregimpl21_regs0;
	builder_multiregimpl22_regs0 <= la_input[19];
	builder_multiregimpl22_regs1 <= builder_multiregimpl22_regs0;
	builder_multiregimpl23_regs0 <= la_input[20];
	builder_multiregimpl23_regs1 <= builder_multiregimpl23_regs0;
	builder_multiregimpl24_regs0 <= la_input[21];
	builder_multiregimpl24_regs1 <= builder_multiregimpl24_regs0;
	builder_multiregimpl25_regs0 <= la_input[22];
	builder_multiregimpl25_regs1 <= builder_multiregimpl25_regs0;
	builder_multiregimpl26_regs0 <= la_input[23];
	builder_multiregimpl26_regs1 <= builder_multiregimpl26_regs0;
	builder_multiregimpl27_regs0 <= la_input[24];
	builder_multiregimpl27_regs1 <= builder_multiregimpl27_regs0;
	builder_multiregimpl28_regs0 <= la_input[25];
	builder_multiregimpl28_regs1 <= builder_multiregimpl28_regs0;
	builder_multiregimpl29_regs0 <= la_input[26];
	builder_multiregimpl29_regs1 <= builder_multiregimpl29_regs0;
	builder_multiregimpl30_regs0 <= la_input[27];
	builder_multiregimpl30_regs1 <= builder_multiregimpl30_regs0;
	builder_multiregimpl31_regs0 <= la_input[28];
	builder_multiregimpl31_regs1 <= builder_multiregimpl31_regs0;
	builder_multiregimpl32_regs0 <= la_input[29];
	builder_multiregimpl32_regs1 <= builder_multiregimpl32_regs0;
	builder_multiregimpl33_regs0 <= la_input[30];
	builder_multiregimpl33_regs1 <= builder_multiregimpl33_regs0;
	builder_multiregimpl34_regs0 <= la_input[31];
	builder_multiregimpl34_regs1 <= builder_multiregimpl34_regs0;
	builder_multiregimpl35_regs0 <= la_input[32];
	builder_multiregimpl35_regs1 <= builder_multiregimpl35_regs0;
	builder_multiregimpl36_regs0 <= la_input[33];
	builder_multiregimpl36_regs1 <= builder_multiregimpl36_regs0;
	builder_multiregimpl37_regs0 <= la_input[34];
	builder_multiregimpl37_regs1 <= builder_multiregimpl37_regs0;
	builder_multiregimpl38_regs0 <= la_input[35];
	builder_multiregimpl38_regs1 <= builder_multiregimpl38_regs0;
	builder_multiregimpl39_regs0 <= la_input[36];
	builder_multiregimpl39_regs1 <= builder_multiregimpl39_regs0;
	builder_multiregimpl40_regs0 <= la_input[37];
	builder_multiregimpl40_regs1 <= builder_multiregimpl40_regs0;
	builder_multiregimpl41_regs0 <= la_input[38];
	builder_multiregimpl41_regs1 <= builder_multiregimpl41_regs0;
	builder_multiregimpl42_regs0 <= la_input[39];
	builder_multiregimpl42_regs1 <= builder_multiregimpl42_regs0;
	builder_multiregimpl43_regs0 <= la_input[40];
	builder_multiregimpl43_regs1 <= builder_multiregimpl43_regs0;
	builder_multiregimpl44_regs0 <= la_input[41];
	builder_multiregimpl44_regs1 <= builder_multiregimpl44_regs0;
	builder_multiregimpl45_regs0 <= la_input[42];
	builder_multiregimpl45_regs1 <= builder_multiregimpl45_regs0;
	builder_multiregimpl46_regs0 <= la_input[43];
	builder_multiregimpl46_regs1 <= builder_multiregimpl46_regs0;
	builder_multiregimpl47_regs0 <= la_input[44];
	builder_multiregimpl47_regs1 <= builder_multiregimpl47_regs0;
	builder_multiregimpl48_regs0 <= la_input[45];
	builder_multiregimpl48_regs1 <= builder_multiregimpl48_regs0;
	builder_multiregimpl49_regs0 <= la_input[46];
	builder_multiregimpl49_regs1 <= builder_multiregimpl49_regs0;
	builder_multiregimpl50_regs0 <= la_input[47];
	builder_multiregimpl50_regs1 <= builder_multiregimpl50_regs0;
	builder_multiregimpl51_regs0 <= la_input[48];
	builder_multiregimpl51_regs1 <= builder_multiregimpl51_regs0;
	builder_multiregimpl52_regs0 <= la_input[49];
	builder_multiregimpl52_regs1 <= builder_multiregimpl52_regs0;
	builder_multiregimpl53_regs0 <= la_input[50];
	builder_multiregimpl53_regs1 <= builder_multiregimpl53_regs0;
	builder_multiregimpl54_regs0 <= la_input[51];
	builder_multiregimpl54_regs1 <= builder_multiregimpl54_regs0;
	builder_multiregimpl55_regs0 <= la_input[52];
	builder_multiregimpl55_regs1 <= builder_multiregimpl55_regs0;
	builder_multiregimpl56_regs0 <= la_input[53];
	builder_multiregimpl56_regs1 <= builder_multiregimpl56_regs0;
	builder_multiregimpl57_regs0 <= la_input[54];
	builder_multiregimpl57_regs1 <= builder_multiregimpl57_regs0;
	builder_multiregimpl58_regs0 <= la_input[55];
	builder_multiregimpl58_regs1 <= builder_multiregimpl58_regs0;
	builder_multiregimpl59_regs0 <= la_input[56];
	builder_multiregimpl59_regs1 <= builder_multiregimpl59_regs0;
	builder_multiregimpl60_regs0 <= la_input[57];
	builder_multiregimpl60_regs1 <= builder_multiregimpl60_regs0;
	builder_multiregimpl61_regs0 <= la_input[58];
	builder_multiregimpl61_regs1 <= builder_multiregimpl61_regs0;
	builder_multiregimpl62_regs0 <= la_input[59];
	builder_multiregimpl62_regs1 <= builder_multiregimpl62_regs0;
	builder_multiregimpl63_regs0 <= la_input[60];
	builder_multiregimpl63_regs1 <= builder_multiregimpl63_regs0;
	builder_multiregimpl64_regs0 <= la_input[61];
	builder_multiregimpl64_regs1 <= builder_multiregimpl64_regs0;
	builder_multiregimpl65_regs0 <= la_input[62];
	builder_multiregimpl65_regs1 <= builder_multiregimpl65_regs0;
	builder_multiregimpl66_regs0 <= la_input[63];
	builder_multiregimpl66_regs1 <= builder_multiregimpl66_regs0;
	builder_multiregimpl67_regs0 <= la_input[64];
	builder_multiregimpl67_regs1 <= builder_multiregimpl67_regs0;
	builder_multiregimpl68_regs0 <= la_input[65];
	builder_multiregimpl68_regs1 <= builder_multiregimpl68_regs0;
	builder_multiregimpl69_regs0 <= la_input[66];
	builder_multiregimpl69_regs1 <= builder_multiregimpl69_regs0;
	builder_multiregimpl70_regs0 <= la_input[67];
	builder_multiregimpl70_regs1 <= builder_multiregimpl70_regs0;
	builder_multiregimpl71_regs0 <= la_input[68];
	builder_multiregimpl71_regs1 <= builder_multiregimpl71_regs0;
	builder_multiregimpl72_regs0 <= la_input[69];
	builder_multiregimpl72_regs1 <= builder_multiregimpl72_regs0;
	builder_multiregimpl73_regs0 <= la_input[70];
	builder_multiregimpl73_regs1 <= builder_multiregimpl73_regs0;
	builder_multiregimpl74_regs0 <= la_input[71];
	builder_multiregimpl74_regs1 <= builder_multiregimpl74_regs0;
	builder_multiregimpl75_regs0 <= la_input[72];
	builder_multiregimpl75_regs1 <= builder_multiregimpl75_regs0;
	builder_multiregimpl76_regs0 <= la_input[73];
	builder_multiregimpl76_regs1 <= builder_multiregimpl76_regs0;
	builder_multiregimpl77_regs0 <= la_input[74];
	builder_multiregimpl77_regs1 <= builder_multiregimpl77_regs0;
	builder_multiregimpl78_regs0 <= la_input[75];
	builder_multiregimpl78_regs1 <= builder_multiregimpl78_regs0;
	builder_multiregimpl79_regs0 <= la_input[76];
	builder_multiregimpl79_regs1 <= builder_multiregimpl79_regs0;
	builder_multiregimpl80_regs0 <= la_input[77];
	builder_multiregimpl80_regs1 <= builder_multiregimpl80_regs0;
	builder_multiregimpl81_regs0 <= la_input[78];
	builder_multiregimpl81_regs1 <= builder_multiregimpl81_regs0;
	builder_multiregimpl82_regs0 <= la_input[79];
	builder_multiregimpl82_regs1 <= builder_multiregimpl82_regs0;
	builder_multiregimpl83_regs0 <= la_input[80];
	builder_multiregimpl83_regs1 <= builder_multiregimpl83_regs0;
	builder_multiregimpl84_regs0 <= la_input[81];
	builder_multiregimpl84_regs1 <= builder_multiregimpl84_regs0;
	builder_multiregimpl85_regs0 <= la_input[82];
	builder_multiregimpl85_regs1 <= builder_multiregimpl85_regs0;
	builder_multiregimpl86_regs0 <= la_input[83];
	builder_multiregimpl86_regs1 <= builder_multiregimpl86_regs0;
	builder_multiregimpl87_regs0 <= la_input[84];
	builder_multiregimpl87_regs1 <= builder_multiregimpl87_regs0;
	builder_multiregimpl88_regs0 <= la_input[85];
	builder_multiregimpl88_regs1 <= builder_multiregimpl88_regs0;
	builder_multiregimpl89_regs0 <= la_input[86];
	builder_multiregimpl89_regs1 <= builder_multiregimpl89_regs0;
	builder_multiregimpl90_regs0 <= la_input[87];
	builder_multiregimpl90_regs1 <= builder_multiregimpl90_regs0;
	builder_multiregimpl91_regs0 <= la_input[88];
	builder_multiregimpl91_regs1 <= builder_multiregimpl91_regs0;
	builder_multiregimpl92_regs0 <= la_input[89];
	builder_multiregimpl92_regs1 <= builder_multiregimpl92_regs0;
	builder_multiregimpl93_regs0 <= la_input[90];
	builder_multiregimpl93_regs1 <= builder_multiregimpl93_regs0;
	builder_multiregimpl94_regs0 <= la_input[91];
	builder_multiregimpl94_regs1 <= builder_multiregimpl94_regs0;
	builder_multiregimpl95_regs0 <= la_input[92];
	builder_multiregimpl95_regs1 <= builder_multiregimpl95_regs0;
	builder_multiregimpl96_regs0 <= la_input[93];
	builder_multiregimpl96_regs1 <= builder_multiregimpl96_regs0;
	builder_multiregimpl97_regs0 <= la_input[94];
	builder_multiregimpl97_regs1 <= builder_multiregimpl97_regs0;
	builder_multiregimpl98_regs0 <= la_input[95];
	builder_multiregimpl98_regs1 <= builder_multiregimpl98_regs0;
	builder_multiregimpl99_regs0 <= la_input[96];
	builder_multiregimpl99_regs1 <= builder_multiregimpl99_regs0;
	builder_multiregimpl100_regs0 <= la_input[97];
	builder_multiregimpl100_regs1 <= builder_multiregimpl100_regs0;
	builder_multiregimpl101_regs0 <= la_input[98];
	builder_multiregimpl101_regs1 <= builder_multiregimpl101_regs0;
	builder_multiregimpl102_regs0 <= la_input[99];
	builder_multiregimpl102_regs1 <= builder_multiregimpl102_regs0;
	builder_multiregimpl103_regs0 <= la_input[100];
	builder_multiregimpl103_regs1 <= builder_multiregimpl103_regs0;
	builder_multiregimpl104_regs0 <= la_input[101];
	builder_multiregimpl104_regs1 <= builder_multiregimpl104_regs0;
	builder_multiregimpl105_regs0 <= la_input[102];
	builder_multiregimpl105_regs1 <= builder_multiregimpl105_regs0;
	builder_multiregimpl106_regs0 <= la_input[103];
	builder_multiregimpl106_regs1 <= builder_multiregimpl106_regs0;
	builder_multiregimpl107_regs0 <= la_input[104];
	builder_multiregimpl107_regs1 <= builder_multiregimpl107_regs0;
	builder_multiregimpl108_regs0 <= la_input[105];
	builder_multiregimpl108_regs1 <= builder_multiregimpl108_regs0;
	builder_multiregimpl109_regs0 <= la_input[106];
	builder_multiregimpl109_regs1 <= builder_multiregimpl109_regs0;
	builder_multiregimpl110_regs0 <= la_input[107];
	builder_multiregimpl110_regs1 <= builder_multiregimpl110_regs0;
	builder_multiregimpl111_regs0 <= la_input[108];
	builder_multiregimpl111_regs1 <= builder_multiregimpl111_regs0;
	builder_multiregimpl112_regs0 <= la_input[109];
	builder_multiregimpl112_regs1 <= builder_multiregimpl112_regs0;
	builder_multiregimpl113_regs0 <= la_input[110];
	builder_multiregimpl113_regs1 <= builder_multiregimpl113_regs0;
	builder_multiregimpl114_regs0 <= la_input[111];
	builder_multiregimpl114_regs1 <= builder_multiregimpl114_regs0;
	builder_multiregimpl115_regs0 <= la_input[112];
	builder_multiregimpl115_regs1 <= builder_multiregimpl115_regs0;
	builder_multiregimpl116_regs0 <= la_input[113];
	builder_multiregimpl116_regs1 <= builder_multiregimpl116_regs0;
	builder_multiregimpl117_regs0 <= la_input[114];
	builder_multiregimpl117_regs1 <= builder_multiregimpl117_regs0;
	builder_multiregimpl118_regs0 <= la_input[115];
	builder_multiregimpl118_regs1 <= builder_multiregimpl118_regs0;
	builder_multiregimpl119_regs0 <= la_input[116];
	builder_multiregimpl119_regs1 <= builder_multiregimpl119_regs0;
	builder_multiregimpl120_regs0 <= la_input[117];
	builder_multiregimpl120_regs1 <= builder_multiregimpl120_regs0;
	builder_multiregimpl121_regs0 <= la_input[118];
	builder_multiregimpl121_regs1 <= builder_multiregimpl121_regs0;
	builder_multiregimpl122_regs0 <= la_input[119];
	builder_multiregimpl122_regs1 <= builder_multiregimpl122_regs0;
	builder_multiregimpl123_regs0 <= la_input[120];
	builder_multiregimpl123_regs1 <= builder_multiregimpl123_regs0;
	builder_multiregimpl124_regs0 <= la_input[121];
	builder_multiregimpl124_regs1 <= builder_multiregimpl124_regs0;
	builder_multiregimpl125_regs0 <= la_input[122];
	builder_multiregimpl125_regs1 <= builder_multiregimpl125_regs0;
	builder_multiregimpl126_regs0 <= la_input[123];
	builder_multiregimpl126_regs1 <= builder_multiregimpl126_regs0;
	builder_multiregimpl127_regs0 <= la_input[124];
	builder_multiregimpl127_regs1 <= builder_multiregimpl127_regs0;
	builder_multiregimpl128_regs0 <= la_input[125];
	builder_multiregimpl128_regs1 <= builder_multiregimpl128_regs0;
	builder_multiregimpl129_regs0 <= la_input[126];
	builder_multiregimpl129_regs1 <= builder_multiregimpl129_regs0;
	builder_multiregimpl130_regs0 <= la_input[127];
	builder_multiregimpl130_regs1 <= builder_multiregimpl130_regs0;
	builder_multiregimpl131_regs0 <= user_irq[0];
	builder_multiregimpl131_regs1 <= builder_multiregimpl131_regs0;
	builder_multiregimpl132_regs0 <= user_irq[1];
	builder_multiregimpl132_regs1 <= builder_multiregimpl132_regs0;
	builder_multiregimpl133_regs0 <= user_irq[2];
	builder_multiregimpl133_regs1 <= builder_multiregimpl133_regs0;
	builder_multiregimpl134_regs0 <= user_irq[3];
	builder_multiregimpl134_regs1 <= builder_multiregimpl134_regs0;
	builder_multiregimpl135_regs0 <= user_irq[4];
	builder_multiregimpl135_regs1 <= builder_multiregimpl135_regs0;
	builder_multiregimpl136_regs0 <= user_irq[5];
	builder_multiregimpl136_regs1 <= builder_multiregimpl136_regs0;
end

sky130_sram_2kbyte_1rw1r_32x512_8 sky130_sram_2kbyte_1rw1r_32x512_8(
	.addr0(main_bus_adr[8:0]),
	.clk0(sys_clk),
	.csb0(main_cs_b),
	.din0(main_datain),
	.web0(main_wren_b),
	.wmask0(main_maskwren),
	.dout0(main_dataout)
);

picorv32 #(
	.CATCH_ILLINSN(1'd1),
	.CATCH_MISALIGN(1'd0),
	.ENABLE_COUNTERS(1'd0),
	.ENABLE_COUNTERS64(1'd0),
	.ENABLE_DIV(1'd0),
	.ENABLE_FAST_MUL(1'd0),
	.ENABLE_IRQ(1'd1),
	.ENABLE_IRQ_QREGS(1'd1),
	.ENABLE_IRQ_TIMER(1'd0),
	.ENABLE_MUL(1'd0),
	.ENABLE_PCPI(1'd0),
	.ENABLE_REGS_16_31(1'd1),
	.ENABLE_REGS_DUALPORT(1'd1),
	.ENABLE_TRACE(1'd0),
	.LATCHED_IRQ(32'd4294967295),
	.LATCHED_MEM_RDATA(1'd0),
	.MASKED_IRQ(1'd0),
	.PROGADDR_IRQ(5'd16),
	.PROGADDR_RESET(1'd0),
	.STACKADDR(32'd4294967295),
	.TWO_CYCLE_ALU(1'd0),
	.TWO_CYCLE_COMPARE(1'd0),
	.TWO_STAGE_SHIFT(1'd0)
) picorv32 (
	.clk(sys_clk),
	.irq(main_picorv32_interrupt),
	.mem_rdata(main_picorv32_mem_rdata),
	.mem_ready(main_picorv32_mem_ready),
	.pcpi_rd(1'd0),
	.pcpi_ready(1'd0),
	.pcpi_wait(1'd0),
	.pcpi_wr(1'd0),
	.resetn((~(sys_rst | main_picorv32_reset))),
	.eoi(main_picorv329),
	.mem_addr(main_picorv32_mem_addr),
	.mem_instr(main_picorv32_mem_instr),
	.mem_la_addr(main_picorv322),
	.mem_la_read(main_picorv320),
	.mem_la_wdata(main_picorv323),
	.mem_la_write(main_picorv321),
	.mem_la_wstrb(main_picorv324),
	.mem_valid(main_picorv32_mem_valid),
	.mem_wdata(main_picorv32_mem_wdata),
	.mem_wstrb(main_picorv32_mem_wstrb),
	.pcpi_insn(main_picorv326),
	.pcpi_rs1(main_picorv327),
	.pcpi_rs2(main_picorv328),
	.pcpi_valid(main_picorv325),
	.trap(main_picorv32_trap)
);

endmodule
