//--------------------------------------------------------------------------------
// Auto-generated by Migen (7507a2b) & LiteX (158033c) on 2021-11-07 15:18:32
//--------------------------------------------------------------------------------
module top(
	input wire sys_clk,
	input wire sys_rst,
	output wire spiflash_cs_n,
	output reg spiflash_clk,
	input wire spiflash_miso,
	output reg spiflash_mosi,
	input wire spiflash_wp,
	input wire spiflash_hold,
	output wire gpio_out_pad,
	input wire gpio_in_pad,
	output wire gpio_outenb_pad,
	output wire gpio_inenb_pad,
	output wire gpio_mode0_pad,
	output wire gpio_mode1_pad,
	output wire mprj_wb_iena,
	output wire [2:0] user_irq_ena,
	input wire [5:0] user_irq
);

wire sys_clk_1;
wire sys_rst_1;
wire por_clk;
reg int_rst = 1'd1;
reg soc_rst = 1'd0;
wire cpu_rst;
reg [1:0] reset_storage = 2'd0;
reg reset_re = 1'd0;
reg [31:0] scratch_storage = 32'd305419896;
reg scratch_re = 1'd0;
wire [31:0] bus_errors_status;
wire bus_errors_we;
reg bus_errors_re = 1'd0;
wire bus_error;
reg [31:0] bus_errors = 32'd0;
wire picorv32_trap;
wire picorv32_reset;
reg [31:0] picorv32_interrupt = 32'd0;
wire [29:0] picorv32_idbus_adr;
wire [31:0] picorv32_idbus_dat_w;
wire [31:0] picorv32_idbus_dat_r;
wire [3:0] picorv32_idbus_sel;
wire picorv32_idbus_cyc;
wire picorv32_idbus_stb;
wire picorv32_idbus_ack;
wire picorv32_idbus_we;
wire [2:0] picorv32_idbus_cti;
wire [1:0] picorv32_idbus_bte;
wire picorv32_idbus_err;
wire picorv32_mem_valid;
wire picorv32_mem_instr;
wire picorv32_mem_ready;
wire [31:0] picorv32_mem_addr;
wire [31:0] picorv32_mem_wdata;
wire [3:0] picorv32_mem_wstrb;
wire [31:0] picorv32_mem_rdata;
wire picorv320;
wire picorv321;
wire [31:0] picorv322;
wire [31:0] picorv323;
wire [3:0] picorv324;
wire picorv325;
wire [31:0] picorv326;
wire [31:0] picorv327;
wire [31:0] picorv328;
wire [31:0] picorv329;
wire [29:0] bus_adr;
wire [31:0] bus_dat_w;
reg [31:0] bus_dat_r = 32'd0;
wire [3:0] bus_sel;
wire bus_cyc;
wire bus_stb;
reg bus_ack = 1'd0;
wire bus_we;
wire [2:0] bus_cti;
wire [1:0] bus_bte;
reg bus_err = 1'd0;
wire [31:0] datain0;
wire [31:0] dataout0;
reg [3:0] maskwren0 = 4'd0;
reg wren_b0 = 1'd0;
reg cs_b0 = 1'd0;
wire [31:0] datain1;
wire [31:0] dataout1;
reg [3:0] maskwren1 = 4'd0;
reg wren_b1 = 1'd0;
reg cs_b1 = 1'd0;
reg litespisdrphycore_source_valid = 1'd0;
wire litespisdrphycore_source_ready;
reg litespisdrphycore_source_first = 1'd0;
reg litespisdrphycore_source_last = 1'd0;
wire [31:0] litespisdrphycore_source_payload_data;
wire litespisdrphycore_sink_valid;
reg litespisdrphycore_sink_ready = 1'd0;
wire litespisdrphycore_sink_first;
wire litespisdrphycore_sink_last;
wire [31:0] litespisdrphycore_sink_payload_data;
wire [5:0] litespisdrphycore_sink_payload_len;
wire [3:0] litespisdrphycore_sink_payload_width;
wire [7:0] litespisdrphycore_sink_payload_mask;
wire litespisdrphycore_cs;
wire [7:0] litespisdrphycore_spi_clk_divisor;
reg [7:0] litespisdrphycore_storage = 8'd1;
reg litespisdrphycore_re = 1'd0;
wire [7:0] litespisdrphycore_div;
wire [7:0] litespisdrphycore_sample_cnt;
wire [7:0] litespisdrphycore_update_cnt;
wire litespisdrphycore_posedge;
wire litespisdrphycore_negedge;
wire litespisdrphycore_sample;
wire litespisdrphycore_update;
reg litespisdrphycore_en = 1'd0;
reg [7:0] litespisdrphycore_cnt = 8'd0;
reg litespisdrphycore_en_int = 1'd0;
reg litespisdrphycore_clk = 1'd0;
reg litespisdrphycore_posedge_reg = 1'd0;
reg litespisdrphycore_posedge_reg2 = 1'd0;
wire litespisdrphycore_wait;
wire litespisdrphycore_done;
reg [3:0] litespisdrphycore_count = 4'd11;
wire litespisdrphycore_cs_enable;
reg litespisdrphycore_dq_o = 1'd0;
reg [1:0] litespisdrphycore_dq_i = 2'd0;
wire litespisdrphycore_dq_oe;
reg [7:0] litespisdrphycore_sr_cnt = 8'd0;
reg litespisdrphycore_sr_out_load = 1'd0;
reg litespisdrphycore_sr_out_shift = 1'd0;
reg [31:0] litespisdrphycore_sr_out = 32'd0;
reg litespisdrphycore_sr_in_shift = 1'd0;
reg [31:0] litespisdrphycore_sr_in = 32'd0;
reg litespisdrphycore0 = 1'd0;
reg [1:0] litespisdrphycore1 = 2'd0;
reg [3:0] litespisdrphycore2 = 4'd0;
reg [7:0] litespisdrphycore3 = 8'd0;
wire crossbar_source_valid;
wire crossbar_source_ready;
wire crossbar_source_first;
wire crossbar_source_last;
wire [31:0] crossbar_source_payload_data;
wire [5:0] crossbar_source_payload_len;
wire [3:0] crossbar_source_payload_width;
wire [7:0] crossbar_source_payload_mask;
wire crossbar_sink_valid;
wire crossbar_sink_ready;
wire crossbar_sink_first;
wire crossbar_sink_last;
wire [31:0] crossbar_sink_payload_data;
reg crossbar_cs = 1'd0;
reg litespimmap_source_valid = 1'd0;
wire litespimmap_source_ready;
reg litespimmap_source_first = 1'd0;
reg litespimmap_source_last = 1'd0;
reg [31:0] litespimmap_source_payload_data = 32'd0;
reg [5:0] litespimmap_source_payload_len = 6'd0;
reg [3:0] litespimmap_source_payload_width = 4'd0;
reg [7:0] litespimmap_source_payload_mask = 8'd0;
wire litespimmap_sink_valid;
reg litespimmap_sink_ready = 1'd0;
wire litespimmap_sink_first;
wire litespimmap_sink_last;
wire [31:0] litespimmap_sink_payload_data;
wire [29:0] litespimmap_bus_adr;
wire [31:0] litespimmap_bus_dat_w;
reg [31:0] litespimmap_bus_dat_r = 32'd0;
wire [3:0] litespimmap_bus_sel;
wire litespimmap_bus_cyc;
wire litespimmap_bus_stb;
reg litespimmap_bus_ack = 1'd0;
wire litespimmap_bus_we;
wire [2:0] litespimmap_bus_cti;
wire [1:0] litespimmap_bus_bte;
reg litespimmap_bus_err = 1'd0;
reg litespimmap_cs = 1'd0;
reg litespimmap_burst_cs = 1'd0;
reg [29:0] litespimmap_burst_adr = 30'd0;
reg litespimmap_wait = 1'd0;
wire litespimmap_done;
reg [8:0] litespimmap_count = 9'd256;
reg [7:0] litespimmap_storage = 8'd0;
reg litespimmap_re = 1'd0;
wire [7:0] litespimmap_spi_dummy_bits;
reg [31:0] litespimmap_dummy = 32'd57005;
reg [1:0] litespimmap = 2'd0;
wire port_mmap_user_port_source_valid;
wire port_mmap_user_port_source_ready;
wire port_mmap_user_port_source_first;
wire port_mmap_user_port_source_last;
wire [31:0] port_mmap_user_port_source_payload_data;
wire port_mmap_user_port_sink_valid;
wire port_mmap_user_port_sink_ready;
wire port_mmap_user_port_sink_first;
wire port_mmap_user_port_sink_last;
wire [31:0] port_mmap_user_port_sink_payload_data;
wire [5:0] port_mmap_user_port_sink_payload_len;
wire [3:0] port_mmap_user_port_sink_payload_width;
wire [7:0] port_mmap_user_port_sink_payload_mask;
wire port_mmap_internal_port_source_valid;
wire port_mmap_internal_port_source_ready;
wire port_mmap_internal_port_source_first;
wire port_mmap_internal_port_source_last;
wire [31:0] port_mmap_internal_port_source_payload_data;
wire port_mmap_internal_port_sink_valid;
wire port_mmap_internal_port_sink_ready;
wire port_mmap_internal_port_sink_first;
wire port_mmap_internal_port_sink_last;
wire [31:0] port_mmap_internal_port_sink_payload_data;
wire [5:0] port_mmap_internal_port_sink_payload_len;
wire [3:0] port_mmap_internal_port_sink_payload_width;
wire [7:0] port_mmap_internal_port_sink_payload_mask;
wire port_mmap_request;
wire master_sink_sink_valid;
wire master_sink_sink_ready;
wire master_sink_sink_first;
wire master_sink_sink_last;
wire [31:0] master_sink_sink_payload_data;
wire master_source_source_valid;
wire master_source_source_ready;
wire master_source_source_first;
wire master_source_source_last;
wire [31:0] master_source_source_payload_data;
wire [5:0] master_source_source_payload_len;
wire [3:0] master_source_source_payload_width;
wire [7:0] master_source_source_payload_mask;
wire master_cs;
reg master_cs_storage = 1'd0;
reg master_cs_re = 1'd0;
wire [7:0] master_len;
wire [3:0] master_width;
wire [7:0] master_mask;
reg [23:0] master_phyconfig_storage = 24'd0;
reg master_phyconfig_re = 1'd0;
reg master_rxtx_re = 1'd0;
wire [31:0] master_rxtx_r;
reg master_rxtx_we = 1'd0;
wire [31:0] master_rxtx_w;
wire master_tx_ready;
wire master_rx_ready;
reg [1:0] master_status_status = 2'd0;
wire master_status_we;
reg master_status_re = 1'd0;
wire master_tx_fifo_sink_valid;
wire master_tx_fifo_sink_ready;
reg master_tx_fifo_sink_first = 1'd0;
wire master_tx_fifo_sink_last;
wire [31:0] master_tx_fifo_sink_payload_data;
wire [5:0] master_tx_fifo_sink_payload_len;
wire [3:0] master_tx_fifo_sink_payload_width;
wire [7:0] master_tx_fifo_sink_payload_mask;
reg master_tx_fifo_source_valid = 1'd0;
wire master_tx_fifo_source_ready;
reg master_tx_fifo_source_first = 1'd0;
reg master_tx_fifo_source_last = 1'd0;
reg [31:0] master_tx_fifo_source_payload_data = 32'd0;
reg [5:0] master_tx_fifo_source_payload_len = 6'd0;
reg [3:0] master_tx_fifo_source_payload_width = 4'd0;
reg [7:0] master_tx_fifo_source_payload_mask = 8'd0;
wire master_rx_fifo_sink_valid;
wire master_rx_fifo_sink_ready;
wire master_rx_fifo_sink_first;
wire master_rx_fifo_sink_last;
wire [31:0] master_rx_fifo_sink_payload_data;
reg master_rx_fifo_source_valid = 1'd0;
wire master_rx_fifo_source_ready;
reg master_rx_fifo_source_first = 1'd0;
reg master_rx_fifo_source_last = 1'd0;
reg [31:0] master_rx_fifo_source_payload_data = 32'd0;
wire port_master_user_port_source_valid;
wire port_master_user_port_source_ready;
wire port_master_user_port_source_first;
wire port_master_user_port_source_last;
wire [31:0] port_master_user_port_source_payload_data;
wire port_master_user_port_sink_valid;
wire port_master_user_port_sink_ready;
wire port_master_user_port_sink_first;
wire port_master_user_port_sink_last;
wire [31:0] port_master_user_port_sink_payload_data;
wire [5:0] port_master_user_port_sink_payload_len;
wire [3:0] port_master_user_port_sink_payload_width;
wire [7:0] port_master_user_port_sink_payload_mask;
wire port_master_internal_port_source_valid;
wire port_master_internal_port_source_ready;
wire port_master_internal_port_source_first;
wire port_master_internal_port_source_last;
wire [31:0] port_master_internal_port_source_payload_data;
wire port_master_internal_port_sink_valid;
wire port_master_internal_port_sink_ready;
wire port_master_internal_port_sink_first;
wire port_master_internal_port_sink_last;
wire [31:0] port_master_internal_port_sink_payload_data;
wire [5:0] port_master_internal_port_sink_payload_len;
wire [3:0] port_master_internal_port_sink_payload_width;
wire [7:0] port_master_internal_port_sink_payload_mask;
wire port_master_request;
reg gpio_mode1_storage = 1'd0;
reg gpio_mode1_re = 1'd0;
reg gpio_mode0_storage = 1'd0;
reg gpio_mode0_re = 1'd0;
reg gpio_ien_storage = 1'd0;
reg gpio_ien_re = 1'd0;
reg gpio_oe_storage = 1'd0;
reg gpio_oe_re = 1'd0;
wire gpio_in_status;
wire gpio_in_we;
reg gpio_in_re = 1'd0;
reg gpio_out_storage = 1'd0;
reg gpio_out_re = 1'd0;
reg mprj_wb_iena_storage = 1'd0;
reg mprj_wb_iena_re = 1'd0;
reg [2:0] user_irq_ena_storage = 3'd0;
reg user_irq_ena_re = 1'd0;
wire gpioin0_in_status;
wire gpioin0_in_we;
reg gpioin0_in_re = 1'd0;
reg gpioin0_gpioin0_mode_storage = 1'd0;
reg gpioin0_gpioin0_mode_re = 1'd0;
reg gpioin0_gpioin0_edge_storage = 1'd0;
reg gpioin0_gpioin0_edge_re = 1'd0;
wire gpioin0_gpioin0_irq;
reg gpioin0_gpioin0_in_pads_n_d = 1'd0;
wire gpioin0_gpioin0_status;
reg gpioin0_gpioin0_pending = 1'd0;
reg gpioin0_gpioin0_trigger = 1'd0;
reg gpioin0_gpioin0_clear = 1'd0;
reg gpioin0_gpioin0_trigger_d = 1'd0;
wire gpioin1_in_status;
wire gpioin1_in_we;
reg gpioin1_in_re = 1'd0;
reg gpioin1_gpioin1_mode_storage = 1'd0;
reg gpioin1_gpioin1_mode_re = 1'd0;
reg gpioin1_gpioin1_edge_storage = 1'd0;
reg gpioin1_gpioin1_edge_re = 1'd0;
wire gpioin1_gpioin1_irq;
reg gpioin1_gpioin1_in_pads_n_d = 1'd0;
wire gpioin1_gpioin1_status;
reg gpioin1_gpioin1_pending = 1'd0;
reg gpioin1_gpioin1_trigger = 1'd0;
reg gpioin1_gpioin1_clear = 1'd0;
reg gpioin1_gpioin1_trigger_d = 1'd0;
wire gpioin2_in_status;
wire gpioin2_in_we;
reg gpioin2_in_re = 1'd0;
reg gpioin2_gpioin2_mode_storage = 1'd0;
reg gpioin2_gpioin2_mode_re = 1'd0;
reg gpioin2_gpioin2_edge_storage = 1'd0;
reg gpioin2_gpioin2_edge_re = 1'd0;
wire gpioin2_gpioin2_irq;
reg gpioin2_gpioin2_in_pads_n_d = 1'd0;
wire gpioin2_gpioin2_status;
reg gpioin2_gpioin2_pending = 1'd0;
reg gpioin2_gpioin2_trigger = 1'd0;
reg gpioin2_gpioin2_clear = 1'd0;
reg gpioin2_gpioin2_trigger_d = 1'd0;
wire gpioin3_in_status;
wire gpioin3_in_we;
reg gpioin3_in_re = 1'd0;
reg gpioin3_gpioin3_mode_storage = 1'd0;
reg gpioin3_gpioin3_mode_re = 1'd0;
reg gpioin3_gpioin3_edge_storage = 1'd0;
reg gpioin3_gpioin3_edge_re = 1'd0;
wire gpioin3_gpioin3_irq;
reg gpioin3_gpioin3_in_pads_n_d = 1'd0;
wire gpioin3_gpioin3_status;
reg gpioin3_gpioin3_pending = 1'd0;
reg gpioin3_gpioin3_trigger = 1'd0;
reg gpioin3_gpioin3_clear = 1'd0;
reg gpioin3_gpioin3_trigger_d = 1'd0;
wire gpioin4_in_status;
wire gpioin4_in_we;
reg gpioin4_in_re = 1'd0;
reg gpioin4_gpioin4_mode_storage = 1'd0;
reg gpioin4_gpioin4_mode_re = 1'd0;
reg gpioin4_gpioin4_edge_storage = 1'd0;
reg gpioin4_gpioin4_edge_re = 1'd0;
wire gpioin4_gpioin4_irq;
reg gpioin4_gpioin4_in_pads_n_d = 1'd0;
wire gpioin4_gpioin4_status;
reg gpioin4_gpioin4_pending = 1'd0;
reg gpioin4_gpioin4_trigger = 1'd0;
reg gpioin4_gpioin4_clear = 1'd0;
reg gpioin4_gpioin4_trigger_d = 1'd0;
wire gpioin5_in_status;
wire gpioin5_in_we;
reg gpioin5_in_re = 1'd0;
reg gpioin5_gpioin5_mode_storage = 1'd0;
reg gpioin5_gpioin5_mode_re = 1'd0;
reg gpioin5_gpioin5_edge_storage = 1'd0;
reg gpioin5_gpioin5_edge_re = 1'd0;
wire gpioin5_gpioin5_irq;
reg gpioin5_gpioin5_in_pads_n_d = 1'd0;
wire gpioin5_gpioin5_status;
reg gpioin5_gpioin5_pending = 1'd0;
reg gpioin5_gpioin5_trigger = 1'd0;
reg gpioin5_gpioin5_clear = 1'd0;
reg gpioin5_gpioin5_trigger_d = 1'd0;
reg [1:0] litespiphy_state = 2'd0;
reg [1:0] litespiphy_next_state = 2'd0;
reg [7:0] litespisdrphycore_sr_cnt_litespiphy_next_value = 8'd0;
reg litespisdrphycore_sr_cnt_litespiphy_next_value_ce = 1'd0;
wire [1:0] litespi_request;
reg litespi_grant = 1'd0;
reg litespi_tx_mux_source_valid = 1'd0;
wire litespi_tx_mux_source_ready;
reg litespi_tx_mux_source_first = 1'd0;
reg litespi_tx_mux_source_last = 1'd0;
reg [31:0] litespi_tx_mux_source_payload_data = 32'd0;
reg [5:0] litespi_tx_mux_source_payload_len = 6'd0;
reg [3:0] litespi_tx_mux_source_payload_width = 4'd0;
reg [7:0] litespi_tx_mux_source_payload_mask = 8'd0;
wire litespi_tx_mux_endpoint0_sink_valid;
reg litespi_tx_mux_endpoint0_sink_ready = 1'd0;
wire litespi_tx_mux_endpoint0_sink_first;
wire litespi_tx_mux_endpoint0_sink_last;
wire [31:0] litespi_tx_mux_endpoint0_sink_payload_data;
wire [5:0] litespi_tx_mux_endpoint0_sink_payload_len;
wire [3:0] litespi_tx_mux_endpoint0_sink_payload_width;
wire [7:0] litespi_tx_mux_endpoint0_sink_payload_mask;
wire litespi_tx_mux_endpoint1_sink_valid;
reg litespi_tx_mux_endpoint1_sink_ready = 1'd0;
wire litespi_tx_mux_endpoint1_sink_first;
wire litespi_tx_mux_endpoint1_sink_last;
wire [31:0] litespi_tx_mux_endpoint1_sink_payload_data;
wire [5:0] litespi_tx_mux_endpoint1_sink_payload_len;
wire [3:0] litespi_tx_mux_endpoint1_sink_payload_width;
wire [7:0] litespi_tx_mux_endpoint1_sink_payload_mask;
wire litespi_tx_mux_sel;
wire litespi_rx_demux_sink_valid;
reg litespi_rx_demux_sink_ready = 1'd0;
wire litespi_rx_demux_sink_first;
wire litespi_rx_demux_sink_last;
wire [31:0] litespi_rx_demux_sink_payload_data;
reg litespi_rx_demux_endpoint0_source_valid = 1'd0;
wire litespi_rx_demux_endpoint0_source_ready;
reg litespi_rx_demux_endpoint0_source_first = 1'd0;
reg litespi_rx_demux_endpoint0_source_last = 1'd0;
reg [31:0] litespi_rx_demux_endpoint0_source_payload_data = 32'd0;
reg litespi_rx_demux_endpoint1_source_valid = 1'd0;
wire litespi_rx_demux_endpoint1_source_ready;
reg litespi_rx_demux_endpoint1_source_first = 1'd0;
reg litespi_rx_demux_endpoint1_source_last = 1'd0;
reg [31:0] litespi_rx_demux_endpoint1_source_payload_data = 32'd0;
wire litespi_rx_demux_sel;
reg [3:0] litespi_state = 4'd0;
reg [3:0] litespi_next_state = 4'd0;
reg litespimmap_burst_cs_litespi_next_value0 = 1'd0;
reg litespimmap_burst_cs_litespi_next_value_ce0 = 1'd0;
reg [29:0] litespimmap_burst_adr_litespi_next_value1 = 30'd0;
reg litespimmap_burst_adr_litespi_next_value_ce1 = 1'd0;
wire gpioin0_i00;
wire gpioin0_status_status;
wire gpioin0_status_we;
reg gpioin0_status_re = 1'd0;
wire gpioin0_i01;
wire gpioin0_pending_status;
wire gpioin0_pending_we;
reg gpioin0_pending_re = 1'd0;
reg gpioin0_pending_r = 1'd0;
wire gpioin0_i02;
reg gpioin0_enable_storage = 1'd0;
reg gpioin0_enable_re = 1'd0;
wire gpioin1_i00;
wire gpioin1_status_status;
wire gpioin1_status_we;
reg gpioin1_status_re = 1'd0;
wire gpioin1_i01;
wire gpioin1_pending_status;
wire gpioin1_pending_we;
reg gpioin1_pending_re = 1'd0;
reg gpioin1_pending_r = 1'd0;
wire gpioin1_i02;
reg gpioin1_enable_storage = 1'd0;
reg gpioin1_enable_re = 1'd0;
wire gpioin2_i00;
wire gpioin2_status_status;
wire gpioin2_status_we;
reg gpioin2_status_re = 1'd0;
wire gpioin2_i01;
wire gpioin2_pending_status;
wire gpioin2_pending_we;
reg gpioin2_pending_re = 1'd0;
reg gpioin2_pending_r = 1'd0;
wire gpioin2_i02;
reg gpioin2_enable_storage = 1'd0;
reg gpioin2_enable_re = 1'd0;
wire gpioin3_i00;
wire gpioin3_status_status;
wire gpioin3_status_we;
reg gpioin3_status_re = 1'd0;
wire gpioin3_i01;
wire gpioin3_pending_status;
wire gpioin3_pending_we;
reg gpioin3_pending_re = 1'd0;
reg gpioin3_pending_r = 1'd0;
wire gpioin3_i02;
reg gpioin3_enable_storage = 1'd0;
reg gpioin3_enable_re = 1'd0;
wire gpioin4_i00;
wire gpioin4_status_status;
wire gpioin4_status_we;
reg gpioin4_status_re = 1'd0;
wire gpioin4_i01;
wire gpioin4_pending_status;
wire gpioin4_pending_we;
reg gpioin4_pending_re = 1'd0;
reg gpioin4_pending_r = 1'd0;
wire gpioin4_i02;
reg gpioin4_enable_storage = 1'd0;
reg gpioin4_enable_re = 1'd0;
wire gpioin5_i00;
wire gpioin5_status_status;
wire gpioin5_status_we;
reg gpioin5_status_re = 1'd0;
wire gpioin5_i01;
wire gpioin5_pending_status;
wire gpioin5_pending_we;
reg gpioin5_pending_re = 1'd0;
reg gpioin5_pending_r = 1'd0;
wire gpioin5_i02;
reg gpioin5_enable_storage = 1'd0;
reg gpioin5_enable_re = 1'd0;
reg [13:0] mgmtsoc_adr = 14'd0;
reg mgmtsoc_we = 1'd0;
reg [31:0] mgmtsoc_dat_w = 32'd0;
wire [31:0] mgmtsoc_dat_r;
wire [29:0] mgmtsoc_wishbone_adr;
wire [31:0] mgmtsoc_wishbone_dat_w;
reg [31:0] mgmtsoc_wishbone_dat_r = 32'd0;
wire [3:0] mgmtsoc_wishbone_sel;
wire mgmtsoc_wishbone_cyc;
wire mgmtsoc_wishbone_stb;
reg mgmtsoc_wishbone_ack = 1'd0;
wire mgmtsoc_wishbone_we;
wire [2:0] mgmtsoc_wishbone_cti;
wire [1:0] mgmtsoc_wishbone_bte;
reg mgmtsoc_wishbone_err = 1'd0;
wire [29:0] shared_adr;
wire [31:0] shared_dat_w;
reg [31:0] shared_dat_r = 32'd0;
wire [3:0] shared_sel;
wire shared_cyc;
wire shared_stb;
reg shared_ack = 1'd0;
wire shared_we;
wire [2:0] shared_cti;
wire [1:0] shared_bte;
wire shared_err;
wire request;
wire grant;
reg [2:0] slave_sel = 3'd0;
reg [2:0] slave_sel_r = 3'd0;
reg error = 1'd0;
wire wait_1;
wire done;
reg [19:0] count = 20'd1000000;
wire [13:0] interface0_bank_bus_adr;
wire interface0_bank_bus_we;
wire [31:0] interface0_bank_bus_dat_w;
reg [31:0] interface0_bank_bus_dat_r = 32'd0;
reg csrbank0_reset0_re = 1'd0;
wire [1:0] csrbank0_reset0_r;
reg csrbank0_reset0_we = 1'd0;
wire [1:0] csrbank0_reset0_w;
reg csrbank0_scratch0_re = 1'd0;
wire [31:0] csrbank0_scratch0_r;
reg csrbank0_scratch0_we = 1'd0;
wire [31:0] csrbank0_scratch0_w;
reg csrbank0_bus_errors_re = 1'd0;
wire [31:0] csrbank0_bus_errors_r;
reg csrbank0_bus_errors_we = 1'd0;
wire [31:0] csrbank0_bus_errors_w;
wire csrbank0_sel;
wire [13:0] interface1_bank_bus_adr;
wire interface1_bank_bus_we;
wire [31:0] interface1_bank_bus_dat_w;
reg [31:0] interface1_bank_bus_dat_r = 32'd0;
reg csrbank1_mode10_re = 1'd0;
wire csrbank1_mode10_r;
reg csrbank1_mode10_we = 1'd0;
wire csrbank1_mode10_w;
reg csrbank1_mode00_re = 1'd0;
wire csrbank1_mode00_r;
reg csrbank1_mode00_we = 1'd0;
wire csrbank1_mode00_w;
reg csrbank1_ien0_re = 1'd0;
wire csrbank1_ien0_r;
reg csrbank1_ien0_we = 1'd0;
wire csrbank1_ien0_w;
reg csrbank1_oe0_re = 1'd0;
wire csrbank1_oe0_r;
reg csrbank1_oe0_we = 1'd0;
wire csrbank1_oe0_w;
reg csrbank1_in_re = 1'd0;
wire csrbank1_in_r;
reg csrbank1_in_we = 1'd0;
wire csrbank1_in_w;
reg csrbank1_out0_re = 1'd0;
wire csrbank1_out0_r;
reg csrbank1_out0_we = 1'd0;
wire csrbank1_out0_w;
wire csrbank1_sel;
wire [13:0] interface2_bank_bus_adr;
wire interface2_bank_bus_we;
wire [31:0] interface2_bank_bus_dat_w;
reg [31:0] interface2_bank_bus_dat_r = 32'd0;
reg csrbank2_out0_re = 1'd0;
wire csrbank2_out0_r;
reg csrbank2_out0_we = 1'd0;
wire csrbank2_out0_w;
wire csrbank2_sel;
wire [13:0] interface3_bank_bus_adr;
wire interface3_bank_bus_we;
wire [31:0] interface3_bank_bus_dat_w;
reg [31:0] interface3_bank_bus_dat_r = 32'd0;
reg csrbank3_mmap_dummy_bits0_re = 1'd0;
wire [7:0] csrbank3_mmap_dummy_bits0_r;
reg csrbank3_mmap_dummy_bits0_we = 1'd0;
wire [7:0] csrbank3_mmap_dummy_bits0_w;
reg csrbank3_master_cs0_re = 1'd0;
wire csrbank3_master_cs0_r;
reg csrbank3_master_cs0_we = 1'd0;
wire csrbank3_master_cs0_w;
reg csrbank3_master_phyconfig0_re = 1'd0;
wire [23:0] csrbank3_master_phyconfig0_r;
reg csrbank3_master_phyconfig0_we = 1'd0;
wire [23:0] csrbank3_master_phyconfig0_w;
reg csrbank3_master_status_re = 1'd0;
wire [1:0] csrbank3_master_status_r;
reg csrbank3_master_status_we = 1'd0;
wire [1:0] csrbank3_master_status_w;
wire csrbank3_sel;
wire [13:0] interface4_bank_bus_adr;
wire interface4_bank_bus_we;
wire [31:0] interface4_bank_bus_dat_w;
reg [31:0] interface4_bank_bus_dat_r = 32'd0;
reg csrbank4_clk_divisor0_re = 1'd0;
wire [7:0] csrbank4_clk_divisor0_r;
reg csrbank4_clk_divisor0_we = 1'd0;
wire [7:0] csrbank4_clk_divisor0_w;
wire csrbank4_sel;
wire [13:0] interface5_bank_bus_adr;
wire interface5_bank_bus_we;
wire [31:0] interface5_bank_bus_dat_w;
reg [31:0] interface5_bank_bus_dat_r = 32'd0;
reg csrbank5_in_re = 1'd0;
wire csrbank5_in_r;
reg csrbank5_in_we = 1'd0;
wire csrbank5_in_w;
reg csrbank5_mode0_re = 1'd0;
wire csrbank5_mode0_r;
reg csrbank5_mode0_we = 1'd0;
wire csrbank5_mode0_w;
reg csrbank5_edge0_re = 1'd0;
wire csrbank5_edge0_r;
reg csrbank5_edge0_we = 1'd0;
wire csrbank5_edge0_w;
reg csrbank5_ev_status_re = 1'd0;
wire csrbank5_ev_status_r;
reg csrbank5_ev_status_we = 1'd0;
wire csrbank5_ev_status_w;
reg csrbank5_ev_pending_re = 1'd0;
wire csrbank5_ev_pending_r;
reg csrbank5_ev_pending_we = 1'd0;
wire csrbank5_ev_pending_w;
reg csrbank5_ev_enable0_re = 1'd0;
wire csrbank5_ev_enable0_r;
reg csrbank5_ev_enable0_we = 1'd0;
wire csrbank5_ev_enable0_w;
wire csrbank5_sel;
wire [13:0] interface6_bank_bus_adr;
wire interface6_bank_bus_we;
wire [31:0] interface6_bank_bus_dat_w;
reg [31:0] interface6_bank_bus_dat_r = 32'd0;
reg csrbank6_in_re = 1'd0;
wire csrbank6_in_r;
reg csrbank6_in_we = 1'd0;
wire csrbank6_in_w;
reg csrbank6_mode0_re = 1'd0;
wire csrbank6_mode0_r;
reg csrbank6_mode0_we = 1'd0;
wire csrbank6_mode0_w;
reg csrbank6_edge0_re = 1'd0;
wire csrbank6_edge0_r;
reg csrbank6_edge0_we = 1'd0;
wire csrbank6_edge0_w;
reg csrbank6_ev_status_re = 1'd0;
wire csrbank6_ev_status_r;
reg csrbank6_ev_status_we = 1'd0;
wire csrbank6_ev_status_w;
reg csrbank6_ev_pending_re = 1'd0;
wire csrbank6_ev_pending_r;
reg csrbank6_ev_pending_we = 1'd0;
wire csrbank6_ev_pending_w;
reg csrbank6_ev_enable0_re = 1'd0;
wire csrbank6_ev_enable0_r;
reg csrbank6_ev_enable0_we = 1'd0;
wire csrbank6_ev_enable0_w;
wire csrbank6_sel;
wire [13:0] interface7_bank_bus_adr;
wire interface7_bank_bus_we;
wire [31:0] interface7_bank_bus_dat_w;
reg [31:0] interface7_bank_bus_dat_r = 32'd0;
reg csrbank7_in_re = 1'd0;
wire csrbank7_in_r;
reg csrbank7_in_we = 1'd0;
wire csrbank7_in_w;
reg csrbank7_mode0_re = 1'd0;
wire csrbank7_mode0_r;
reg csrbank7_mode0_we = 1'd0;
wire csrbank7_mode0_w;
reg csrbank7_edge0_re = 1'd0;
wire csrbank7_edge0_r;
reg csrbank7_edge0_we = 1'd0;
wire csrbank7_edge0_w;
reg csrbank7_ev_status_re = 1'd0;
wire csrbank7_ev_status_r;
reg csrbank7_ev_status_we = 1'd0;
wire csrbank7_ev_status_w;
reg csrbank7_ev_pending_re = 1'd0;
wire csrbank7_ev_pending_r;
reg csrbank7_ev_pending_we = 1'd0;
wire csrbank7_ev_pending_w;
reg csrbank7_ev_enable0_re = 1'd0;
wire csrbank7_ev_enable0_r;
reg csrbank7_ev_enable0_we = 1'd0;
wire csrbank7_ev_enable0_w;
wire csrbank7_sel;
wire [13:0] interface8_bank_bus_adr;
wire interface8_bank_bus_we;
wire [31:0] interface8_bank_bus_dat_w;
reg [31:0] interface8_bank_bus_dat_r = 32'd0;
reg csrbank8_in_re = 1'd0;
wire csrbank8_in_r;
reg csrbank8_in_we = 1'd0;
wire csrbank8_in_w;
reg csrbank8_mode0_re = 1'd0;
wire csrbank8_mode0_r;
reg csrbank8_mode0_we = 1'd0;
wire csrbank8_mode0_w;
reg csrbank8_edge0_re = 1'd0;
wire csrbank8_edge0_r;
reg csrbank8_edge0_we = 1'd0;
wire csrbank8_edge0_w;
reg csrbank8_ev_status_re = 1'd0;
wire csrbank8_ev_status_r;
reg csrbank8_ev_status_we = 1'd0;
wire csrbank8_ev_status_w;
reg csrbank8_ev_pending_re = 1'd0;
wire csrbank8_ev_pending_r;
reg csrbank8_ev_pending_we = 1'd0;
wire csrbank8_ev_pending_w;
reg csrbank8_ev_enable0_re = 1'd0;
wire csrbank8_ev_enable0_r;
reg csrbank8_ev_enable0_we = 1'd0;
wire csrbank8_ev_enable0_w;
wire csrbank8_sel;
wire [13:0] interface9_bank_bus_adr;
wire interface9_bank_bus_we;
wire [31:0] interface9_bank_bus_dat_w;
reg [31:0] interface9_bank_bus_dat_r = 32'd0;
reg csrbank9_in_re = 1'd0;
wire csrbank9_in_r;
reg csrbank9_in_we = 1'd0;
wire csrbank9_in_w;
reg csrbank9_mode0_re = 1'd0;
wire csrbank9_mode0_r;
reg csrbank9_mode0_we = 1'd0;
wire csrbank9_mode0_w;
reg csrbank9_edge0_re = 1'd0;
wire csrbank9_edge0_r;
reg csrbank9_edge0_we = 1'd0;
wire csrbank9_edge0_w;
reg csrbank9_ev_status_re = 1'd0;
wire csrbank9_ev_status_r;
reg csrbank9_ev_status_we = 1'd0;
wire csrbank9_ev_status_w;
reg csrbank9_ev_pending_re = 1'd0;
wire csrbank9_ev_pending_r;
reg csrbank9_ev_pending_we = 1'd0;
wire csrbank9_ev_pending_w;
reg csrbank9_ev_enable0_re = 1'd0;
wire csrbank9_ev_enable0_r;
reg csrbank9_ev_enable0_we = 1'd0;
wire csrbank9_ev_enable0_w;
wire csrbank9_sel;
wire [13:0] interface10_bank_bus_adr;
wire interface10_bank_bus_we;
wire [31:0] interface10_bank_bus_dat_w;
reg [31:0] interface10_bank_bus_dat_r = 32'd0;
reg csrbank10_in_re = 1'd0;
wire csrbank10_in_r;
reg csrbank10_in_we = 1'd0;
wire csrbank10_in_w;
reg csrbank10_mode0_re = 1'd0;
wire csrbank10_mode0_r;
reg csrbank10_mode0_we = 1'd0;
wire csrbank10_mode0_w;
reg csrbank10_edge0_re = 1'd0;
wire csrbank10_edge0_r;
reg csrbank10_edge0_we = 1'd0;
wire csrbank10_edge0_w;
reg csrbank10_ev_status_re = 1'd0;
wire csrbank10_ev_status_r;
reg csrbank10_ev_status_we = 1'd0;
wire csrbank10_ev_status_w;
reg csrbank10_ev_pending_re = 1'd0;
wire csrbank10_ev_pending_r;
reg csrbank10_ev_pending_we = 1'd0;
wire csrbank10_ev_pending_w;
reg csrbank10_ev_enable0_re = 1'd0;
wire csrbank10_ev_enable0_r;
reg csrbank10_ev_enable0_we = 1'd0;
wire csrbank10_ev_enable0_w;
wire csrbank10_sel;
wire [13:0] interface11_bank_bus_adr;
wire interface11_bank_bus_we;
wire [31:0] interface11_bank_bus_dat_w;
reg [31:0] interface11_bank_bus_dat_r = 32'd0;
reg csrbank11_out0_re = 1'd0;
wire [2:0] csrbank11_out0_r;
reg csrbank11_out0_we = 1'd0;
wire [2:0] csrbank11_out0_w;
wire csrbank11_sel;
wire [13:0] csr_interconnect_adr;
wire csr_interconnect_we;
wire [31:0] csr_interconnect_dat_w;
wire [31:0] csr_interconnect_dat_r;
reg state = 1'd0;
reg next_state = 1'd0;
reg [29:0] array_muxed0 = 30'd0;
reg [31:0] array_muxed1 = 32'd0;
reg [3:0] array_muxed2 = 4'd0;
reg array_muxed3 = 1'd0;
reg array_muxed4 = 1'd0;
reg array_muxed5 = 1'd0;
reg [2:0] array_muxed6 = 3'd0;
reg [1:0] array_muxed7 = 2'd0;
wire sdrio_clk;
wire sdrio_clk_1;
wire sdrio_clk_2;
reg multiregimpl0_regs0 = 1'd0;
reg multiregimpl0_regs1 = 1'd0;
reg multiregimpl1_regs0 = 1'd0;
reg multiregimpl1_regs1 = 1'd0;
reg multiregimpl2_regs0 = 1'd0;
reg multiregimpl2_regs1 = 1'd0;
reg multiregimpl3_regs0 = 1'd0;
reg multiregimpl3_regs1 = 1'd0;
reg multiregimpl4_regs0 = 1'd0;
reg multiregimpl4_regs1 = 1'd0;
reg multiregimpl5_regs0 = 1'd0;
reg multiregimpl5_regs1 = 1'd0;
reg multiregimpl6_regs0 = 1'd0;
reg multiregimpl6_regs1 = 1'd0;

assign picorv32_reset = (soc_rst | cpu_rst);
assign bus_error = error;
always @(*) begin
	picorv32_interrupt = 32'd0;
	picorv32_interrupt[0] = gpioin0_gpioin0_irq;
	picorv32_interrupt[1] = gpioin1_gpioin1_irq;
	picorv32_interrupt[2] = gpioin2_gpioin2_irq;
	picorv32_interrupt[3] = gpioin3_gpioin3_irq;
	picorv32_interrupt[4] = gpioin4_gpioin4_irq;
	picorv32_interrupt[5] = gpioin5_gpioin5_irq;
end
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst_1 = int_rst;
assign bus_errors_status = bus_errors;
assign picorv32_idbus_adr = picorv32_mem_addr[31:2];
assign picorv32_idbus_dat_w = picorv32_mem_wdata;
assign picorv32_idbus_we = (picorv32_mem_wstrb != 1'd0);
assign picorv32_idbus_sel = picorv32_mem_wstrb;
assign picorv32_idbus_cyc = picorv32_mem_valid;
assign picorv32_idbus_stb = picorv32_mem_valid;
assign picorv32_idbus_cti = 1'd0;
assign picorv32_idbus_bte = 1'd0;
assign picorv32_mem_ready = picorv32_idbus_ack;
assign picorv32_mem_rdata = picorv32_idbus_dat_r;
assign datain0 = bus_dat_w[31:0];
always @(*) begin
	wren_b0 = 1'd0;
	if ((bus_adr[8] == 1'd0)) begin
		wren_b0 = (~((bus_we & bus_stb) & bus_cyc));
	end
end
always @(*) begin
	cs_b0 = 1'd0;
	if ((bus_adr[8] == 1'd0)) begin
		cs_b0 = 1'd1;
	end
end
always @(*) begin
	bus_dat_r = 32'd0;
	if ((bus_adr[8] == 1'd0)) begin
		bus_dat_r[31:0] = dataout0;
	end
	if ((bus_adr[8] == 1'd1)) begin
		bus_dat_r[31:0] = dataout1;
	end
end
always @(*) begin
	maskwren0 = 4'd0;
	maskwren0[0] = bus_sel[0];
	maskwren0[1] = bus_sel[1];
	maskwren0[2] = bus_sel[2];
	maskwren0[3] = bus_sel[3];
end
assign datain1 = bus_dat_w[31:0];
always @(*) begin
	wren_b1 = 1'd0;
	if ((bus_adr[8] == 1'd1)) begin
		wren_b1 = (~((bus_we & bus_stb) & bus_cyc));
	end
end
always @(*) begin
	cs_b1 = 1'd0;
	if ((bus_adr[8] == 1'd1)) begin
		cs_b1 = 1'd1;
	end
end
always @(*) begin
	maskwren1 = 4'd0;
	maskwren1[0] = bus_sel[0];
	maskwren1[1] = bus_sel[1];
	maskwren1[2] = bus_sel[2];
	maskwren1[3] = bus_sel[3];
end
assign litespisdrphycore_div = litespisdrphycore_spi_clk_divisor;
assign litespisdrphycore_sample_cnt = 1'd1;
assign litespisdrphycore_update_cnt = 1'd1;
assign litespisdrphycore_wait = litespisdrphycore_cs;
assign litespisdrphycore_cs_enable = litespisdrphycore_done;
assign spiflash_cs_n = (~litespisdrphycore_cs_enable);
assign litespisdrphycore_dq_oe = litespisdrphycore_sink_payload_mask;
always @(*) begin
	litespisdrphycore_dq_o = 1'd0;
	case (litespisdrphycore_sink_payload_width)
		1'd1: begin
			litespisdrphycore_dq_o = litespisdrphycore_sr_out[31];
		end
		2'd2: begin
			litespisdrphycore_dq_o = litespisdrphycore_sr_out[31:30];
		end
		3'd4: begin
			litespisdrphycore_dq_o = litespisdrphycore_sr_out[31:28];
		end
		4'd8: begin
			litespisdrphycore_dq_o = litespisdrphycore_sr_out[31:24];
		end
	endcase
end
assign litespisdrphycore_source_payload_data = litespisdrphycore_sr_in;
assign litespisdrphycore_spi_clk_divisor = litespisdrphycore_storage;
assign litespisdrphycore_posedge = ((litespisdrphycore_en & (~litespisdrphycore_clk)) & (litespisdrphycore_cnt == litespisdrphycore_div));
assign litespisdrphycore_negedge = ((litespisdrphycore_en & litespisdrphycore_clk) & (litespisdrphycore_cnt == litespisdrphycore_div));
assign litespisdrphycore_sample = (litespisdrphycore_cnt == litespisdrphycore_sample_cnt);
assign litespisdrphycore_update = (litespisdrphycore_cnt == litespisdrphycore_update_cnt);
assign litespisdrphycore_done = (litespisdrphycore_count == 1'd0);
always @(*) begin
	litespiphy_next_state = 2'd0;
	litespiphy_next_state = litespiphy_state;
	case (litespiphy_state)
		1'd1: begin
			if (litespisdrphycore_negedge) begin
				if ((litespisdrphycore_sr_cnt == 1'd0)) begin
					litespiphy_next_state = 2'd2;
				end
			end
		end
		2'd2: begin
			if (((litespisdrphycore_spi_clk_divisor > 1'd0) | litespisdrphycore_posedge_reg2)) begin
				litespiphy_next_state = 2'd3;
			end
		end
		2'd3: begin
			if (litespisdrphycore_source_ready) begin
				litespiphy_next_state = 1'd0;
			end
		end
		default: begin
			if ((litespisdrphycore_cs_enable & litespisdrphycore_sink_valid)) begin
				litespiphy_next_state = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	litespisdrphycore_source_last = 1'd0;
	case (litespiphy_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			litespisdrphycore_source_last = 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	litespisdrphycore_sr_out_load = 1'd0;
	case (litespiphy_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((litespisdrphycore_cs_enable & litespisdrphycore_sink_valid)) begin
				litespisdrphycore_sr_out_load = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	litespisdrphycore_sr_out_shift = 1'd0;
	case (litespiphy_state)
		1'd1: begin
			if (litespisdrphycore_negedge) begin
				litespisdrphycore_sr_out_shift = 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	litespisdrphycore_sink_ready = 1'd0;
	case (litespiphy_state)
		1'd1: begin
		end
		2'd2: begin
			if (((litespisdrphycore_spi_clk_divisor > 1'd0) | litespisdrphycore_posedge_reg2)) begin
				litespisdrphycore_sink_ready = 1'd1;
			end
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	litespisdrphycore_en = 1'd0;
	case (litespiphy_state)
		1'd1: begin
			litespisdrphycore_en = 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	litespisdrphycore_sr_in_shift = 1'd0;
	case (litespiphy_state)
		1'd1: begin
			if (litespisdrphycore_posedge_reg2) begin
				litespisdrphycore_sr_in_shift = 1'd1;
			end
		end
		2'd2: begin
			if (((litespisdrphycore_spi_clk_divisor > 1'd0) | litespisdrphycore_posedge_reg2)) begin
				litespisdrphycore_sr_in_shift = (litespisdrphycore_spi_clk_divisor == 1'd0);
			end
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	litespisdrphycore_sr_cnt_litespiphy_next_value = 8'd0;
	case (litespiphy_state)
		1'd1: begin
			if (litespisdrphycore_negedge) begin
				litespisdrphycore_sr_cnt_litespiphy_next_value = (litespisdrphycore_sr_cnt - litespisdrphycore_sink_payload_width);
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((litespisdrphycore_cs_enable & litespisdrphycore_sink_valid)) begin
				litespisdrphycore_sr_cnt_litespiphy_next_value = (litespisdrphycore_sink_payload_len - litespisdrphycore_sink_payload_width);
			end
		end
	endcase
end
always @(*) begin
	litespisdrphycore_sr_cnt_litespiphy_next_value_ce = 1'd0;
	case (litespiphy_state)
		1'd1: begin
			if (litespisdrphycore_negedge) begin
				litespisdrphycore_sr_cnt_litespiphy_next_value_ce = 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((litespisdrphycore_cs_enable & litespisdrphycore_sink_valid)) begin
				litespisdrphycore_sr_cnt_litespiphy_next_value_ce = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	litespisdrphycore_source_valid = 1'd0;
	case (litespiphy_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			litespisdrphycore_source_valid = 1'd1;
		end
		default: begin
		end
	endcase
end
assign litespisdrphycore_cs = crossbar_cs;
assign litespimmap_sink_valid = port_mmap_user_port_source_valid;
assign port_mmap_user_port_source_ready = litespimmap_sink_ready;
assign litespimmap_sink_first = port_mmap_user_port_source_first;
assign litespimmap_sink_last = port_mmap_user_port_source_last;
assign litespimmap_sink_payload_data = port_mmap_user_port_source_payload_data;
assign port_mmap_user_port_sink_valid = litespimmap_source_valid;
assign litespimmap_source_ready = port_mmap_user_port_sink_ready;
assign port_mmap_user_port_sink_first = litespimmap_source_first;
assign port_mmap_user_port_sink_last = litespimmap_source_last;
assign port_mmap_user_port_sink_payload_data = litespimmap_source_payload_data;
assign port_mmap_user_port_sink_payload_len = litespimmap_source_payload_len;
assign port_mmap_user_port_sink_payload_width = litespimmap_source_payload_width;
assign port_mmap_user_port_sink_payload_mask = litespimmap_source_payload_mask;
assign master_sink_sink_valid = port_master_user_port_source_valid;
assign port_master_user_port_source_ready = master_sink_sink_ready;
assign master_sink_sink_first = port_master_user_port_source_first;
assign master_sink_sink_last = port_master_user_port_source_last;
assign master_sink_sink_payload_data = port_master_user_port_source_payload_data;
assign port_master_user_port_sink_valid = master_source_source_valid;
assign master_source_source_ready = port_master_user_port_sink_ready;
assign port_master_user_port_sink_first = master_source_source_first;
assign port_master_user_port_sink_last = master_source_source_last;
assign port_master_user_port_sink_payload_data = master_source_source_payload_data;
assign port_master_user_port_sink_payload_len = master_source_source_payload_len;
assign port_master_user_port_sink_payload_width = master_source_source_payload_width;
assign port_master_user_port_sink_payload_mask = master_source_source_payload_mask;
assign litespisdrphycore_sink_valid = crossbar_source_valid;
assign crossbar_source_ready = litespisdrphycore_sink_ready;
assign litespisdrphycore_sink_first = crossbar_source_first;
assign litespisdrphycore_sink_last = crossbar_source_last;
assign litespisdrphycore_sink_payload_data = crossbar_source_payload_data;
assign litespisdrphycore_sink_payload_len = crossbar_source_payload_len;
assign litespisdrphycore_sink_payload_width = crossbar_source_payload_width;
assign litespisdrphycore_sink_payload_mask = crossbar_source_payload_mask;
assign crossbar_sink_valid = litespisdrphycore_source_valid;
assign litespisdrphycore_source_ready = crossbar_sink_ready;
assign crossbar_sink_first = litespisdrphycore_source_first;
assign crossbar_sink_last = litespisdrphycore_source_last;
assign crossbar_sink_payload_data = litespisdrphycore_source_payload_data;
assign port_mmap_internal_port_sink_valid = port_mmap_user_port_sink_valid;
assign port_mmap_user_port_sink_ready = port_mmap_internal_port_sink_ready;
assign port_mmap_internal_port_sink_first = port_mmap_user_port_sink_first;
assign port_mmap_internal_port_sink_last = port_mmap_user_port_sink_last;
assign port_mmap_internal_port_sink_payload_data = port_mmap_user_port_sink_payload_data;
assign port_mmap_internal_port_sink_payload_len = port_mmap_user_port_sink_payload_len;
assign port_mmap_internal_port_sink_payload_width = port_mmap_user_port_sink_payload_width;
assign port_mmap_internal_port_sink_payload_mask = port_mmap_user_port_sink_payload_mask;
assign port_mmap_user_port_source_valid = port_mmap_internal_port_source_valid;
assign port_mmap_internal_port_source_ready = port_mmap_user_port_source_ready;
assign port_mmap_user_port_source_first = port_mmap_internal_port_source_first;
assign port_mmap_user_port_source_last = port_mmap_internal_port_source_last;
assign port_mmap_user_port_source_payload_data = port_mmap_internal_port_source_payload_data;
assign port_mmap_request = litespimmap_cs;
assign port_master_internal_port_sink_valid = port_master_user_port_sink_valid;
assign port_master_user_port_sink_ready = port_master_internal_port_sink_ready;
assign port_master_internal_port_sink_first = port_master_user_port_sink_first;
assign port_master_internal_port_sink_last = port_master_user_port_sink_last;
assign port_master_internal_port_sink_payload_data = port_master_user_port_sink_payload_data;
assign port_master_internal_port_sink_payload_len = port_master_user_port_sink_payload_len;
assign port_master_internal_port_sink_payload_width = port_master_user_port_sink_payload_width;
assign port_master_internal_port_sink_payload_mask = port_master_user_port_sink_payload_mask;
assign port_master_user_port_source_valid = port_master_internal_port_source_valid;
assign port_master_internal_port_source_ready = port_master_user_port_source_ready;
assign port_master_user_port_source_first = port_master_internal_port_source_first;
assign port_master_user_port_source_last = port_master_internal_port_source_last;
assign port_master_user_port_source_payload_data = port_master_internal_port_source_payload_data;
assign port_master_request = master_cs;
assign litespi_tx_mux_endpoint0_sink_valid = port_mmap_internal_port_sink_valid;
assign port_mmap_internal_port_sink_ready = litespi_tx_mux_endpoint0_sink_ready;
assign litespi_tx_mux_endpoint0_sink_first = port_mmap_internal_port_sink_first;
assign litespi_tx_mux_endpoint0_sink_last = port_mmap_internal_port_sink_last;
assign litespi_tx_mux_endpoint0_sink_payload_data = port_mmap_internal_port_sink_payload_data;
assign litespi_tx_mux_endpoint0_sink_payload_len = port_mmap_internal_port_sink_payload_len;
assign litespi_tx_mux_endpoint0_sink_payload_width = port_mmap_internal_port_sink_payload_width;
assign litespi_tx_mux_endpoint0_sink_payload_mask = port_mmap_internal_port_sink_payload_mask;
assign port_mmap_internal_port_source_valid = litespi_rx_demux_endpoint0_source_valid;
assign litespi_rx_demux_endpoint0_source_ready = port_mmap_internal_port_source_ready;
assign port_mmap_internal_port_source_first = litespi_rx_demux_endpoint0_source_first;
assign port_mmap_internal_port_source_last = litespi_rx_demux_endpoint0_source_last;
assign port_mmap_internal_port_source_payload_data = litespi_rx_demux_endpoint0_source_payload_data;
assign litespi_tx_mux_endpoint1_sink_valid = port_master_internal_port_sink_valid;
assign port_master_internal_port_sink_ready = litespi_tx_mux_endpoint1_sink_ready;
assign litespi_tx_mux_endpoint1_sink_first = port_master_internal_port_sink_first;
assign litespi_tx_mux_endpoint1_sink_last = port_master_internal_port_sink_last;
assign litespi_tx_mux_endpoint1_sink_payload_data = port_master_internal_port_sink_payload_data;
assign litespi_tx_mux_endpoint1_sink_payload_len = port_master_internal_port_sink_payload_len;
assign litespi_tx_mux_endpoint1_sink_payload_width = port_master_internal_port_sink_payload_width;
assign litespi_tx_mux_endpoint1_sink_payload_mask = port_master_internal_port_sink_payload_mask;
assign port_master_internal_port_source_valid = litespi_rx_demux_endpoint1_source_valid;
assign litespi_rx_demux_endpoint1_source_ready = port_master_internal_port_source_ready;
assign port_master_internal_port_source_first = litespi_rx_demux_endpoint1_source_first;
assign port_master_internal_port_source_last = litespi_rx_demux_endpoint1_source_last;
assign port_master_internal_port_source_payload_data = litespi_rx_demux_endpoint1_source_payload_data;
assign litespi_request = {port_master_request, port_mmap_request};
assign crossbar_source_valid = litespi_tx_mux_source_valid;
assign litespi_tx_mux_source_ready = crossbar_source_ready;
assign crossbar_source_first = litespi_tx_mux_source_first;
assign crossbar_source_last = litespi_tx_mux_source_last;
assign crossbar_source_payload_data = litespi_tx_mux_source_payload_data;
assign crossbar_source_payload_len = litespi_tx_mux_source_payload_len;
assign crossbar_source_payload_width = litespi_tx_mux_source_payload_width;
assign crossbar_source_payload_mask = litespi_tx_mux_source_payload_mask;
assign litespi_tx_mux_sel = litespi_grant;
assign litespi_rx_demux_sink_valid = crossbar_sink_valid;
assign crossbar_sink_ready = litespi_rx_demux_sink_ready;
assign litespi_rx_demux_sink_first = crossbar_sink_first;
assign litespi_rx_demux_sink_last = crossbar_sink_last;
assign litespi_rx_demux_sink_payload_data = crossbar_sink_payload_data;
assign litespi_rx_demux_sel = litespi_grant;
always @(*) begin
	crossbar_cs = 1'd0;
	case (litespi_grant)
		1'd0: begin
			crossbar_cs = litespimmap_cs;
		end
		1'd1: begin
			crossbar_cs = master_cs;
		end
	endcase
end
always @(*) begin
	litespi_tx_mux_source_payload_mask = 8'd0;
	case (litespi_tx_mux_sel)
		1'd0: begin
			litespi_tx_mux_source_payload_mask = litespi_tx_mux_endpoint0_sink_payload_mask;
		end
		1'd1: begin
			litespi_tx_mux_source_payload_mask = litespi_tx_mux_endpoint1_sink_payload_mask;
		end
	endcase
end
always @(*) begin
	litespi_tx_mux_endpoint0_sink_ready = 1'd0;
	case (litespi_tx_mux_sel)
		1'd0: begin
			litespi_tx_mux_endpoint0_sink_ready = litespi_tx_mux_source_ready;
		end
		1'd1: begin
		end
	endcase
end
always @(*) begin
	litespi_tx_mux_source_valid = 1'd0;
	case (litespi_tx_mux_sel)
		1'd0: begin
			litespi_tx_mux_source_valid = litespi_tx_mux_endpoint0_sink_valid;
		end
		1'd1: begin
			litespi_tx_mux_source_valid = litespi_tx_mux_endpoint1_sink_valid;
		end
	endcase
end
always @(*) begin
	litespi_tx_mux_endpoint1_sink_ready = 1'd0;
	case (litespi_tx_mux_sel)
		1'd0: begin
		end
		1'd1: begin
			litespi_tx_mux_endpoint1_sink_ready = litespi_tx_mux_source_ready;
		end
	endcase
end
always @(*) begin
	litespi_tx_mux_source_first = 1'd0;
	case (litespi_tx_mux_sel)
		1'd0: begin
			litespi_tx_mux_source_first = litespi_tx_mux_endpoint0_sink_first;
		end
		1'd1: begin
			litespi_tx_mux_source_first = litespi_tx_mux_endpoint1_sink_first;
		end
	endcase
end
always @(*) begin
	litespi_tx_mux_source_last = 1'd0;
	case (litespi_tx_mux_sel)
		1'd0: begin
			litespi_tx_mux_source_last = litespi_tx_mux_endpoint0_sink_last;
		end
		1'd1: begin
			litespi_tx_mux_source_last = litespi_tx_mux_endpoint1_sink_last;
		end
	endcase
end
always @(*) begin
	litespi_tx_mux_source_payload_data = 32'd0;
	case (litespi_tx_mux_sel)
		1'd0: begin
			litespi_tx_mux_source_payload_data = litespi_tx_mux_endpoint0_sink_payload_data;
		end
		1'd1: begin
			litespi_tx_mux_source_payload_data = litespi_tx_mux_endpoint1_sink_payload_data;
		end
	endcase
end
always @(*) begin
	litespi_tx_mux_source_payload_len = 6'd0;
	case (litespi_tx_mux_sel)
		1'd0: begin
			litespi_tx_mux_source_payload_len = litespi_tx_mux_endpoint0_sink_payload_len;
		end
		1'd1: begin
			litespi_tx_mux_source_payload_len = litespi_tx_mux_endpoint1_sink_payload_len;
		end
	endcase
end
always @(*) begin
	litespi_tx_mux_source_payload_width = 4'd0;
	case (litespi_tx_mux_sel)
		1'd0: begin
			litespi_tx_mux_source_payload_width = litespi_tx_mux_endpoint0_sink_payload_width;
		end
		1'd1: begin
			litespi_tx_mux_source_payload_width = litespi_tx_mux_endpoint1_sink_payload_width;
		end
	endcase
end
always @(*) begin
	litespi_rx_demux_endpoint1_source_last = 1'd0;
	case (litespi_rx_demux_sel)
		1'd0: begin
		end
		1'd1: begin
			litespi_rx_demux_endpoint1_source_last = litespi_rx_demux_sink_last;
		end
	endcase
end
always @(*) begin
	litespi_rx_demux_endpoint1_source_payload_data = 32'd0;
	case (litespi_rx_demux_sel)
		1'd0: begin
		end
		1'd1: begin
			litespi_rx_demux_endpoint1_source_payload_data = litespi_rx_demux_sink_payload_data;
		end
	endcase
end
always @(*) begin
	litespi_rx_demux_sink_ready = 1'd0;
	case (litespi_rx_demux_sel)
		1'd0: begin
			litespi_rx_demux_sink_ready = litespi_rx_demux_endpoint0_source_ready;
		end
		1'd1: begin
			litespi_rx_demux_sink_ready = litespi_rx_demux_endpoint1_source_ready;
		end
	endcase
end
always @(*) begin
	litespi_rx_demux_endpoint0_source_valid = 1'd0;
	case (litespi_rx_demux_sel)
		1'd0: begin
			litespi_rx_demux_endpoint0_source_valid = litespi_rx_demux_sink_valid;
		end
		1'd1: begin
		end
	endcase
end
always @(*) begin
	litespi_rx_demux_endpoint0_source_first = 1'd0;
	case (litespi_rx_demux_sel)
		1'd0: begin
			litespi_rx_demux_endpoint0_source_first = litespi_rx_demux_sink_first;
		end
		1'd1: begin
		end
	endcase
end
always @(*) begin
	litespi_rx_demux_endpoint0_source_last = 1'd0;
	case (litespi_rx_demux_sel)
		1'd0: begin
			litespi_rx_demux_endpoint0_source_last = litespi_rx_demux_sink_last;
		end
		1'd1: begin
		end
	endcase
end
always @(*) begin
	litespi_rx_demux_endpoint0_source_payload_data = 32'd0;
	case (litespi_rx_demux_sel)
		1'd0: begin
			litespi_rx_demux_endpoint0_source_payload_data = litespi_rx_demux_sink_payload_data;
		end
		1'd1: begin
		end
	endcase
end
always @(*) begin
	litespi_rx_demux_endpoint1_source_valid = 1'd0;
	case (litespi_rx_demux_sel)
		1'd0: begin
		end
		1'd1: begin
			litespi_rx_demux_endpoint1_source_valid = litespi_rx_demux_sink_valid;
		end
	endcase
end
always @(*) begin
	litespi_rx_demux_endpoint1_source_first = 1'd0;
	case (litespi_rx_demux_sel)
		1'd0: begin
		end
		1'd1: begin
			litespi_rx_demux_endpoint1_source_first = litespi_rx_demux_sink_first;
		end
	endcase
end
assign litespimmap_spi_dummy_bits = litespimmap_storage;
assign litespimmap_done = (litespimmap_count == 1'd0);
always @(*) begin
	litespi_next_state = 4'd0;
	litespi_next_state = litespi_state;
	case (litespi_state)
		1'd1: begin
			if (litespimmap_source_ready) begin
				litespi_next_state = 2'd2;
			end
		end
		2'd2: begin
			if (litespimmap_sink_valid) begin
				litespi_next_state = 2'd3;
			end
		end
		2'd3: begin
			if (litespimmap_source_ready) begin
				litespi_next_state = 3'd4;
			end
		end
		3'd4: begin
			if (litespimmap_sink_valid) begin
				if ((litespimmap_spi_dummy_bits == 1'd0)) begin
					litespi_next_state = 3'd7;
				end else begin
					litespi_next_state = 3'd5;
				end
			end
		end
		3'd5: begin
			if (litespimmap_source_ready) begin
				litespi_next_state = 3'd6;
			end
		end
		3'd6: begin
			if (litespimmap_sink_valid) begin
				litespi_next_state = 3'd7;
			end
		end
		3'd7: begin
			if (litespimmap_source_ready) begin
				litespi_next_state = 4'd8;
			end
		end
		4'd8: begin
			if (litespimmap_sink_valid) begin
				litespi_next_state = 1'd0;
			end
		end
		default: begin
			if (((litespimmap_bus_cyc & litespimmap_bus_stb) & (~litespimmap_bus_we))) begin
				if ((litespimmap_burst_cs & (litespimmap_bus_adr == litespimmap_burst_adr))) begin
					litespi_next_state = 3'd7;
				end else begin
					litespi_next_state = 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	litespimmap_bus_dat_r = 32'd0;
	case (litespi_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
			litespimmap_bus_dat_r = {litespimmap_sink_payload_data[7:0], litespimmap_sink_payload_data[15:8], litespimmap_sink_payload_data[23:16], litespimmap_sink_payload_data[31:24]};
		end
		default: begin
		end
	endcase
end
always @(*) begin
	litespimmap_source_valid = 1'd0;
	case (litespi_state)
		1'd1: begin
			litespimmap_source_valid = 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
			litespimmap_source_valid = 1'd1;
		end
		3'd4: begin
		end
		3'd5: begin
			litespimmap_source_valid = 1'd1;
		end
		3'd6: begin
		end
		3'd7: begin
			litespimmap_source_valid = 1'd1;
		end
		4'd8: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	litespimmap_source_last = 1'd0;
	case (litespi_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
			litespimmap_source_last = 1'd1;
		end
		4'd8: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	litespimmap_bus_ack = 1'd0;
	case (litespi_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
			if (litespimmap_sink_valid) begin
				litespimmap_bus_ack = 1'd1;
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	litespimmap_source_payload_data = 32'd0;
	case (litespi_state)
		1'd1: begin
			litespimmap_source_payload_data = 2'd3;
		end
		2'd2: begin
		end
		2'd3: begin
			litespimmap_source_payload_data = {litespimmap_bus_adr, litespimmap};
		end
		3'd4: begin
		end
		3'd5: begin
			litespimmap_source_payload_data = litespimmap_dummy;
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	litespimmap_source_payload_len = 6'd0;
	case (litespi_state)
		1'd1: begin
			litespimmap_source_payload_len = 4'd8;
		end
		2'd2: begin
		end
		2'd3: begin
			litespimmap_source_payload_len = 5'd24;
		end
		3'd4: begin
		end
		3'd5: begin
			litespimmap_source_payload_len = litespimmap_spi_dummy_bits;
		end
		3'd6: begin
		end
		3'd7: begin
			litespimmap_source_payload_len = 6'd32;
		end
		4'd8: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	litespimmap_burst_cs_litespi_next_value0 = 1'd0;
	case (litespi_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			litespimmap_burst_cs_litespi_next_value0 = 1'd1;
		end
		3'd4: begin
		end
		3'd5: begin
			litespimmap_burst_cs_litespi_next_value0 = 1'd1;
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		default: begin
			litespimmap_burst_cs_litespi_next_value0 = (litespimmap_burst_cs & (~litespimmap_done));
		end
	endcase
end
always @(*) begin
	litespimmap_source_payload_width = 4'd0;
	case (litespi_state)
		1'd1: begin
			litespimmap_source_payload_width = 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
			litespimmap_source_payload_width = 1'd1;
		end
		3'd4: begin
		end
		3'd5: begin
			litespimmap_source_payload_width = 1'd1;
		end
		3'd6: begin
		end
		3'd7: begin
			litespimmap_source_payload_width = 1'd1;
		end
		4'd8: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	litespimmap_burst_cs_litespi_next_value_ce0 = 1'd0;
	case (litespi_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			litespimmap_burst_cs_litespi_next_value_ce0 = 1'd1;
		end
		3'd4: begin
		end
		3'd5: begin
			litespimmap_burst_cs_litespi_next_value_ce0 = 1'd1;
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		default: begin
			litespimmap_burst_cs_litespi_next_value_ce0 = 1'd1;
		end
	endcase
end
always @(*) begin
	litespimmap_source_payload_mask = 8'd0;
	case (litespi_state)
		1'd1: begin
			litespimmap_source_payload_mask = 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
			litespimmap_source_payload_mask = 1'd1;
		end
		3'd4: begin
		end
		3'd5: begin
			litespimmap_source_payload_mask = 1'd1;
		end
		3'd6: begin
		end
		3'd7: begin
			litespimmap_source_payload_mask = 1'd0;
		end
		4'd8: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	litespimmap_cs = 1'd0;
	case (litespi_state)
		1'd1: begin
			litespimmap_cs = 1'd1;
		end
		2'd2: begin
			litespimmap_cs = 1'd1;
		end
		2'd3: begin
			litespimmap_cs = 1'd1;
		end
		3'd4: begin
			litespimmap_cs = 1'd1;
		end
		3'd5: begin
			litespimmap_cs = 1'd1;
		end
		3'd6: begin
			litespimmap_cs = 1'd1;
		end
		3'd7: begin
			litespimmap_cs = 1'd1;
		end
		4'd8: begin
			litespimmap_cs = 1'd1;
		end
		default: begin
			litespimmap_cs = litespimmap_burst_cs;
			if (((litespimmap_bus_cyc & litespimmap_bus_stb) & (~litespimmap_bus_we))) begin
				if ((litespimmap_burst_cs & (litespimmap_bus_adr == litespimmap_burst_adr))) begin
				end else begin
					litespimmap_cs = 1'd0;
				end
			end
		end
	endcase
end
always @(*) begin
	litespimmap_sink_ready = 1'd0;
	case (litespi_state)
		1'd1: begin
		end
		2'd2: begin
			litespimmap_sink_ready = 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
			litespimmap_sink_ready = 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
			litespimmap_sink_ready = 1'd1;
		end
		3'd7: begin
		end
		4'd8: begin
			litespimmap_sink_ready = 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	litespimmap_wait = 1'd0;
	case (litespi_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		default: begin
			litespimmap_wait = 1'd1;
		end
	endcase
end
always @(*) begin
	litespimmap_burst_adr_litespi_next_value1 = 30'd0;
	case (litespi_state)
		1'd1: begin
			litespimmap_burst_adr_litespi_next_value1 = litespimmap_bus_adr;
		end
		2'd2: begin
		end
		2'd3: begin
			litespimmap_burst_adr_litespi_next_value1 = litespimmap_bus_adr;
		end
		3'd4: begin
		end
		3'd5: begin
			litespimmap_burst_adr_litespi_next_value1 = litespimmap_bus_adr;
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
			if (litespimmap_sink_valid) begin
				litespimmap_burst_adr_litespi_next_value1 = (litespimmap_burst_adr + 1'd1);
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	litespimmap_burst_adr_litespi_next_value_ce1 = 1'd0;
	case (litespi_state)
		1'd1: begin
			litespimmap_burst_adr_litespi_next_value_ce1 = 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
			litespimmap_burst_adr_litespi_next_value_ce1 = 1'd1;
		end
		3'd4: begin
		end
		3'd5: begin
			litespimmap_burst_adr_litespi_next_value_ce1 = 1'd1;
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
			if (litespimmap_sink_valid) begin
				litespimmap_burst_adr_litespi_next_value_ce1 = 1'd1;
			end
		end
		default: begin
		end
	endcase
end
assign master_rx_fifo_sink_valid = master_sink_sink_valid;
assign master_sink_sink_ready = master_rx_fifo_sink_ready;
assign master_rx_fifo_sink_first = master_sink_sink_first;
assign master_rx_fifo_sink_last = master_sink_sink_last;
assign master_rx_fifo_sink_payload_data = master_sink_sink_payload_data;
assign master_source_source_valid = master_tx_fifo_source_valid;
assign master_tx_fifo_source_ready = master_source_source_ready;
assign master_source_source_first = master_tx_fifo_source_first;
assign master_source_source_last = master_tx_fifo_source_last;
assign master_source_source_payload_data = master_tx_fifo_source_payload_data;
assign master_source_source_payload_len = master_tx_fifo_source_payload_len;
assign master_source_source_payload_width = master_tx_fifo_source_payload_width;
assign master_source_source_payload_mask = master_tx_fifo_source_payload_mask;
assign master_cs = master_cs_storage;
assign master_tx_fifo_sink_valid = master_rxtx_re;
assign master_tx_ready = master_tx_fifo_sink_ready;
assign master_tx_fifo_sink_payload_data = master_rxtx_r;
assign master_tx_fifo_sink_payload_len = master_len;
assign master_tx_fifo_sink_payload_width = master_width;
assign master_tx_fifo_sink_payload_mask = master_mask;
assign master_tx_fifo_sink_last = 1'd1;
assign master_rx_fifo_source_ready = master_rxtx_we;
assign master_rx_ready = master_rx_fifo_source_valid;
assign master_rxtx_w = master_rx_fifo_source_payload_data;
assign master_tx_fifo_sink_ready = ((~master_tx_fifo_source_valid) | master_tx_fifo_source_ready);
assign master_rx_fifo_sink_ready = ((~master_rx_fifo_source_valid) | master_rx_fifo_source_ready);
assign gpio_mode0_pad = (~gpio_mode0_storage);
assign gpio_mode1_pad = (~gpio_mode1_storage);
assign gpio_inenb_pad = (~gpio_ien_storage);
assign gpio_outenb_pad = (~gpio_oe_storage);
assign gpio_out_pad = gpio_out_storage;
assign mprj_wb_iena = mprj_wb_iena_storage;
assign user_irq_ena = user_irq_ena_storage;
always @(*) begin
	gpioin0_gpioin0_trigger = 1'd0;
	if (gpioin0_gpioin0_mode_storage) begin
		gpioin0_gpioin0_trigger = (gpioin0_in_status ^ gpioin0_gpioin0_in_pads_n_d);
	end else begin
		gpioin0_gpioin0_trigger = (gpioin0_in_status ^ gpioin0_gpioin0_edge_storage);
	end
end
assign gpioin0_i00 = gpioin0_gpioin0_status;
assign gpioin0_i01 = gpioin0_gpioin0_pending;
always @(*) begin
	gpioin0_gpioin0_clear = 1'd0;
	if ((gpioin0_pending_re & gpioin0_pending_r)) begin
		gpioin0_gpioin0_clear = 1'd1;
	end
end
assign gpioin0_gpioin0_irq = (gpioin0_pending_status & gpioin0_enable_storage);
assign gpioin0_gpioin0_status = gpioin0_gpioin0_trigger;
always @(*) begin
	gpioin1_gpioin1_trigger = 1'd0;
	if (gpioin1_gpioin1_mode_storage) begin
		gpioin1_gpioin1_trigger = (gpioin1_in_status ^ gpioin1_gpioin1_in_pads_n_d);
	end else begin
		gpioin1_gpioin1_trigger = (gpioin1_in_status ^ gpioin1_gpioin1_edge_storage);
	end
end
assign gpioin1_i00 = gpioin1_gpioin1_status;
assign gpioin1_i01 = gpioin1_gpioin1_pending;
always @(*) begin
	gpioin1_gpioin1_clear = 1'd0;
	if ((gpioin1_pending_re & gpioin1_pending_r)) begin
		gpioin1_gpioin1_clear = 1'd1;
	end
end
assign gpioin1_gpioin1_irq = (gpioin1_pending_status & gpioin1_enable_storage);
assign gpioin1_gpioin1_status = gpioin1_gpioin1_trigger;
always @(*) begin
	gpioin2_gpioin2_trigger = 1'd0;
	if (gpioin2_gpioin2_mode_storage) begin
		gpioin2_gpioin2_trigger = (gpioin2_in_status ^ gpioin2_gpioin2_in_pads_n_d);
	end else begin
		gpioin2_gpioin2_trigger = (gpioin2_in_status ^ gpioin2_gpioin2_edge_storage);
	end
end
assign gpioin2_i00 = gpioin2_gpioin2_status;
assign gpioin2_i01 = gpioin2_gpioin2_pending;
always @(*) begin
	gpioin2_gpioin2_clear = 1'd0;
	if ((gpioin2_pending_re & gpioin2_pending_r)) begin
		gpioin2_gpioin2_clear = 1'd1;
	end
end
assign gpioin2_gpioin2_irq = (gpioin2_pending_status & gpioin2_enable_storage);
assign gpioin2_gpioin2_status = gpioin2_gpioin2_trigger;
always @(*) begin
	gpioin3_gpioin3_trigger = 1'd0;
	if (gpioin3_gpioin3_mode_storage) begin
		gpioin3_gpioin3_trigger = (gpioin3_in_status ^ gpioin3_gpioin3_in_pads_n_d);
	end else begin
		gpioin3_gpioin3_trigger = (gpioin3_in_status ^ gpioin3_gpioin3_edge_storage);
	end
end
assign gpioin3_i00 = gpioin3_gpioin3_status;
assign gpioin3_i01 = gpioin3_gpioin3_pending;
always @(*) begin
	gpioin3_gpioin3_clear = 1'd0;
	if ((gpioin3_pending_re & gpioin3_pending_r)) begin
		gpioin3_gpioin3_clear = 1'd1;
	end
end
assign gpioin3_gpioin3_irq = (gpioin3_pending_status & gpioin3_enable_storage);
assign gpioin3_gpioin3_status = gpioin3_gpioin3_trigger;
always @(*) begin
	gpioin4_gpioin4_trigger = 1'd0;
	if (gpioin4_gpioin4_mode_storage) begin
		gpioin4_gpioin4_trigger = (gpioin4_in_status ^ gpioin4_gpioin4_in_pads_n_d);
	end else begin
		gpioin4_gpioin4_trigger = (gpioin4_in_status ^ gpioin4_gpioin4_edge_storage);
	end
end
assign gpioin4_i00 = gpioin4_gpioin4_status;
assign gpioin4_i01 = gpioin4_gpioin4_pending;
always @(*) begin
	gpioin4_gpioin4_clear = 1'd0;
	if ((gpioin4_pending_re & gpioin4_pending_r)) begin
		gpioin4_gpioin4_clear = 1'd1;
	end
end
assign gpioin4_gpioin4_irq = (gpioin4_pending_status & gpioin4_enable_storage);
assign gpioin4_gpioin4_status = gpioin4_gpioin4_trigger;
always @(*) begin
	gpioin5_gpioin5_trigger = 1'd0;
	if (gpioin5_gpioin5_mode_storage) begin
		gpioin5_gpioin5_trigger = (gpioin5_in_status ^ gpioin5_gpioin5_in_pads_n_d);
	end else begin
		gpioin5_gpioin5_trigger = (gpioin5_in_status ^ gpioin5_gpioin5_edge_storage);
	end
end
assign gpioin5_i00 = gpioin5_gpioin5_status;
assign gpioin5_i01 = gpioin5_gpioin5_pending;
always @(*) begin
	gpioin5_gpioin5_clear = 1'd0;
	if ((gpioin5_pending_re & gpioin5_pending_r)) begin
		gpioin5_gpioin5_clear = 1'd1;
	end
end
assign gpioin5_gpioin5_irq = (gpioin5_pending_status & gpioin5_enable_storage);
assign gpioin5_gpioin5_status = gpioin5_gpioin5_trigger;
always @(*) begin
	next_state = 1'd0;
	next_state = state;
	case (state)
		1'd1: begin
			next_state = 1'd0;
		end
		default: begin
			if ((mgmtsoc_wishbone_cyc & mgmtsoc_wishbone_stb)) begin
				next_state = 1'd1;
			end
		end
	endcase
end
always @(*) begin
	mgmtsoc_dat_w = 32'd0;
	case (state)
		1'd1: begin
		end
		default: begin
			mgmtsoc_dat_w = mgmtsoc_wishbone_dat_w;
		end
	endcase
end
always @(*) begin
	mgmtsoc_wishbone_dat_r = 32'd0;
	case (state)
		1'd1: begin
			mgmtsoc_wishbone_dat_r = mgmtsoc_dat_r;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	mgmtsoc_wishbone_ack = 1'd0;
	case (state)
		1'd1: begin
			mgmtsoc_wishbone_ack = 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	mgmtsoc_adr = 14'd0;
	case (state)
		1'd1: begin
		end
		default: begin
			if ((mgmtsoc_wishbone_cyc & mgmtsoc_wishbone_stb)) begin
				mgmtsoc_adr = mgmtsoc_wishbone_adr;
			end
		end
	endcase
end
always @(*) begin
	mgmtsoc_we = 1'd0;
	case (state)
		1'd1: begin
		end
		default: begin
			if ((mgmtsoc_wishbone_cyc & mgmtsoc_wishbone_stb)) begin
				mgmtsoc_we = (mgmtsoc_wishbone_we & (mgmtsoc_wishbone_sel != 1'd0));
			end
		end
	endcase
end
assign shared_adr = array_muxed0;
assign shared_dat_w = array_muxed1;
assign shared_sel = array_muxed2;
assign shared_cyc = array_muxed3;
assign shared_stb = array_muxed4;
assign shared_we = array_muxed5;
assign shared_cti = array_muxed6;
assign shared_bte = array_muxed7;
assign picorv32_idbus_dat_r = shared_dat_r;
assign picorv32_idbus_ack = (shared_ack & (grant == 1'd0));
assign picorv32_idbus_err = (shared_err & (grant == 1'd0));
assign request = {picorv32_idbus_cyc};
assign grant = 1'd0;
always @(*) begin
	slave_sel = 3'd0;
	slave_sel[0] = (shared_adr[29:9] == 19'd262144);
	slave_sel[1] = (shared_adr[29:22] == 1'd0);
	slave_sel[2] = (shared_adr[29:14] == 16'd33280);
end
assign bus_adr = shared_adr;
assign bus_dat_w = shared_dat_w;
assign bus_sel = shared_sel;
assign bus_stb = shared_stb;
assign bus_we = shared_we;
assign bus_cti = shared_cti;
assign bus_bte = shared_bte;
assign litespimmap_bus_adr = shared_adr;
assign litespimmap_bus_dat_w = shared_dat_w;
assign litespimmap_bus_sel = shared_sel;
assign litespimmap_bus_stb = shared_stb;
assign litespimmap_bus_we = shared_we;
assign litespimmap_bus_cti = shared_cti;
assign litespimmap_bus_bte = shared_bte;
assign mgmtsoc_wishbone_adr = shared_adr;
assign mgmtsoc_wishbone_dat_w = shared_dat_w;
assign mgmtsoc_wishbone_sel = shared_sel;
assign mgmtsoc_wishbone_stb = shared_stb;
assign mgmtsoc_wishbone_we = shared_we;
assign mgmtsoc_wishbone_cti = shared_cti;
assign mgmtsoc_wishbone_bte = shared_bte;
assign bus_cyc = (shared_cyc & slave_sel[0]);
assign litespimmap_bus_cyc = (shared_cyc & slave_sel[1]);
assign mgmtsoc_wishbone_cyc = (shared_cyc & slave_sel[2]);
always @(*) begin
	shared_ack = 1'd0;
	shared_ack = ((bus_ack | litespimmap_bus_ack) | mgmtsoc_wishbone_ack);
	if (done) begin
		shared_ack = 1'd1;
	end
end
assign shared_err = ((bus_err | litespimmap_bus_err) | mgmtsoc_wishbone_err);
always @(*) begin
	shared_dat_r = 32'd0;
	shared_dat_r = ((({32{slave_sel_r[0]}} & bus_dat_r) | ({32{slave_sel_r[1]}} & litespimmap_bus_dat_r)) | ({32{slave_sel_r[2]}} & mgmtsoc_wishbone_dat_r));
	if (done) begin
		shared_dat_r = 32'd4294967295;
	end
end
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
	error = 1'd0;
	if (done) begin
		error = 1'd1;
	end
end
assign done = (count == 1'd0);
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 1'd0);
assign csrbank0_reset0_r = interface0_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank0_reset0_re = 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank0_reset0_re = interface0_bank_bus_we;
	end
end
always @(*) begin
	csrbank0_reset0_we = 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank0_reset0_we = (~interface0_bank_bus_we);
	end
end
assign csrbank0_scratch0_r = interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank0_scratch0_we = 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank0_scratch0_we = (~interface0_bank_bus_we);
	end
end
always @(*) begin
	csrbank0_scratch0_re = 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank0_scratch0_re = interface0_bank_bus_we;
	end
end
assign csrbank0_bus_errors_r = interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank0_bus_errors_re = 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank0_bus_errors_re = interface0_bank_bus_we;
	end
end
always @(*) begin
	csrbank0_bus_errors_we = 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank0_bus_errors_we = (~interface0_bank_bus_we);
	end
end
always @(*) begin
	soc_rst = 1'd0;
	if (reset_re) begin
		soc_rst = reset_storage[0];
	end
end
assign cpu_rst = reset_storage[1];
assign csrbank0_reset0_w = reset_storage[1:0];
assign csrbank0_scratch0_w = scratch_storage[31:0];
assign csrbank0_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = csrbank0_bus_errors_we;
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 1'd1);
assign csrbank1_mode10_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_mode10_we = 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank1_mode10_we = (~interface1_bank_bus_we);
	end
end
always @(*) begin
	csrbank1_mode10_re = 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank1_mode10_re = interface1_bank_bus_we;
	end
end
assign csrbank1_mode00_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_mode00_re = 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank1_mode00_re = interface1_bank_bus_we;
	end
end
always @(*) begin
	csrbank1_mode00_we = 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank1_mode00_we = (~interface1_bank_bus_we);
	end
end
assign csrbank1_ien0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_ien0_we = 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank1_ien0_we = (~interface1_bank_bus_we);
	end
end
always @(*) begin
	csrbank1_ien0_re = 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank1_ien0_re = interface1_bank_bus_we;
	end
end
assign csrbank1_oe0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_oe0_we = 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank1_oe0_we = (~interface1_bank_bus_we);
	end
end
always @(*) begin
	csrbank1_oe0_re = 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank1_oe0_re = interface1_bank_bus_we;
	end
end
assign csrbank1_in_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_in_re = 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank1_in_re = interface1_bank_bus_we;
	end
end
always @(*) begin
	csrbank1_in_we = 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank1_in_we = (~interface1_bank_bus_we);
	end
end
assign csrbank1_out0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_out0_we = 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank1_out0_we = (~interface1_bank_bus_we);
	end
end
always @(*) begin
	csrbank1_out0_re = 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank1_out0_re = interface1_bank_bus_we;
	end
end
assign csrbank1_mode10_w = gpio_mode1_storage;
assign csrbank1_mode00_w = gpio_mode0_storage;
assign csrbank1_ien0_w = gpio_ien_storage;
assign csrbank1_oe0_w = gpio_oe_storage;
assign csrbank1_in_w = gpio_in_status;
assign gpio_in_we = csrbank1_in_we;
assign csrbank1_out0_w = gpio_out_storage;
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 2'd2);
assign csrbank2_out0_r = interface2_bank_bus_dat_w[0];
always @(*) begin
	csrbank2_out0_re = 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank2_out0_re = interface2_bank_bus_we;
	end
end
always @(*) begin
	csrbank2_out0_we = 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank2_out0_we = (~interface2_bank_bus_we);
	end
end
assign csrbank2_out0_w = mprj_wb_iena_storage;
assign csrbank3_sel = (interface3_bank_bus_adr[13:9] == 2'd3);
assign csrbank3_mmap_dummy_bits0_r = interface3_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank3_mmap_dummy_bits0_re = 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank3_mmap_dummy_bits0_re = interface3_bank_bus_we;
	end
end
always @(*) begin
	csrbank3_mmap_dummy_bits0_we = 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank3_mmap_dummy_bits0_we = (~interface3_bank_bus_we);
	end
end
assign csrbank3_master_cs0_r = interface3_bank_bus_dat_w[0];
always @(*) begin
	csrbank3_master_cs0_we = 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank3_master_cs0_we = (~interface3_bank_bus_we);
	end
end
always @(*) begin
	csrbank3_master_cs0_re = 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank3_master_cs0_re = interface3_bank_bus_we;
	end
end
assign csrbank3_master_phyconfig0_r = interface3_bank_bus_dat_w[23:0];
always @(*) begin
	csrbank3_master_phyconfig0_we = 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank3_master_phyconfig0_we = (~interface3_bank_bus_we);
	end
end
always @(*) begin
	csrbank3_master_phyconfig0_re = 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank3_master_phyconfig0_re = interface3_bank_bus_we;
	end
end
assign master_rxtx_r = interface3_bank_bus_dat_w[31:0];
always @(*) begin
	master_rxtx_re = 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd3))) begin
		master_rxtx_re = interface3_bank_bus_we;
	end
end
always @(*) begin
	master_rxtx_we = 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd3))) begin
		master_rxtx_we = (~interface3_bank_bus_we);
	end
end
assign csrbank3_master_status_r = interface3_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank3_master_status_re = 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank3_master_status_re = interface3_bank_bus_we;
	end
end
always @(*) begin
	csrbank3_master_status_we = 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank3_master_status_we = (~interface3_bank_bus_we);
	end
end
assign csrbank3_mmap_dummy_bits0_w = litespimmap_storage[7:0];
assign csrbank3_master_cs0_w = master_cs_storage;
assign master_len = master_phyconfig_storage[7:0];
assign master_width = master_phyconfig_storage[11:8];
assign master_mask = master_phyconfig_storage[23:16];
assign csrbank3_master_phyconfig0_w = master_phyconfig_storage[23:0];
always @(*) begin
	master_status_status = 2'd0;
	master_status_status[0] = master_tx_ready;
	master_status_status[1] = master_rx_ready;
end
assign csrbank3_master_status_w = master_status_status[1:0];
assign master_status_we = csrbank3_master_status_we;
assign csrbank4_sel = (interface4_bank_bus_adr[13:9] == 3'd4);
assign csrbank4_clk_divisor0_r = interface4_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank4_clk_divisor0_we = 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank4_clk_divisor0_we = (~interface4_bank_bus_we);
	end
end
always @(*) begin
	csrbank4_clk_divisor0_re = 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank4_clk_divisor0_re = interface4_bank_bus_we;
	end
end
assign csrbank4_clk_divisor0_w = litespisdrphycore_storage[7:0];
assign csrbank5_sel = (interface5_bank_bus_adr[13:9] == 3'd5);
assign csrbank5_in_r = interface5_bank_bus_dat_w[0];
always @(*) begin
	csrbank5_in_we = 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank5_in_we = (~interface5_bank_bus_we);
	end
end
always @(*) begin
	csrbank5_in_re = 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank5_in_re = interface5_bank_bus_we;
	end
end
assign csrbank5_mode0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
	csrbank5_mode0_re = 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank5_mode0_re = interface5_bank_bus_we;
	end
end
always @(*) begin
	csrbank5_mode0_we = 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank5_mode0_we = (~interface5_bank_bus_we);
	end
end
assign csrbank5_edge0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
	csrbank5_edge0_we = 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank5_edge0_we = (~interface5_bank_bus_we);
	end
end
always @(*) begin
	csrbank5_edge0_re = 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank5_edge0_re = interface5_bank_bus_we;
	end
end
assign csrbank5_ev_status_r = interface5_bank_bus_dat_w[0];
always @(*) begin
	csrbank5_ev_status_we = 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank5_ev_status_we = (~interface5_bank_bus_we);
	end
end
always @(*) begin
	csrbank5_ev_status_re = 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank5_ev_status_re = interface5_bank_bus_we;
	end
end
assign csrbank5_ev_pending_r = interface5_bank_bus_dat_w[0];
always @(*) begin
	csrbank5_ev_pending_re = 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank5_ev_pending_re = interface5_bank_bus_we;
	end
end
always @(*) begin
	csrbank5_ev_pending_we = 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank5_ev_pending_we = (~interface5_bank_bus_we);
	end
end
assign csrbank5_ev_enable0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
	csrbank5_ev_enable0_we = 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank5_ev_enable0_we = (~interface5_bank_bus_we);
	end
end
always @(*) begin
	csrbank5_ev_enable0_re = 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank5_ev_enable0_re = interface5_bank_bus_we;
	end
end
assign csrbank5_in_w = gpioin0_in_status;
assign gpioin0_in_we = csrbank5_in_we;
assign csrbank5_mode0_w = gpioin0_gpioin0_mode_storage;
assign csrbank5_edge0_w = gpioin0_gpioin0_edge_storage;
assign gpioin0_status_status = gpioin0_i00;
assign csrbank5_ev_status_w = gpioin0_status_status;
assign gpioin0_status_we = csrbank5_ev_status_we;
assign gpioin0_pending_status = gpioin0_i01;
assign csrbank5_ev_pending_w = gpioin0_pending_status;
assign gpioin0_pending_we = csrbank5_ev_pending_we;
assign gpioin0_i02 = gpioin0_enable_storage;
assign csrbank5_ev_enable0_w = gpioin0_enable_storage;
assign csrbank6_sel = (interface6_bank_bus_adr[13:9] == 3'd6);
assign csrbank6_in_r = interface6_bank_bus_dat_w[0];
always @(*) begin
	csrbank6_in_re = 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank6_in_re = interface6_bank_bus_we;
	end
end
always @(*) begin
	csrbank6_in_we = 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank6_in_we = (~interface6_bank_bus_we);
	end
end
assign csrbank6_mode0_r = interface6_bank_bus_dat_w[0];
always @(*) begin
	csrbank6_mode0_re = 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank6_mode0_re = interface6_bank_bus_we;
	end
end
always @(*) begin
	csrbank6_mode0_we = 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank6_mode0_we = (~interface6_bank_bus_we);
	end
end
assign csrbank6_edge0_r = interface6_bank_bus_dat_w[0];
always @(*) begin
	csrbank6_edge0_we = 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank6_edge0_we = (~interface6_bank_bus_we);
	end
end
always @(*) begin
	csrbank6_edge0_re = 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank6_edge0_re = interface6_bank_bus_we;
	end
end
assign csrbank6_ev_status_r = interface6_bank_bus_dat_w[0];
always @(*) begin
	csrbank6_ev_status_re = 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank6_ev_status_re = interface6_bank_bus_we;
	end
end
always @(*) begin
	csrbank6_ev_status_we = 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank6_ev_status_we = (~interface6_bank_bus_we);
	end
end
assign csrbank6_ev_pending_r = interface6_bank_bus_dat_w[0];
always @(*) begin
	csrbank6_ev_pending_re = 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank6_ev_pending_re = interface6_bank_bus_we;
	end
end
always @(*) begin
	csrbank6_ev_pending_we = 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank6_ev_pending_we = (~interface6_bank_bus_we);
	end
end
assign csrbank6_ev_enable0_r = interface6_bank_bus_dat_w[0];
always @(*) begin
	csrbank6_ev_enable0_we = 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank6_ev_enable0_we = (~interface6_bank_bus_we);
	end
end
always @(*) begin
	csrbank6_ev_enable0_re = 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank6_ev_enable0_re = interface6_bank_bus_we;
	end
end
assign csrbank6_in_w = gpioin1_in_status;
assign gpioin1_in_we = csrbank6_in_we;
assign csrbank6_mode0_w = gpioin1_gpioin1_mode_storage;
assign csrbank6_edge0_w = gpioin1_gpioin1_edge_storage;
assign gpioin1_status_status = gpioin1_i00;
assign csrbank6_ev_status_w = gpioin1_status_status;
assign gpioin1_status_we = csrbank6_ev_status_we;
assign gpioin1_pending_status = gpioin1_i01;
assign csrbank6_ev_pending_w = gpioin1_pending_status;
assign gpioin1_pending_we = csrbank6_ev_pending_we;
assign gpioin1_i02 = gpioin1_enable_storage;
assign csrbank6_ev_enable0_w = gpioin1_enable_storage;
assign csrbank7_sel = (interface7_bank_bus_adr[13:9] == 3'd7);
assign csrbank7_in_r = interface7_bank_bus_dat_w[0];
always @(*) begin
	csrbank7_in_re = 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank7_in_re = interface7_bank_bus_we;
	end
end
always @(*) begin
	csrbank7_in_we = 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank7_in_we = (~interface7_bank_bus_we);
	end
end
assign csrbank7_mode0_r = interface7_bank_bus_dat_w[0];
always @(*) begin
	csrbank7_mode0_re = 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank7_mode0_re = interface7_bank_bus_we;
	end
end
always @(*) begin
	csrbank7_mode0_we = 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank7_mode0_we = (~interface7_bank_bus_we);
	end
end
assign csrbank7_edge0_r = interface7_bank_bus_dat_w[0];
always @(*) begin
	csrbank7_edge0_we = 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank7_edge0_we = (~interface7_bank_bus_we);
	end
end
always @(*) begin
	csrbank7_edge0_re = 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank7_edge0_re = interface7_bank_bus_we;
	end
end
assign csrbank7_ev_status_r = interface7_bank_bus_dat_w[0];
always @(*) begin
	csrbank7_ev_status_re = 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank7_ev_status_re = interface7_bank_bus_we;
	end
end
always @(*) begin
	csrbank7_ev_status_we = 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank7_ev_status_we = (~interface7_bank_bus_we);
	end
end
assign csrbank7_ev_pending_r = interface7_bank_bus_dat_w[0];
always @(*) begin
	csrbank7_ev_pending_re = 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank7_ev_pending_re = interface7_bank_bus_we;
	end
end
always @(*) begin
	csrbank7_ev_pending_we = 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank7_ev_pending_we = (~interface7_bank_bus_we);
	end
end
assign csrbank7_ev_enable0_r = interface7_bank_bus_dat_w[0];
always @(*) begin
	csrbank7_ev_enable0_we = 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank7_ev_enable0_we = (~interface7_bank_bus_we);
	end
end
always @(*) begin
	csrbank7_ev_enable0_re = 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank7_ev_enable0_re = interface7_bank_bus_we;
	end
end
assign csrbank7_in_w = gpioin2_in_status;
assign gpioin2_in_we = csrbank7_in_we;
assign csrbank7_mode0_w = gpioin2_gpioin2_mode_storage;
assign csrbank7_edge0_w = gpioin2_gpioin2_edge_storage;
assign gpioin2_status_status = gpioin2_i00;
assign csrbank7_ev_status_w = gpioin2_status_status;
assign gpioin2_status_we = csrbank7_ev_status_we;
assign gpioin2_pending_status = gpioin2_i01;
assign csrbank7_ev_pending_w = gpioin2_pending_status;
assign gpioin2_pending_we = csrbank7_ev_pending_we;
assign gpioin2_i02 = gpioin2_enable_storage;
assign csrbank7_ev_enable0_w = gpioin2_enable_storage;
assign csrbank8_sel = (interface8_bank_bus_adr[13:9] == 4'd8);
assign csrbank8_in_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_in_re = 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank8_in_re = interface8_bank_bus_we;
	end
end
always @(*) begin
	csrbank8_in_we = 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank8_in_we = (~interface8_bank_bus_we);
	end
end
assign csrbank8_mode0_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_mode0_we = 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank8_mode0_we = (~interface8_bank_bus_we);
	end
end
always @(*) begin
	csrbank8_mode0_re = 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank8_mode0_re = interface8_bank_bus_we;
	end
end
assign csrbank8_edge0_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_edge0_we = 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank8_edge0_we = (~interface8_bank_bus_we);
	end
end
always @(*) begin
	csrbank8_edge0_re = 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank8_edge0_re = interface8_bank_bus_we;
	end
end
assign csrbank8_ev_status_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_ev_status_re = 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank8_ev_status_re = interface8_bank_bus_we;
	end
end
always @(*) begin
	csrbank8_ev_status_we = 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank8_ev_status_we = (~interface8_bank_bus_we);
	end
end
assign csrbank8_ev_pending_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_ev_pending_we = 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank8_ev_pending_we = (~interface8_bank_bus_we);
	end
end
always @(*) begin
	csrbank8_ev_pending_re = 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank8_ev_pending_re = interface8_bank_bus_we;
	end
end
assign csrbank8_ev_enable0_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_ev_enable0_we = 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank8_ev_enable0_we = (~interface8_bank_bus_we);
	end
end
always @(*) begin
	csrbank8_ev_enable0_re = 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank8_ev_enable0_re = interface8_bank_bus_we;
	end
end
assign csrbank8_in_w = gpioin3_in_status;
assign gpioin3_in_we = csrbank8_in_we;
assign csrbank8_mode0_w = gpioin3_gpioin3_mode_storage;
assign csrbank8_edge0_w = gpioin3_gpioin3_edge_storage;
assign gpioin3_status_status = gpioin3_i00;
assign csrbank8_ev_status_w = gpioin3_status_status;
assign gpioin3_status_we = csrbank8_ev_status_we;
assign gpioin3_pending_status = gpioin3_i01;
assign csrbank8_ev_pending_w = gpioin3_pending_status;
assign gpioin3_pending_we = csrbank8_ev_pending_we;
assign gpioin3_i02 = gpioin3_enable_storage;
assign csrbank8_ev_enable0_w = gpioin3_enable_storage;
assign csrbank9_sel = (interface9_bank_bus_adr[13:9] == 4'd9);
assign csrbank9_in_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_in_re = 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank9_in_re = interface9_bank_bus_we;
	end
end
always @(*) begin
	csrbank9_in_we = 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank9_in_we = (~interface9_bank_bus_we);
	end
end
assign csrbank9_mode0_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_mode0_we = 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank9_mode0_we = (~interface9_bank_bus_we);
	end
end
always @(*) begin
	csrbank9_mode0_re = 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank9_mode0_re = interface9_bank_bus_we;
	end
end
assign csrbank9_edge0_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_edge0_re = 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank9_edge0_re = interface9_bank_bus_we;
	end
end
always @(*) begin
	csrbank9_edge0_we = 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank9_edge0_we = (~interface9_bank_bus_we);
	end
end
assign csrbank9_ev_status_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_ev_status_re = 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank9_ev_status_re = interface9_bank_bus_we;
	end
end
always @(*) begin
	csrbank9_ev_status_we = 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank9_ev_status_we = (~interface9_bank_bus_we);
	end
end
assign csrbank9_ev_pending_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_ev_pending_we = 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank9_ev_pending_we = (~interface9_bank_bus_we);
	end
end
always @(*) begin
	csrbank9_ev_pending_re = 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank9_ev_pending_re = interface9_bank_bus_we;
	end
end
assign csrbank9_ev_enable0_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_ev_enable0_re = 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank9_ev_enable0_re = interface9_bank_bus_we;
	end
end
always @(*) begin
	csrbank9_ev_enable0_we = 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank9_ev_enable0_we = (~interface9_bank_bus_we);
	end
end
assign csrbank9_in_w = gpioin4_in_status;
assign gpioin4_in_we = csrbank9_in_we;
assign csrbank9_mode0_w = gpioin4_gpioin4_mode_storage;
assign csrbank9_edge0_w = gpioin4_gpioin4_edge_storage;
assign gpioin4_status_status = gpioin4_i00;
assign csrbank9_ev_status_w = gpioin4_status_status;
assign gpioin4_status_we = csrbank9_ev_status_we;
assign gpioin4_pending_status = gpioin4_i01;
assign csrbank9_ev_pending_w = gpioin4_pending_status;
assign gpioin4_pending_we = csrbank9_ev_pending_we;
assign gpioin4_i02 = gpioin4_enable_storage;
assign csrbank9_ev_enable0_w = gpioin4_enable_storage;
assign csrbank10_sel = (interface10_bank_bus_adr[13:9] == 4'd10);
assign csrbank10_in_r = interface10_bank_bus_dat_w[0];
always @(*) begin
	csrbank10_in_we = 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank10_in_we = (~interface10_bank_bus_we);
	end
end
always @(*) begin
	csrbank10_in_re = 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank10_in_re = interface10_bank_bus_we;
	end
end
assign csrbank10_mode0_r = interface10_bank_bus_dat_w[0];
always @(*) begin
	csrbank10_mode0_we = 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank10_mode0_we = (~interface10_bank_bus_we);
	end
end
always @(*) begin
	csrbank10_mode0_re = 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank10_mode0_re = interface10_bank_bus_we;
	end
end
assign csrbank10_edge0_r = interface10_bank_bus_dat_w[0];
always @(*) begin
	csrbank10_edge0_re = 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank10_edge0_re = interface10_bank_bus_we;
	end
end
always @(*) begin
	csrbank10_edge0_we = 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank10_edge0_we = (~interface10_bank_bus_we);
	end
end
assign csrbank10_ev_status_r = interface10_bank_bus_dat_w[0];
always @(*) begin
	csrbank10_ev_status_we = 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank10_ev_status_we = (~interface10_bank_bus_we);
	end
end
always @(*) begin
	csrbank10_ev_status_re = 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank10_ev_status_re = interface10_bank_bus_we;
	end
end
assign csrbank10_ev_pending_r = interface10_bank_bus_dat_w[0];
always @(*) begin
	csrbank10_ev_pending_we = 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank10_ev_pending_we = (~interface10_bank_bus_we);
	end
end
always @(*) begin
	csrbank10_ev_pending_re = 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank10_ev_pending_re = interface10_bank_bus_we;
	end
end
assign csrbank10_ev_enable0_r = interface10_bank_bus_dat_w[0];
always @(*) begin
	csrbank10_ev_enable0_re = 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank10_ev_enable0_re = interface10_bank_bus_we;
	end
end
always @(*) begin
	csrbank10_ev_enable0_we = 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank10_ev_enable0_we = (~interface10_bank_bus_we);
	end
end
assign csrbank10_in_w = gpioin5_in_status;
assign gpioin5_in_we = csrbank10_in_we;
assign csrbank10_mode0_w = gpioin5_gpioin5_mode_storage;
assign csrbank10_edge0_w = gpioin5_gpioin5_edge_storage;
assign gpioin5_status_status = gpioin5_i00;
assign csrbank10_ev_status_w = gpioin5_status_status;
assign gpioin5_status_we = csrbank10_ev_status_we;
assign gpioin5_pending_status = gpioin5_i01;
assign csrbank10_ev_pending_w = gpioin5_pending_status;
assign gpioin5_pending_we = csrbank10_ev_pending_we;
assign gpioin5_i02 = gpioin5_enable_storage;
assign csrbank10_ev_enable0_w = gpioin5_enable_storage;
assign csrbank11_sel = (interface11_bank_bus_adr[13:9] == 4'd11);
assign csrbank11_out0_r = interface11_bank_bus_dat_w[2:0];
always @(*) begin
	csrbank11_out0_we = 1'd0;
	if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank11_out0_we = (~interface11_bank_bus_we);
	end
end
always @(*) begin
	csrbank11_out0_re = 1'd0;
	if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank11_out0_re = interface11_bank_bus_we;
	end
end
assign csrbank11_out0_w = user_irq_ena_storage[2:0];
assign csr_interconnect_adr = mgmtsoc_adr;
assign csr_interconnect_we = mgmtsoc_we;
assign csr_interconnect_dat_w = mgmtsoc_dat_w;
assign mgmtsoc_dat_r = csr_interconnect_dat_r;
assign interface0_bank_bus_adr = csr_interconnect_adr;
assign interface1_bank_bus_adr = csr_interconnect_adr;
assign interface2_bank_bus_adr = csr_interconnect_adr;
assign interface3_bank_bus_adr = csr_interconnect_adr;
assign interface4_bank_bus_adr = csr_interconnect_adr;
assign interface5_bank_bus_adr = csr_interconnect_adr;
assign interface6_bank_bus_adr = csr_interconnect_adr;
assign interface7_bank_bus_adr = csr_interconnect_adr;
assign interface8_bank_bus_adr = csr_interconnect_adr;
assign interface9_bank_bus_adr = csr_interconnect_adr;
assign interface10_bank_bus_adr = csr_interconnect_adr;
assign interface11_bank_bus_adr = csr_interconnect_adr;
assign interface0_bank_bus_we = csr_interconnect_we;
assign interface1_bank_bus_we = csr_interconnect_we;
assign interface2_bank_bus_we = csr_interconnect_we;
assign interface3_bank_bus_we = csr_interconnect_we;
assign interface4_bank_bus_we = csr_interconnect_we;
assign interface5_bank_bus_we = csr_interconnect_we;
assign interface6_bank_bus_we = csr_interconnect_we;
assign interface7_bank_bus_we = csr_interconnect_we;
assign interface8_bank_bus_we = csr_interconnect_we;
assign interface9_bank_bus_we = csr_interconnect_we;
assign interface10_bank_bus_we = csr_interconnect_we;
assign interface11_bank_bus_we = csr_interconnect_we;
assign interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface5_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface6_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface7_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface8_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface9_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface10_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface11_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((((((((((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r) | interface3_bank_bus_dat_r) | interface4_bank_bus_dat_r) | interface5_bank_bus_dat_r) | interface6_bank_bus_dat_r) | interface7_bank_bus_dat_r) | interface8_bank_bus_dat_r) | interface9_bank_bus_dat_r) | interface10_bank_bus_dat_r) | interface11_bank_bus_dat_r);
always @(*) begin
	array_muxed0 = 30'd0;
	case (grant)
		default: begin
			array_muxed0 = picorv32_idbus_adr;
		end
	endcase
end
always @(*) begin
	array_muxed1 = 32'd0;
	case (grant)
		default: begin
			array_muxed1 = picorv32_idbus_dat_w;
		end
	endcase
end
always @(*) begin
	array_muxed2 = 4'd0;
	case (grant)
		default: begin
			array_muxed2 = picorv32_idbus_sel;
		end
	endcase
end
always @(*) begin
	array_muxed3 = 1'd0;
	case (grant)
		default: begin
			array_muxed3 = picorv32_idbus_cyc;
		end
	endcase
end
always @(*) begin
	array_muxed4 = 1'd0;
	case (grant)
		default: begin
			array_muxed4 = picorv32_idbus_stb;
		end
	endcase
end
always @(*) begin
	array_muxed5 = 1'd0;
	case (grant)
		default: begin
			array_muxed5 = picorv32_idbus_we;
		end
	endcase
end
always @(*) begin
	array_muxed6 = 3'd0;
	case (grant)
		default: begin
			array_muxed6 = picorv32_idbus_cti;
		end
	endcase
end
always @(*) begin
	array_muxed7 = 2'd0;
	case (grant)
		default: begin
			array_muxed7 = picorv32_idbus_bte;
		end
	endcase
end
assign sdrio_clk = sys_clk_1;
assign sdrio_clk_1 = sys_clk_1;
assign sdrio_clk_2 = sys_clk_1;
assign gpio_in_status = multiregimpl0_regs1;
assign gpioin0_in_status = multiregimpl1_regs1;
assign gpioin1_in_status = multiregimpl2_regs1;
assign gpioin2_in_status = multiregimpl3_regs1;
assign gpioin3_in_status = multiregimpl4_regs1;
assign gpioin4_in_status = multiregimpl5_regs1;
assign gpioin5_in_status = multiregimpl6_regs1;

always @(posedge por_clk) begin
	int_rst <= sys_rst;
end

always @(posedge sdrio_clk) begin
	spiflash_clk <= litespisdrphycore_clk;
	spiflash_mosi <= litespisdrphycore_dq_o;
	litespisdrphycore_dq_i[1] <= spiflash_miso;
end

always @(posedge sys_clk_1) begin
	if ((bus_errors != 32'd4294967295)) begin
		if (bus_error) begin
			bus_errors <= (bus_errors + 1'd1);
		end
	end
	bus_ack <= ((bus_stb & bus_cyc) & (~bus_ack));
	if (litespisdrphycore_sr_out_load) begin
		litespisdrphycore_sr_out <= (litespisdrphycore_sink_payload_data <<< (6'd32 - litespisdrphycore_sink_payload_len));
	end
	if (litespisdrphycore_sr_out_shift) begin
		case (litespisdrphycore_sink_payload_width)
			1'd1: begin
				litespisdrphycore_sr_out <= {litespisdrphycore_sr_out, litespisdrphycore0};
			end
			2'd2: begin
				litespisdrphycore_sr_out <= {litespisdrphycore_sr_out, litespisdrphycore1};
			end
			3'd4: begin
				litespisdrphycore_sr_out <= {litespisdrphycore_sr_out, litespisdrphycore2};
			end
			4'd8: begin
				litespisdrphycore_sr_out <= {litespisdrphycore_sr_out, litespisdrphycore3};
			end
		endcase
	end
	if (litespisdrphycore_sr_in_shift) begin
		case (litespisdrphycore_sink_payload_width)
			1'd1: begin
				litespisdrphycore_sr_in <= {litespisdrphycore_sr_in, litespisdrphycore_dq_i[1]};
			end
			2'd2: begin
				litespisdrphycore_sr_in <= {litespisdrphycore_sr_in, litespisdrphycore_dq_i[1:0]};
			end
			3'd4: begin
				litespisdrphycore_sr_in <= {litespisdrphycore_sr_in, litespisdrphycore_dq_i[1:0]};
			end
			4'd8: begin
				litespisdrphycore_sr_in <= {litespisdrphycore_sr_in, litespisdrphycore_dq_i[1:0]};
			end
		endcase
	end
	litespisdrphycore_posedge_reg <= litespisdrphycore_posedge;
	litespisdrphycore_posedge_reg2 <= litespisdrphycore_posedge_reg;
	if ((litespisdrphycore_en | litespisdrphycore_en_int)) begin
		if ((litespisdrphycore_cnt < litespisdrphycore_div)) begin
			litespisdrphycore_cnt <= (litespisdrphycore_cnt + 1'd1);
		end else begin
			litespisdrphycore_cnt <= 1'd0;
			litespisdrphycore_clk <= (~litespisdrphycore_clk);
		end
	end else begin
		litespisdrphycore_clk <= 1'd0;
		litespisdrphycore_cnt <= 1'd0;
	end
	if (litespisdrphycore_wait) begin
		if ((~litespisdrphycore_done)) begin
			litespisdrphycore_count <= (litespisdrphycore_count - 1'd1);
		end
	end else begin
		litespisdrphycore_count <= 4'd11;
	end
	litespiphy_state <= litespiphy_next_state;
	if (litespisdrphycore_sr_cnt_litespiphy_next_value_ce) begin
		litespisdrphycore_sr_cnt <= litespisdrphycore_sr_cnt_litespiphy_next_value;
	end
	case (litespi_grant)
		1'd0: begin
			if ((~litespi_request[0])) begin
				if (litespi_request[1]) begin
					litespi_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~litespi_request[1])) begin
				if (litespi_request[0]) begin
					litespi_grant <= 1'd0;
				end
			end
		end
	endcase
	if (litespimmap_wait) begin
		if ((~litespimmap_done)) begin
			litespimmap_count <= (litespimmap_count - 1'd1);
		end
	end else begin
		litespimmap_count <= 9'd256;
	end
	litespi_state <= litespi_next_state;
	if (litespimmap_burst_cs_litespi_next_value_ce0) begin
		litespimmap_burst_cs <= litespimmap_burst_cs_litespi_next_value0;
	end
	if (litespimmap_burst_adr_litespi_next_value_ce1) begin
		litespimmap_burst_adr <= litespimmap_burst_adr_litespi_next_value1;
	end
	if (((~master_tx_fifo_source_valid) | master_tx_fifo_source_ready)) begin
		master_tx_fifo_source_valid <= master_tx_fifo_sink_valid;
		master_tx_fifo_source_first <= master_tx_fifo_sink_first;
		master_tx_fifo_source_last <= master_tx_fifo_sink_last;
		master_tx_fifo_source_payload_data <= master_tx_fifo_sink_payload_data;
		master_tx_fifo_source_payload_len <= master_tx_fifo_sink_payload_len;
		master_tx_fifo_source_payload_width <= master_tx_fifo_sink_payload_width;
		master_tx_fifo_source_payload_mask <= master_tx_fifo_sink_payload_mask;
	end
	if (((~master_rx_fifo_source_valid) | master_rx_fifo_source_ready)) begin
		master_rx_fifo_source_valid <= master_rx_fifo_sink_valid;
		master_rx_fifo_source_first <= master_rx_fifo_sink_first;
		master_rx_fifo_source_last <= master_rx_fifo_sink_last;
		master_rx_fifo_source_payload_data <= master_rx_fifo_sink_payload_data;
	end
	gpioin0_gpioin0_in_pads_n_d <= gpioin0_in_status;
	if (gpioin0_gpioin0_clear) begin
		gpioin0_gpioin0_pending <= 1'd0;
	end
	gpioin0_gpioin0_trigger_d <= gpioin0_gpioin0_trigger;
	if ((gpioin0_gpioin0_trigger & (~gpioin0_gpioin0_trigger_d))) begin
		gpioin0_gpioin0_pending <= 1'd1;
	end
	gpioin1_gpioin1_in_pads_n_d <= gpioin1_in_status;
	if (gpioin1_gpioin1_clear) begin
		gpioin1_gpioin1_pending <= 1'd0;
	end
	gpioin1_gpioin1_trigger_d <= gpioin1_gpioin1_trigger;
	if ((gpioin1_gpioin1_trigger & (~gpioin1_gpioin1_trigger_d))) begin
		gpioin1_gpioin1_pending <= 1'd1;
	end
	gpioin2_gpioin2_in_pads_n_d <= gpioin2_in_status;
	if (gpioin2_gpioin2_clear) begin
		gpioin2_gpioin2_pending <= 1'd0;
	end
	gpioin2_gpioin2_trigger_d <= gpioin2_gpioin2_trigger;
	if ((gpioin2_gpioin2_trigger & (~gpioin2_gpioin2_trigger_d))) begin
		gpioin2_gpioin2_pending <= 1'd1;
	end
	gpioin3_gpioin3_in_pads_n_d <= gpioin3_in_status;
	if (gpioin3_gpioin3_clear) begin
		gpioin3_gpioin3_pending <= 1'd0;
	end
	gpioin3_gpioin3_trigger_d <= gpioin3_gpioin3_trigger;
	if ((gpioin3_gpioin3_trigger & (~gpioin3_gpioin3_trigger_d))) begin
		gpioin3_gpioin3_pending <= 1'd1;
	end
	gpioin4_gpioin4_in_pads_n_d <= gpioin4_in_status;
	if (gpioin4_gpioin4_clear) begin
		gpioin4_gpioin4_pending <= 1'd0;
	end
	gpioin4_gpioin4_trigger_d <= gpioin4_gpioin4_trigger;
	if ((gpioin4_gpioin4_trigger & (~gpioin4_gpioin4_trigger_d))) begin
		gpioin4_gpioin4_pending <= 1'd1;
	end
	gpioin5_gpioin5_in_pads_n_d <= gpioin5_in_status;
	if (gpioin5_gpioin5_clear) begin
		gpioin5_gpioin5_pending <= 1'd0;
	end
	gpioin5_gpioin5_trigger_d <= gpioin5_gpioin5_trigger;
	if ((gpioin5_gpioin5_trigger & (~gpioin5_gpioin5_trigger_d))) begin
		gpioin5_gpioin5_pending <= 1'd1;
	end
	state <= next_state;
	slave_sel_r <= slave_sel;
	if (wait_1) begin
		if ((~done)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 20'd1000000;
	end
	interface0_bank_bus_dat_r <= 1'd0;
	if (csrbank0_sel) begin
		case (interface0_bank_bus_adr[8:0])
			1'd0: begin
				interface0_bank_bus_dat_r <= csrbank0_reset0_w;
			end
			1'd1: begin
				interface0_bank_bus_dat_r <= csrbank0_scratch0_w;
			end
			2'd2: begin
				interface0_bank_bus_dat_r <= csrbank0_bus_errors_w;
			end
		endcase
	end
	if (csrbank0_reset0_re) begin
		reset_storage[1:0] <= csrbank0_reset0_r;
	end
	reset_re <= csrbank0_reset0_re;
	if (csrbank0_scratch0_re) begin
		scratch_storage[31:0] <= csrbank0_scratch0_r;
	end
	scratch_re <= csrbank0_scratch0_re;
	bus_errors_re <= csrbank0_bus_errors_re;
	interface1_bank_bus_dat_r <= 1'd0;
	if (csrbank1_sel) begin
		case (interface1_bank_bus_adr[8:0])
			1'd0: begin
				interface1_bank_bus_dat_r <= csrbank1_mode10_w;
			end
			1'd1: begin
				interface1_bank_bus_dat_r <= csrbank1_mode00_w;
			end
			2'd2: begin
				interface1_bank_bus_dat_r <= csrbank1_ien0_w;
			end
			2'd3: begin
				interface1_bank_bus_dat_r <= csrbank1_oe0_w;
			end
			3'd4: begin
				interface1_bank_bus_dat_r <= csrbank1_in_w;
			end
			3'd5: begin
				interface1_bank_bus_dat_r <= csrbank1_out0_w;
			end
		endcase
	end
	if (csrbank1_mode10_re) begin
		gpio_mode1_storage <= csrbank1_mode10_r;
	end
	gpio_mode1_re <= csrbank1_mode10_re;
	if (csrbank1_mode00_re) begin
		gpio_mode0_storage <= csrbank1_mode00_r;
	end
	gpio_mode0_re <= csrbank1_mode00_re;
	if (csrbank1_ien0_re) begin
		gpio_ien_storage <= csrbank1_ien0_r;
	end
	gpio_ien_re <= csrbank1_ien0_re;
	if (csrbank1_oe0_re) begin
		gpio_oe_storage <= csrbank1_oe0_r;
	end
	gpio_oe_re <= csrbank1_oe0_re;
	gpio_in_re <= csrbank1_in_re;
	if (csrbank1_out0_re) begin
		gpio_out_storage <= csrbank1_out0_r;
	end
	gpio_out_re <= csrbank1_out0_re;
	interface2_bank_bus_dat_r <= 1'd0;
	if (csrbank2_sel) begin
		case (interface2_bank_bus_adr[8:0])
			1'd0: begin
				interface2_bank_bus_dat_r <= csrbank2_out0_w;
			end
		endcase
	end
	if (csrbank2_out0_re) begin
		mprj_wb_iena_storage <= csrbank2_out0_r;
	end
	mprj_wb_iena_re <= csrbank2_out0_re;
	interface3_bank_bus_dat_r <= 1'd0;
	if (csrbank3_sel) begin
		case (interface3_bank_bus_adr[8:0])
			1'd0: begin
				interface3_bank_bus_dat_r <= csrbank3_mmap_dummy_bits0_w;
			end
			1'd1: begin
				interface3_bank_bus_dat_r <= csrbank3_master_cs0_w;
			end
			2'd2: begin
				interface3_bank_bus_dat_r <= csrbank3_master_phyconfig0_w;
			end
			2'd3: begin
				interface3_bank_bus_dat_r <= master_rxtx_w;
			end
			3'd4: begin
				interface3_bank_bus_dat_r <= csrbank3_master_status_w;
			end
		endcase
	end
	if (csrbank3_mmap_dummy_bits0_re) begin
		litespimmap_storage[7:0] <= csrbank3_mmap_dummy_bits0_r;
	end
	litespimmap_re <= csrbank3_mmap_dummy_bits0_re;
	if (csrbank3_master_cs0_re) begin
		master_cs_storage <= csrbank3_master_cs0_r;
	end
	master_cs_re <= csrbank3_master_cs0_re;
	if (csrbank3_master_phyconfig0_re) begin
		master_phyconfig_storage[23:0] <= csrbank3_master_phyconfig0_r;
	end
	master_phyconfig_re <= csrbank3_master_phyconfig0_re;
	master_status_re <= csrbank3_master_status_re;
	interface4_bank_bus_dat_r <= 1'd0;
	if (csrbank4_sel) begin
		case (interface4_bank_bus_adr[8:0])
			1'd0: begin
				interface4_bank_bus_dat_r <= csrbank4_clk_divisor0_w;
			end
		endcase
	end
	if (csrbank4_clk_divisor0_re) begin
		litespisdrphycore_storage[7:0] <= csrbank4_clk_divisor0_r;
	end
	litespisdrphycore_re <= csrbank4_clk_divisor0_re;
	interface5_bank_bus_dat_r <= 1'd0;
	if (csrbank5_sel) begin
		case (interface5_bank_bus_adr[8:0])
			1'd0: begin
				interface5_bank_bus_dat_r <= csrbank5_in_w;
			end
			1'd1: begin
				interface5_bank_bus_dat_r <= csrbank5_mode0_w;
			end
			2'd2: begin
				interface5_bank_bus_dat_r <= csrbank5_edge0_w;
			end
			2'd3: begin
				interface5_bank_bus_dat_r <= csrbank5_ev_status_w;
			end
			3'd4: begin
				interface5_bank_bus_dat_r <= csrbank5_ev_pending_w;
			end
			3'd5: begin
				interface5_bank_bus_dat_r <= csrbank5_ev_enable0_w;
			end
		endcase
	end
	gpioin0_in_re <= csrbank5_in_re;
	if (csrbank5_mode0_re) begin
		gpioin0_gpioin0_mode_storage <= csrbank5_mode0_r;
	end
	gpioin0_gpioin0_mode_re <= csrbank5_mode0_re;
	if (csrbank5_edge0_re) begin
		gpioin0_gpioin0_edge_storage <= csrbank5_edge0_r;
	end
	gpioin0_gpioin0_edge_re <= csrbank5_edge0_re;
	gpioin0_status_re <= csrbank5_ev_status_re;
	if (csrbank5_ev_pending_re) begin
		gpioin0_pending_r <= csrbank5_ev_pending_r;
	end
	gpioin0_pending_re <= csrbank5_ev_pending_re;
	if (csrbank5_ev_enable0_re) begin
		gpioin0_enable_storage <= csrbank5_ev_enable0_r;
	end
	gpioin0_enable_re <= csrbank5_ev_enable0_re;
	interface6_bank_bus_dat_r <= 1'd0;
	if (csrbank6_sel) begin
		case (interface6_bank_bus_adr[8:0])
			1'd0: begin
				interface6_bank_bus_dat_r <= csrbank6_in_w;
			end
			1'd1: begin
				interface6_bank_bus_dat_r <= csrbank6_mode0_w;
			end
			2'd2: begin
				interface6_bank_bus_dat_r <= csrbank6_edge0_w;
			end
			2'd3: begin
				interface6_bank_bus_dat_r <= csrbank6_ev_status_w;
			end
			3'd4: begin
				interface6_bank_bus_dat_r <= csrbank6_ev_pending_w;
			end
			3'd5: begin
				interface6_bank_bus_dat_r <= csrbank6_ev_enable0_w;
			end
		endcase
	end
	gpioin1_in_re <= csrbank6_in_re;
	if (csrbank6_mode0_re) begin
		gpioin1_gpioin1_mode_storage <= csrbank6_mode0_r;
	end
	gpioin1_gpioin1_mode_re <= csrbank6_mode0_re;
	if (csrbank6_edge0_re) begin
		gpioin1_gpioin1_edge_storage <= csrbank6_edge0_r;
	end
	gpioin1_gpioin1_edge_re <= csrbank6_edge0_re;
	gpioin1_status_re <= csrbank6_ev_status_re;
	if (csrbank6_ev_pending_re) begin
		gpioin1_pending_r <= csrbank6_ev_pending_r;
	end
	gpioin1_pending_re <= csrbank6_ev_pending_re;
	if (csrbank6_ev_enable0_re) begin
		gpioin1_enable_storage <= csrbank6_ev_enable0_r;
	end
	gpioin1_enable_re <= csrbank6_ev_enable0_re;
	interface7_bank_bus_dat_r <= 1'd0;
	if (csrbank7_sel) begin
		case (interface7_bank_bus_adr[8:0])
			1'd0: begin
				interface7_bank_bus_dat_r <= csrbank7_in_w;
			end
			1'd1: begin
				interface7_bank_bus_dat_r <= csrbank7_mode0_w;
			end
			2'd2: begin
				interface7_bank_bus_dat_r <= csrbank7_edge0_w;
			end
			2'd3: begin
				interface7_bank_bus_dat_r <= csrbank7_ev_status_w;
			end
			3'd4: begin
				interface7_bank_bus_dat_r <= csrbank7_ev_pending_w;
			end
			3'd5: begin
				interface7_bank_bus_dat_r <= csrbank7_ev_enable0_w;
			end
		endcase
	end
	gpioin2_in_re <= csrbank7_in_re;
	if (csrbank7_mode0_re) begin
		gpioin2_gpioin2_mode_storage <= csrbank7_mode0_r;
	end
	gpioin2_gpioin2_mode_re <= csrbank7_mode0_re;
	if (csrbank7_edge0_re) begin
		gpioin2_gpioin2_edge_storage <= csrbank7_edge0_r;
	end
	gpioin2_gpioin2_edge_re <= csrbank7_edge0_re;
	gpioin2_status_re <= csrbank7_ev_status_re;
	if (csrbank7_ev_pending_re) begin
		gpioin2_pending_r <= csrbank7_ev_pending_r;
	end
	gpioin2_pending_re <= csrbank7_ev_pending_re;
	if (csrbank7_ev_enable0_re) begin
		gpioin2_enable_storage <= csrbank7_ev_enable0_r;
	end
	gpioin2_enable_re <= csrbank7_ev_enable0_re;
	interface8_bank_bus_dat_r <= 1'd0;
	if (csrbank8_sel) begin
		case (interface8_bank_bus_adr[8:0])
			1'd0: begin
				interface8_bank_bus_dat_r <= csrbank8_in_w;
			end
			1'd1: begin
				interface8_bank_bus_dat_r <= csrbank8_mode0_w;
			end
			2'd2: begin
				interface8_bank_bus_dat_r <= csrbank8_edge0_w;
			end
			2'd3: begin
				interface8_bank_bus_dat_r <= csrbank8_ev_status_w;
			end
			3'd4: begin
				interface8_bank_bus_dat_r <= csrbank8_ev_pending_w;
			end
			3'd5: begin
				interface8_bank_bus_dat_r <= csrbank8_ev_enable0_w;
			end
		endcase
	end
	gpioin3_in_re <= csrbank8_in_re;
	if (csrbank8_mode0_re) begin
		gpioin3_gpioin3_mode_storage <= csrbank8_mode0_r;
	end
	gpioin3_gpioin3_mode_re <= csrbank8_mode0_re;
	if (csrbank8_edge0_re) begin
		gpioin3_gpioin3_edge_storage <= csrbank8_edge0_r;
	end
	gpioin3_gpioin3_edge_re <= csrbank8_edge0_re;
	gpioin3_status_re <= csrbank8_ev_status_re;
	if (csrbank8_ev_pending_re) begin
		gpioin3_pending_r <= csrbank8_ev_pending_r;
	end
	gpioin3_pending_re <= csrbank8_ev_pending_re;
	if (csrbank8_ev_enable0_re) begin
		gpioin3_enable_storage <= csrbank8_ev_enable0_r;
	end
	gpioin3_enable_re <= csrbank8_ev_enable0_re;
	interface9_bank_bus_dat_r <= 1'd0;
	if (csrbank9_sel) begin
		case (interface9_bank_bus_adr[8:0])
			1'd0: begin
				interface9_bank_bus_dat_r <= csrbank9_in_w;
			end
			1'd1: begin
				interface9_bank_bus_dat_r <= csrbank9_mode0_w;
			end
			2'd2: begin
				interface9_bank_bus_dat_r <= csrbank9_edge0_w;
			end
			2'd3: begin
				interface9_bank_bus_dat_r <= csrbank9_ev_status_w;
			end
			3'd4: begin
				interface9_bank_bus_dat_r <= csrbank9_ev_pending_w;
			end
			3'd5: begin
				interface9_bank_bus_dat_r <= csrbank9_ev_enable0_w;
			end
		endcase
	end
	gpioin4_in_re <= csrbank9_in_re;
	if (csrbank9_mode0_re) begin
		gpioin4_gpioin4_mode_storage <= csrbank9_mode0_r;
	end
	gpioin4_gpioin4_mode_re <= csrbank9_mode0_re;
	if (csrbank9_edge0_re) begin
		gpioin4_gpioin4_edge_storage <= csrbank9_edge0_r;
	end
	gpioin4_gpioin4_edge_re <= csrbank9_edge0_re;
	gpioin4_status_re <= csrbank9_ev_status_re;
	if (csrbank9_ev_pending_re) begin
		gpioin4_pending_r <= csrbank9_ev_pending_r;
	end
	gpioin4_pending_re <= csrbank9_ev_pending_re;
	if (csrbank9_ev_enable0_re) begin
		gpioin4_enable_storage <= csrbank9_ev_enable0_r;
	end
	gpioin4_enable_re <= csrbank9_ev_enable0_re;
	interface10_bank_bus_dat_r <= 1'd0;
	if (csrbank10_sel) begin
		case (interface10_bank_bus_adr[8:0])
			1'd0: begin
				interface10_bank_bus_dat_r <= csrbank10_in_w;
			end
			1'd1: begin
				interface10_bank_bus_dat_r <= csrbank10_mode0_w;
			end
			2'd2: begin
				interface10_bank_bus_dat_r <= csrbank10_edge0_w;
			end
			2'd3: begin
				interface10_bank_bus_dat_r <= csrbank10_ev_status_w;
			end
			3'd4: begin
				interface10_bank_bus_dat_r <= csrbank10_ev_pending_w;
			end
			3'd5: begin
				interface10_bank_bus_dat_r <= csrbank10_ev_enable0_w;
			end
		endcase
	end
	gpioin5_in_re <= csrbank10_in_re;
	if (csrbank10_mode0_re) begin
		gpioin5_gpioin5_mode_storage <= csrbank10_mode0_r;
	end
	gpioin5_gpioin5_mode_re <= csrbank10_mode0_re;
	if (csrbank10_edge0_re) begin
		gpioin5_gpioin5_edge_storage <= csrbank10_edge0_r;
	end
	gpioin5_gpioin5_edge_re <= csrbank10_edge0_re;
	gpioin5_status_re <= csrbank10_ev_status_re;
	if (csrbank10_ev_pending_re) begin
		gpioin5_pending_r <= csrbank10_ev_pending_r;
	end
	gpioin5_pending_re <= csrbank10_ev_pending_re;
	if (csrbank10_ev_enable0_re) begin
		gpioin5_enable_storage <= csrbank10_ev_enable0_r;
	end
	gpioin5_enable_re <= csrbank10_ev_enable0_re;
	interface11_bank_bus_dat_r <= 1'd0;
	if (csrbank11_sel) begin
		case (interface11_bank_bus_adr[8:0])
			1'd0: begin
				interface11_bank_bus_dat_r <= csrbank11_out0_w;
			end
		endcase
	end
	if (csrbank11_out0_re) begin
		user_irq_ena_storage[2:0] <= csrbank11_out0_r;
	end
	user_irq_ena_re <= csrbank11_out0_re;
	if (sys_rst_1) begin
		reset_storage <= 2'd0;
		reset_re <= 1'd0;
		scratch_storage <= 32'd305419896;
		scratch_re <= 1'd0;
		bus_errors_re <= 1'd0;
		bus_errors <= 32'd0;
		bus_ack <= 1'd0;
		litespisdrphycore_storage <= 8'd1;
		litespisdrphycore_re <= 1'd0;
		litespisdrphycore_cnt <= 8'd0;
		litespisdrphycore_clk <= 1'd0;
		litespisdrphycore_posedge_reg <= 1'd0;
		litespisdrphycore_posedge_reg2 <= 1'd0;
		litespisdrphycore_count <= 4'd11;
		litespimmap_burst_cs <= 1'd0;
		litespimmap_count <= 9'd256;
		litespimmap_storage <= 8'd0;
		litespimmap_re <= 1'd0;
		master_cs_storage <= 1'd0;
		master_cs_re <= 1'd0;
		master_phyconfig_storage <= 24'd0;
		master_phyconfig_re <= 1'd0;
		master_status_re <= 1'd0;
		master_tx_fifo_source_valid <= 1'd0;
		master_tx_fifo_source_payload_data <= 32'd0;
		master_tx_fifo_source_payload_len <= 6'd0;
		master_tx_fifo_source_payload_width <= 4'd0;
		master_tx_fifo_source_payload_mask <= 8'd0;
		master_rx_fifo_source_valid <= 1'd0;
		master_rx_fifo_source_payload_data <= 32'd0;
		gpio_mode1_storage <= 1'd0;
		gpio_mode1_re <= 1'd0;
		gpio_mode0_storage <= 1'd0;
		gpio_mode0_re <= 1'd0;
		gpio_ien_storage <= 1'd0;
		gpio_ien_re <= 1'd0;
		gpio_oe_storage <= 1'd0;
		gpio_oe_re <= 1'd0;
		gpio_in_re <= 1'd0;
		gpio_out_storage <= 1'd0;
		gpio_out_re <= 1'd0;
		mprj_wb_iena_storage <= 1'd0;
		mprj_wb_iena_re <= 1'd0;
		user_irq_ena_storage <= 3'd0;
		user_irq_ena_re <= 1'd0;
		gpioin0_in_re <= 1'd0;
		gpioin0_gpioin0_mode_storage <= 1'd0;
		gpioin0_gpioin0_mode_re <= 1'd0;
		gpioin0_gpioin0_edge_storage <= 1'd0;
		gpioin0_gpioin0_edge_re <= 1'd0;
		gpioin0_gpioin0_in_pads_n_d <= 1'd0;
		gpioin0_gpioin0_pending <= 1'd0;
		gpioin0_gpioin0_trigger_d <= 1'd0;
		gpioin1_in_re <= 1'd0;
		gpioin1_gpioin1_mode_storage <= 1'd0;
		gpioin1_gpioin1_mode_re <= 1'd0;
		gpioin1_gpioin1_edge_storage <= 1'd0;
		gpioin1_gpioin1_edge_re <= 1'd0;
		gpioin1_gpioin1_in_pads_n_d <= 1'd0;
		gpioin1_gpioin1_pending <= 1'd0;
		gpioin1_gpioin1_trigger_d <= 1'd0;
		gpioin2_in_re <= 1'd0;
		gpioin2_gpioin2_mode_storage <= 1'd0;
		gpioin2_gpioin2_mode_re <= 1'd0;
		gpioin2_gpioin2_edge_storage <= 1'd0;
		gpioin2_gpioin2_edge_re <= 1'd0;
		gpioin2_gpioin2_in_pads_n_d <= 1'd0;
		gpioin2_gpioin2_pending <= 1'd0;
		gpioin2_gpioin2_trigger_d <= 1'd0;
		gpioin3_in_re <= 1'd0;
		gpioin3_gpioin3_mode_storage <= 1'd0;
		gpioin3_gpioin3_mode_re <= 1'd0;
		gpioin3_gpioin3_edge_storage <= 1'd0;
		gpioin3_gpioin3_edge_re <= 1'd0;
		gpioin3_gpioin3_in_pads_n_d <= 1'd0;
		gpioin3_gpioin3_pending <= 1'd0;
		gpioin3_gpioin3_trigger_d <= 1'd0;
		gpioin4_in_re <= 1'd0;
		gpioin4_gpioin4_mode_storage <= 1'd0;
		gpioin4_gpioin4_mode_re <= 1'd0;
		gpioin4_gpioin4_edge_storage <= 1'd0;
		gpioin4_gpioin4_edge_re <= 1'd0;
		gpioin4_gpioin4_in_pads_n_d <= 1'd0;
		gpioin4_gpioin4_pending <= 1'd0;
		gpioin4_gpioin4_trigger_d <= 1'd0;
		gpioin5_in_re <= 1'd0;
		gpioin5_gpioin5_mode_storage <= 1'd0;
		gpioin5_gpioin5_mode_re <= 1'd0;
		gpioin5_gpioin5_edge_storage <= 1'd0;
		gpioin5_gpioin5_edge_re <= 1'd0;
		gpioin5_gpioin5_in_pads_n_d <= 1'd0;
		gpioin5_gpioin5_pending <= 1'd0;
		gpioin5_gpioin5_trigger_d <= 1'd0;
		litespiphy_state <= 2'd0;
		litespi_grant <= 1'd0;
		litespi_state <= 4'd0;
		gpioin0_status_re <= 1'd0;
		gpioin0_pending_re <= 1'd0;
		gpioin0_pending_r <= 1'd0;
		gpioin0_enable_storage <= 1'd0;
		gpioin0_enable_re <= 1'd0;
		gpioin1_status_re <= 1'd0;
		gpioin1_pending_re <= 1'd0;
		gpioin1_pending_r <= 1'd0;
		gpioin1_enable_storage <= 1'd0;
		gpioin1_enable_re <= 1'd0;
		gpioin2_status_re <= 1'd0;
		gpioin2_pending_re <= 1'd0;
		gpioin2_pending_r <= 1'd0;
		gpioin2_enable_storage <= 1'd0;
		gpioin2_enable_re <= 1'd0;
		gpioin3_status_re <= 1'd0;
		gpioin3_pending_re <= 1'd0;
		gpioin3_pending_r <= 1'd0;
		gpioin3_enable_storage <= 1'd0;
		gpioin3_enable_re <= 1'd0;
		gpioin4_status_re <= 1'd0;
		gpioin4_pending_re <= 1'd0;
		gpioin4_pending_r <= 1'd0;
		gpioin4_enable_storage <= 1'd0;
		gpioin4_enable_re <= 1'd0;
		gpioin5_status_re <= 1'd0;
		gpioin5_pending_re <= 1'd0;
		gpioin5_pending_r <= 1'd0;
		gpioin5_enable_storage <= 1'd0;
		gpioin5_enable_re <= 1'd0;
		slave_sel_r <= 3'd0;
		count <= 20'd1000000;
		state <= 1'd0;
	end
	multiregimpl0_regs0 <= gpio_in_pad;
	multiregimpl0_regs1 <= multiregimpl0_regs0;
	multiregimpl1_regs0 <= user_irq[0];
	multiregimpl1_regs1 <= multiregimpl1_regs0;
	multiregimpl2_regs0 <= user_irq[1];
	multiregimpl2_regs1 <= multiregimpl2_regs0;
	multiregimpl3_regs0 <= user_irq[2];
	multiregimpl3_regs1 <= multiregimpl3_regs0;
	multiregimpl4_regs0 <= user_irq[3];
	multiregimpl4_regs1 <= multiregimpl4_regs0;
	multiregimpl5_regs0 <= user_irq[4];
	multiregimpl5_regs1 <= multiregimpl5_regs0;
	multiregimpl6_regs0 <= user_irq[5];
	multiregimpl6_regs1 <= multiregimpl6_regs0;
end

sram_1rw1r_32_256_8_sky130 sram_1rw1r_32_256_8_sky130(
	.addr0(bus_adr[7:0]),
	.clk0(sys_clk_1),
	.csb0(cs_b0),
	.din0(datain0),
	.web0(wren_b0),
	.wmask0(maskwren0),
	.dout0(dataout0)
);

sram_1rw1r_32_256_8_sky130 sram_1rw1r_32_256_8_sky130_1(
	.addr0(bus_adr[7:0]),
	.clk0(sys_clk_1),
	.csb0(cs_b1),
	.din0(datain1),
	.web0(wren_b1),
	.wmask0(maskwren1),
	.dout0(dataout1)
);

picorv32 #(
	.CATCH_ILLINSN(1'd1),
	.CATCH_MISALIGN(1'd0),
	.ENABLE_COUNTERS(1'd0),
	.ENABLE_COUNTERS64(1'd0),
	.ENABLE_DIV(1'd0),
	.ENABLE_FAST_MUL(1'd0),
	.ENABLE_IRQ(1'd1),
	.ENABLE_IRQ_QREGS(1'd1),
	.ENABLE_IRQ_TIMER(1'd0),
	.ENABLE_MUL(1'd0),
	.ENABLE_PCPI(1'd0),
	.ENABLE_REGS_16_31(1'd1),
	.ENABLE_REGS_DUALPORT(1'd1),
	.ENABLE_TRACE(1'd0),
	.LATCHED_IRQ(32'd4294967295),
	.LATCHED_MEM_RDATA(1'd0),
	.MASKED_IRQ(1'd0),
	.PROGADDR_IRQ(5'd16),
	.PROGADDR_RESET(1'd0),
	.STACKADDR(32'd4294967295),
	.TWO_CYCLE_ALU(1'd0),
	.TWO_CYCLE_COMPARE(1'd0),
	.TWO_STAGE_SHIFT(1'd0)
) picorv32 (
	.clk(sys_clk_1),
	.irq(picorv32_interrupt),
	.mem_rdata(picorv32_mem_rdata),
	.mem_ready(picorv32_mem_ready),
	.pcpi_rd(1'd0),
	.pcpi_ready(1'd0),
	.pcpi_wait(1'd0),
	.pcpi_wr(1'd0),
	.resetn((~(sys_rst_1 | picorv32_reset))),
	.eoi(picorv329),
	.mem_addr(picorv32_mem_addr),
	.mem_instr(picorv32_mem_instr),
	.mem_la_addr(picorv322),
	.mem_la_read(picorv320),
	.mem_la_wdata(picorv323),
	.mem_la_write(picorv321),
	.mem_la_wstrb(picorv324),
	.mem_valid(picorv32_mem_valid),
	.mem_wdata(picorv32_mem_wdata),
	.mem_wstrb(picorv32_mem_wstrb),
	.pcpi_insn(picorv326),
	.pcpi_rs1(picorv327),
	.pcpi_rs2(picorv328),
	.pcpi_valid(picorv325),
	.trap(picorv32_trap)
);

endmodule
