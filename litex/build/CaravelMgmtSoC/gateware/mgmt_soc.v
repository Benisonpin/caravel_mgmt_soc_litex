//--------------------------------------------------------------------------------
// Auto-generated by Migen (7507a2b) & LiteX (57002cf3) on 2021-11-06 12:07:40
//--------------------------------------------------------------------------------
module top(
	input wire sys_clk,
	input wire sys_rst,
	input wire serial_rx,
	output reg serial_tx,
	output reg spi_master_clk,
	output reg spi_master_cs_n,
	output reg spi_master_mosi,
	input wire spi_master_miso,
	output wire spiflash_cs_n,
	output reg spiflash_clk,
	input wire spiflash_miso,
	output reg spiflash_mosi,
	input wire spiflash_wp,
	input wire spiflash_hold,
	input wire serial_dbg_rx,
	output reg serial_dbg_tx,
	output wire gpio_out_pad,
	input wire gpio_in_pad,
	output wire gpio_outenb_pad,
	output wire gpio_inenb_pad,
	output wire gpio_mode0_pad,
	output wire gpio_mode1_pad,
	output reg [127:0] la_output,
	input wire [127:0] la_input,
	output reg [127:0] la_oenb,
	output reg [127:0] la_iena,
	output wire mprj_wb_iena,
	output wire [2:0] user_irq_ena,
	input wire [5:0] user_irq
);

wire sys_clk_1;
wire sys_rst_1;
wire por_clk;
reg int_rst = 1'd1;
reg mgmtsoc_soc_rst = 1'd0;
wire mgmtsoc_cpu_rst;
reg [1:0] mgmtsoc_reset_storage = 2'd0;
reg mgmtsoc_reset_re = 1'd0;
reg [31:0] mgmtsoc_scratch_storage = 32'd305419896;
reg mgmtsoc_scratch_re = 1'd0;
wire [31:0] mgmtsoc_bus_errors_status;
wire mgmtsoc_bus_errors_we;
reg mgmtsoc_bus_errors_re = 1'd0;
wire mgmtsoc_bus_error;
reg [31:0] mgmtsoc_bus_errors = 32'd0;
wire mgmtsoc_picorv32_trap;
wire mgmtsoc_picorv32_reset;
reg [31:0] mgmtsoc_picorv32_interrupt = 32'd0;
wire [29:0] mgmtsoc_picorv32_idbus_adr;
wire [31:0] mgmtsoc_picorv32_idbus_dat_w;
wire [31:0] mgmtsoc_picorv32_idbus_dat_r;
wire [3:0] mgmtsoc_picorv32_idbus_sel;
wire mgmtsoc_picorv32_idbus_cyc;
wire mgmtsoc_picorv32_idbus_stb;
wire mgmtsoc_picorv32_idbus_ack;
wire mgmtsoc_picorv32_idbus_we;
wire [2:0] mgmtsoc_picorv32_idbus_cti;
wire [1:0] mgmtsoc_picorv32_idbus_bte;
wire mgmtsoc_picorv32_idbus_err;
wire mgmtsoc_picorv32_mem_valid;
wire mgmtsoc_picorv32_mem_instr;
wire mgmtsoc_picorv32_mem_ready;
wire [31:0] mgmtsoc_picorv32_mem_addr;
wire [31:0] mgmtsoc_picorv32_mem_wdata;
wire [3:0] mgmtsoc_picorv32_mem_wstrb;
wire [31:0] mgmtsoc_picorv32_mem_rdata;
wire mgmtsoc_picorv320;
wire mgmtsoc_picorv321;
wire [31:0] mgmtsoc_picorv322;
wire [31:0] mgmtsoc_picorv323;
wire [3:0] mgmtsoc_picorv324;
wire mgmtsoc_picorv325;
wire [31:0] mgmtsoc_picorv326;
wire [31:0] mgmtsoc_picorv327;
wire [31:0] mgmtsoc_picorv328;
wire [31:0] mgmtsoc_picorv329;
wire mgmtsoc_tx_sink_valid;
reg mgmtsoc_tx_sink_ready = 1'd0;
wire mgmtsoc_tx_sink_first;
wire mgmtsoc_tx_sink_last;
wire [7:0] mgmtsoc_tx_sink_payload_data;
reg [7:0] mgmtsoc_tx_data = 8'd0;
reg [3:0] mgmtsoc_tx_count = 4'd0;
reg mgmtsoc_tx_enable = 1'd0;
reg mgmtsoc_tx_tick = 1'd0;
reg [31:0] mgmtsoc_tx_phase = 32'd0;
reg mgmtsoc_rx_source_valid = 1'd0;
wire mgmtsoc_rx_source_ready;
reg mgmtsoc_rx_source_first = 1'd0;
reg mgmtsoc_rx_source_last = 1'd0;
reg [7:0] mgmtsoc_rx_source_payload_data = 8'd0;
reg [7:0] mgmtsoc_rx_data = 8'd0;
reg [3:0] mgmtsoc_rx_count = 4'd0;
reg mgmtsoc_rx_enable = 1'd0;
reg mgmtsoc_rx_tick = 1'd0;
reg [31:0] mgmtsoc_rx_phase = 32'd0;
wire mgmtsoc_rx_rx;
reg mgmtsoc_rx_rx_d = 1'd0;
reg mgmtsoc_uart_rxtx_re = 1'd0;
wire [7:0] mgmtsoc_uart_rxtx_r;
reg mgmtsoc_uart_rxtx_we = 1'd0;
wire [7:0] mgmtsoc_uart_rxtx_w;
wire mgmtsoc_uart_txfull_status;
wire mgmtsoc_uart_txfull_we;
reg mgmtsoc_uart_txfull_re = 1'd0;
wire mgmtsoc_uart_rxempty_status;
wire mgmtsoc_uart_rxempty_we;
reg mgmtsoc_uart_rxempty_re = 1'd0;
wire mgmtsoc_uart_irq;
wire mgmtsoc_uart_tx_status;
reg mgmtsoc_uart_tx_pending = 1'd0;
wire mgmtsoc_uart_tx_trigger;
reg mgmtsoc_uart_tx_clear = 1'd0;
reg mgmtsoc_uart_tx_trigger_d = 1'd0;
wire mgmtsoc_uart_rx_status;
reg mgmtsoc_uart_rx_pending = 1'd0;
wire mgmtsoc_uart_rx_trigger;
reg mgmtsoc_uart_rx_clear = 1'd0;
reg mgmtsoc_uart_rx_trigger_d = 1'd0;
wire mgmtsoc_uart_tx0;
wire mgmtsoc_uart_rx0;
reg [1:0] mgmtsoc_uart_status_status = 2'd0;
wire mgmtsoc_uart_status_we;
reg mgmtsoc_uart_status_re = 1'd0;
wire mgmtsoc_uart_tx1;
wire mgmtsoc_uart_rx1;
reg [1:0] mgmtsoc_uart_pending_status = 2'd0;
wire mgmtsoc_uart_pending_we;
reg mgmtsoc_uart_pending_re = 1'd0;
reg [1:0] mgmtsoc_uart_pending_r = 2'd0;
wire mgmtsoc_uart_tx2;
wire mgmtsoc_uart_rx2;
reg [1:0] mgmtsoc_uart_enable_storage = 2'd0;
reg mgmtsoc_uart_enable_re = 1'd0;
wire mgmtsoc_uart_txempty_status;
wire mgmtsoc_uart_txempty_we;
reg mgmtsoc_uart_txempty_re = 1'd0;
wire mgmtsoc_uart_rxfull_status;
wire mgmtsoc_uart_rxfull_we;
reg mgmtsoc_uart_rxfull_re = 1'd0;
wire mgmtsoc_uart_uart_sink_valid;
wire mgmtsoc_uart_uart_sink_ready;
wire mgmtsoc_uart_uart_sink_first;
wire mgmtsoc_uart_uart_sink_last;
wire [7:0] mgmtsoc_uart_uart_sink_payload_data;
wire mgmtsoc_uart_uart_source_valid;
wire mgmtsoc_uart_uart_source_ready;
wire mgmtsoc_uart_uart_source_first;
wire mgmtsoc_uart_uart_source_last;
wire [7:0] mgmtsoc_uart_uart_source_payload_data;
wire mgmtsoc_uart_tx_fifo_sink_valid;
wire mgmtsoc_uart_tx_fifo_sink_ready;
reg mgmtsoc_uart_tx_fifo_sink_first = 1'd0;
reg mgmtsoc_uart_tx_fifo_sink_last = 1'd0;
wire [7:0] mgmtsoc_uart_tx_fifo_sink_payload_data;
wire mgmtsoc_uart_tx_fifo_source_valid;
wire mgmtsoc_uart_tx_fifo_source_ready;
wire mgmtsoc_uart_tx_fifo_source_first;
wire mgmtsoc_uart_tx_fifo_source_last;
wire [7:0] mgmtsoc_uart_tx_fifo_source_payload_data;
wire mgmtsoc_uart_tx_fifo_re;
reg mgmtsoc_uart_tx_fifo_readable = 1'd0;
wire mgmtsoc_uart_tx_fifo_syncfifo_we;
wire mgmtsoc_uart_tx_fifo_syncfifo_writable;
wire mgmtsoc_uart_tx_fifo_syncfifo_re;
wire mgmtsoc_uart_tx_fifo_syncfifo_readable;
wire [9:0] mgmtsoc_uart_tx_fifo_syncfifo_din;
wire [9:0] mgmtsoc_uart_tx_fifo_syncfifo_dout;
reg [4:0] mgmtsoc_uart_tx_fifo_level0 = 5'd0;
reg mgmtsoc_uart_tx_fifo_replace = 1'd0;
reg [3:0] mgmtsoc_uart_tx_fifo_produce = 4'd0;
reg [3:0] mgmtsoc_uart_tx_fifo_consume = 4'd0;
reg [3:0] mgmtsoc_uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] mgmtsoc_uart_tx_fifo_wrport_dat_r;
wire mgmtsoc_uart_tx_fifo_wrport_we;
wire [9:0] mgmtsoc_uart_tx_fifo_wrport_dat_w;
wire mgmtsoc_uart_tx_fifo_do_read;
wire [3:0] mgmtsoc_uart_tx_fifo_rdport_adr;
wire [9:0] mgmtsoc_uart_tx_fifo_rdport_dat_r;
wire mgmtsoc_uart_tx_fifo_rdport_re;
wire [4:0] mgmtsoc_uart_tx_fifo_level1;
wire [7:0] mgmtsoc_uart_tx_fifo_fifo_in_payload_data;
wire mgmtsoc_uart_tx_fifo_fifo_in_first;
wire mgmtsoc_uart_tx_fifo_fifo_in_last;
wire [7:0] mgmtsoc_uart_tx_fifo_fifo_out_payload_data;
wire mgmtsoc_uart_tx_fifo_fifo_out_first;
wire mgmtsoc_uart_tx_fifo_fifo_out_last;
wire mgmtsoc_uart_rx_fifo_sink_valid;
wire mgmtsoc_uart_rx_fifo_sink_ready;
wire mgmtsoc_uart_rx_fifo_sink_first;
wire mgmtsoc_uart_rx_fifo_sink_last;
wire [7:0] mgmtsoc_uart_rx_fifo_sink_payload_data;
wire mgmtsoc_uart_rx_fifo_source_valid;
wire mgmtsoc_uart_rx_fifo_source_ready;
wire mgmtsoc_uart_rx_fifo_source_first;
wire mgmtsoc_uart_rx_fifo_source_last;
wire [7:0] mgmtsoc_uart_rx_fifo_source_payload_data;
wire mgmtsoc_uart_rx_fifo_re;
reg mgmtsoc_uart_rx_fifo_readable = 1'd0;
wire mgmtsoc_uart_rx_fifo_syncfifo_we;
wire mgmtsoc_uart_rx_fifo_syncfifo_writable;
wire mgmtsoc_uart_rx_fifo_syncfifo_re;
wire mgmtsoc_uart_rx_fifo_syncfifo_readable;
wire [9:0] mgmtsoc_uart_rx_fifo_syncfifo_din;
wire [9:0] mgmtsoc_uart_rx_fifo_syncfifo_dout;
reg [4:0] mgmtsoc_uart_rx_fifo_level0 = 5'd0;
reg mgmtsoc_uart_rx_fifo_replace = 1'd0;
reg [3:0] mgmtsoc_uart_rx_fifo_produce = 4'd0;
reg [3:0] mgmtsoc_uart_rx_fifo_consume = 4'd0;
reg [3:0] mgmtsoc_uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] mgmtsoc_uart_rx_fifo_wrport_dat_r;
wire mgmtsoc_uart_rx_fifo_wrport_we;
wire [9:0] mgmtsoc_uart_rx_fifo_wrport_dat_w;
wire mgmtsoc_uart_rx_fifo_do_read;
wire [3:0] mgmtsoc_uart_rx_fifo_rdport_adr;
wire [9:0] mgmtsoc_uart_rx_fifo_rdport_dat_r;
wire mgmtsoc_uart_rx_fifo_rdport_re;
wire [4:0] mgmtsoc_uart_rx_fifo_level1;
wire [7:0] mgmtsoc_uart_rx_fifo_fifo_in_payload_data;
wire mgmtsoc_uart_rx_fifo_fifo_in_first;
wire mgmtsoc_uart_rx_fifo_fifo_in_last;
wire [7:0] mgmtsoc_uart_rx_fifo_fifo_out_payload_data;
wire mgmtsoc_uart_rx_fifo_fifo_out_first;
wire mgmtsoc_uart_rx_fifo_fifo_out_last;
reg [31:0] mgmtsoc_timer_load_storage = 32'd0;
reg mgmtsoc_timer_load_re = 1'd0;
reg [31:0] mgmtsoc_timer_reload_storage = 32'd0;
reg mgmtsoc_timer_reload_re = 1'd0;
reg mgmtsoc_timer_en_storage = 1'd0;
reg mgmtsoc_timer_en_re = 1'd0;
reg mgmtsoc_timer_update_value_storage = 1'd0;
reg mgmtsoc_timer_update_value_re = 1'd0;
reg [31:0] mgmtsoc_timer_value_status = 32'd0;
wire mgmtsoc_timer_value_we;
reg mgmtsoc_timer_value_re = 1'd0;
wire mgmtsoc_timer_irq;
wire mgmtsoc_timer_zero_status;
reg mgmtsoc_timer_zero_pending = 1'd0;
wire mgmtsoc_timer_zero_trigger;
reg mgmtsoc_timer_zero_clear = 1'd0;
reg mgmtsoc_timer_zero_trigger_d = 1'd0;
wire mgmtsoc_timer_zero0;
wire mgmtsoc_timer_status_status;
wire mgmtsoc_timer_status_we;
reg mgmtsoc_timer_status_re = 1'd0;
wire mgmtsoc_timer_zero1;
wire mgmtsoc_timer_pending_status;
wire mgmtsoc_timer_pending_we;
reg mgmtsoc_timer_pending_re = 1'd0;
reg mgmtsoc_timer_pending_r = 1'd0;
wire mgmtsoc_timer_zero2;
reg mgmtsoc_timer_enable_storage = 1'd0;
reg mgmtsoc_timer_enable_re = 1'd0;
reg [31:0] mgmtsoc_timer_value = 32'd0;
wire spi_master_start0;
wire [7:0] spi_master_length0;
reg spi_master_done0 = 1'd0;
reg spi_master_irq = 1'd0;
wire [7:0] spi_master_mosi_1;
reg [7:0] spi_master_miso_1 = 8'd0;
wire spi_master_cs;
wire spi_master_cs_mode;
wire spi_master_loopback;
wire [15:0] spi_master_clk_divider0;
reg spi_master_start1 = 1'd0;
wire [7:0] spi_master_length1;
reg [15:0] spi_master_control_storage = 16'd0;
reg spi_master_control_re = 1'd0;
wire spi_master_done1;
wire spi_master_status_status;
wire spi_master_status_we;
reg spi_master_status_re = 1'd0;
reg [7:0] spi_master_mosi_storage = 8'd0;
reg spi_master_mosi_re = 1'd0;
wire [7:0] spi_master_miso_status;
wire spi_master_miso_we;
reg spi_master_miso_re = 1'd0;
wire spi_master_sel;
wire spi_master_mode0;
reg [16:0] spi_master_cs_storage = 17'd1;
reg spi_master_cs_re = 1'd0;
wire spi_master_mode1;
reg spi_master_loopback_storage = 1'd0;
reg spi_master_loopback_re = 1'd0;
reg spi_master_clk_enable = 1'd0;
reg spi_master_xfer_enable = 1'd0;
reg [2:0] spi_master_count = 3'd0;
reg spi_master_mosi_latch = 1'd0;
reg spi_master_miso_latch = 1'd0;
reg [15:0] spi_master_clk_divider1 = 16'd0;
wire spi_master_clk_rise;
wire spi_master_clk_fall;
reg [7:0] spi_master_mosi_data = 8'd0;
reg [2:0] spi_master_mosi_sel = 3'd0;
reg [7:0] spi_master_miso_data = 8'd0;
reg [15:0] spimaster_storage = 16'd100;
reg spimaster_re = 1'd0;
wire [29:0] bus_adr;
wire [31:0] bus_dat_w;
reg [31:0] bus_dat_r = 32'd0;
wire [3:0] bus_sel;
wire bus_cyc;
wire bus_stb;
reg bus_ack = 1'd0;
wire bus_we;
wire [2:0] bus_cti;
wire [1:0] bus_bte;
reg bus_err = 1'd0;
wire [31:0] datain0;
wire [31:0] dataout0;
reg [3:0] maskwren0 = 4'd0;
reg wren_b0 = 1'd0;
reg cs_b0 = 1'd0;
wire [31:0] datain1;
wire [31:0] dataout1;
reg [3:0] maskwren1 = 4'd0;
reg wren_b1 = 1'd0;
reg cs_b1 = 1'd0;
reg mgmtsoc_litespisdrphycore_source_valid = 1'd0;
wire mgmtsoc_litespisdrphycore_source_ready;
reg mgmtsoc_litespisdrphycore_source_first = 1'd0;
reg mgmtsoc_litespisdrphycore_source_last = 1'd0;
wire [31:0] mgmtsoc_litespisdrphycore_source_payload_data;
wire mgmtsoc_litespisdrphycore_sink_valid;
reg mgmtsoc_litespisdrphycore_sink_ready = 1'd0;
wire mgmtsoc_litespisdrphycore_sink_first;
wire mgmtsoc_litespisdrphycore_sink_last;
wire [31:0] mgmtsoc_litespisdrphycore_sink_payload_data;
wire [5:0] mgmtsoc_litespisdrphycore_sink_payload_len;
wire [3:0] mgmtsoc_litespisdrphycore_sink_payload_width;
wire [7:0] mgmtsoc_litespisdrphycore_sink_payload_mask;
wire mgmtsoc_litespisdrphycore_cs;
wire [7:0] mgmtsoc_litespisdrphycore_spi_clk_divisor;
reg [7:0] mgmtsoc_litespisdrphycore_storage = 8'd1;
reg mgmtsoc_litespisdrphycore_re = 1'd0;
wire [7:0] mgmtsoc_litespisdrphycore_div;
wire [7:0] mgmtsoc_litespisdrphycore_sample_cnt;
wire [7:0] mgmtsoc_litespisdrphycore_update_cnt;
wire mgmtsoc_litespisdrphycore_posedge;
wire mgmtsoc_litespisdrphycore_negedge;
wire mgmtsoc_litespisdrphycore_sample;
wire mgmtsoc_litespisdrphycore_update;
reg mgmtsoc_litespisdrphycore_en = 1'd0;
reg [7:0] mgmtsoc_litespisdrphycore_cnt = 8'd0;
reg mgmtsoc_litespisdrphycore_en_int = 1'd0;
reg mgmtsoc_litespisdrphycore_clk = 1'd0;
reg mgmtsoc_litespisdrphycore_posedge_reg = 1'd0;
reg mgmtsoc_litespisdrphycore_posedge_reg2 = 1'd0;
wire mgmtsoc_litespisdrphycore_wait;
wire mgmtsoc_litespisdrphycore_done;
reg [3:0] mgmtsoc_litespisdrphycore_count = 4'd11;
wire mgmtsoc_litespisdrphycore_cs_enable;
reg mgmtsoc_litespisdrphycore_dq_o = 1'd0;
reg mgmtsoc_litespisdrphycore_dq_i = 1'd0;
wire mgmtsoc_litespisdrphycore_dq_oe;
reg [7:0] mgmtsoc_litespisdrphycore_sr_cnt = 8'd0;
reg mgmtsoc_litespisdrphycore_sr_out_load = 1'd0;
reg mgmtsoc_litespisdrphycore_sr_out_shift = 1'd0;
reg [31:0] mgmtsoc_litespisdrphycore_sr_out = 32'd0;
reg mgmtsoc_litespisdrphycore_sr_in_shift = 1'd0;
reg [31:0] mgmtsoc_litespisdrphycore_sr_in = 32'd0;
reg mgmtsoc_litespisdrphycore0 = 1'd0;
reg [1:0] mgmtsoc_litespisdrphycore1 = 2'd0;
reg [3:0] mgmtsoc_litespisdrphycore2 = 4'd0;
reg [7:0] mgmtsoc_litespisdrphycore3 = 8'd0;
wire mgmtsoc_crossbar_source_valid;
wire mgmtsoc_crossbar_source_ready;
wire mgmtsoc_crossbar_source_first;
wire mgmtsoc_crossbar_source_last;
wire [31:0] mgmtsoc_crossbar_source_payload_data;
wire [5:0] mgmtsoc_crossbar_source_payload_len;
wire [3:0] mgmtsoc_crossbar_source_payload_width;
wire [7:0] mgmtsoc_crossbar_source_payload_mask;
wire mgmtsoc_crossbar_sink_valid;
wire mgmtsoc_crossbar_sink_ready;
wire mgmtsoc_crossbar_sink_first;
wire mgmtsoc_crossbar_sink_last;
wire [31:0] mgmtsoc_crossbar_sink_payload_data;
reg mgmtsoc_crossbar_cs = 1'd0;
reg mgmtsoc_litespimmap_source_valid = 1'd0;
wire mgmtsoc_litespimmap_source_ready;
reg mgmtsoc_litespimmap_source_first = 1'd0;
reg mgmtsoc_litespimmap_source_last = 1'd0;
reg [31:0] mgmtsoc_litespimmap_source_payload_data = 32'd0;
reg [5:0] mgmtsoc_litespimmap_source_payload_len = 6'd0;
reg [3:0] mgmtsoc_litespimmap_source_payload_width = 4'd0;
reg [7:0] mgmtsoc_litespimmap_source_payload_mask = 8'd0;
wire mgmtsoc_litespimmap_sink_valid;
reg mgmtsoc_litespimmap_sink_ready = 1'd0;
wire mgmtsoc_litespimmap_sink_first;
wire mgmtsoc_litespimmap_sink_last;
wire [31:0] mgmtsoc_litespimmap_sink_payload_data;
wire [29:0] mgmtsoc_litespimmap_bus_adr;
wire [31:0] mgmtsoc_litespimmap_bus_dat_w;
reg [31:0] mgmtsoc_litespimmap_bus_dat_r = 32'd0;
wire [3:0] mgmtsoc_litespimmap_bus_sel;
wire mgmtsoc_litespimmap_bus_cyc;
wire mgmtsoc_litespimmap_bus_stb;
reg mgmtsoc_litespimmap_bus_ack = 1'd0;
wire mgmtsoc_litespimmap_bus_we;
wire [2:0] mgmtsoc_litespimmap_bus_cti;
wire [1:0] mgmtsoc_litespimmap_bus_bte;
reg mgmtsoc_litespimmap_bus_err = 1'd0;
reg mgmtsoc_litespimmap_cs = 1'd0;
reg mgmtsoc_litespimmap_burst_cs = 1'd0;
reg [29:0] mgmtsoc_litespimmap_burst_adr = 30'd0;
reg mgmtsoc_litespimmap_wait = 1'd0;
wire mgmtsoc_litespimmap_done;
reg [8:0] mgmtsoc_litespimmap_count = 9'd256;
reg [7:0] mgmtsoc_litespimmap_storage = 8'd0;
reg mgmtsoc_litespimmap_re = 1'd0;
wire [7:0] mgmtsoc_litespimmap_spi_dummy_bits;
reg [31:0] mgmtsoc_litespimmap_dummy = 32'd57005;
reg [1:0] mgmtsoc_litespimmap = 2'd0;
wire mgmtsoc_port_mmap_user_port_source_valid;
wire mgmtsoc_port_mmap_user_port_source_ready;
wire mgmtsoc_port_mmap_user_port_source_first;
wire mgmtsoc_port_mmap_user_port_source_last;
wire [31:0] mgmtsoc_port_mmap_user_port_source_payload_data;
wire mgmtsoc_port_mmap_user_port_sink_valid;
wire mgmtsoc_port_mmap_user_port_sink_ready;
wire mgmtsoc_port_mmap_user_port_sink_first;
wire mgmtsoc_port_mmap_user_port_sink_last;
wire [31:0] mgmtsoc_port_mmap_user_port_sink_payload_data;
wire [5:0] mgmtsoc_port_mmap_user_port_sink_payload_len;
wire [3:0] mgmtsoc_port_mmap_user_port_sink_payload_width;
wire [7:0] mgmtsoc_port_mmap_user_port_sink_payload_mask;
wire mgmtsoc_port_mmap_internal_port_source_valid;
wire mgmtsoc_port_mmap_internal_port_source_ready;
wire mgmtsoc_port_mmap_internal_port_source_first;
wire mgmtsoc_port_mmap_internal_port_source_last;
wire [31:0] mgmtsoc_port_mmap_internal_port_source_payload_data;
wire mgmtsoc_port_mmap_internal_port_sink_valid;
wire mgmtsoc_port_mmap_internal_port_sink_ready;
wire mgmtsoc_port_mmap_internal_port_sink_first;
wire mgmtsoc_port_mmap_internal_port_sink_last;
wire [31:0] mgmtsoc_port_mmap_internal_port_sink_payload_data;
wire [5:0] mgmtsoc_port_mmap_internal_port_sink_payload_len;
wire [3:0] mgmtsoc_port_mmap_internal_port_sink_payload_width;
wire [7:0] mgmtsoc_port_mmap_internal_port_sink_payload_mask;
wire mgmtsoc_port_mmap_request;
wire mgmtsoc_master_sink_sink_valid;
wire mgmtsoc_master_sink_sink_ready;
wire mgmtsoc_master_sink_sink_first;
wire mgmtsoc_master_sink_sink_last;
wire [31:0] mgmtsoc_master_sink_sink_payload_data;
wire mgmtsoc_master_source_source_valid;
wire mgmtsoc_master_source_source_ready;
wire mgmtsoc_master_source_source_first;
wire mgmtsoc_master_source_source_last;
wire [31:0] mgmtsoc_master_source_source_payload_data;
wire [5:0] mgmtsoc_master_source_source_payload_len;
wire [3:0] mgmtsoc_master_source_source_payload_width;
wire [7:0] mgmtsoc_master_source_source_payload_mask;
wire mgmtsoc_master_cs;
reg mgmtsoc_master_cs_storage = 1'd0;
reg mgmtsoc_master_cs_re = 1'd0;
wire [7:0] mgmtsoc_master_len;
wire [3:0] mgmtsoc_master_width;
wire [7:0] mgmtsoc_master_mask;
reg [23:0] mgmtsoc_master_phyconfig_storage = 24'd0;
reg mgmtsoc_master_phyconfig_re = 1'd0;
reg mgmtsoc_master_rxtx_re = 1'd0;
wire [31:0] mgmtsoc_master_rxtx_r;
reg mgmtsoc_master_rxtx_we = 1'd0;
wire [31:0] mgmtsoc_master_rxtx_w;
wire mgmtsoc_master_tx_ready;
wire mgmtsoc_master_rx_ready;
reg [1:0] mgmtsoc_master_status_status = 2'd0;
wire mgmtsoc_master_status_we;
reg mgmtsoc_master_status_re = 1'd0;
wire mgmtsoc_master_tx_fifo_sink_valid;
wire mgmtsoc_master_tx_fifo_sink_ready;
reg mgmtsoc_master_tx_fifo_sink_first = 1'd0;
wire mgmtsoc_master_tx_fifo_sink_last;
wire [31:0] mgmtsoc_master_tx_fifo_sink_payload_data;
wire [5:0] mgmtsoc_master_tx_fifo_sink_payload_len;
wire [3:0] mgmtsoc_master_tx_fifo_sink_payload_width;
wire [7:0] mgmtsoc_master_tx_fifo_sink_payload_mask;
reg mgmtsoc_master_tx_fifo_source_valid = 1'd0;
wire mgmtsoc_master_tx_fifo_source_ready;
reg mgmtsoc_master_tx_fifo_source_first = 1'd0;
reg mgmtsoc_master_tx_fifo_source_last = 1'd0;
reg [31:0] mgmtsoc_master_tx_fifo_source_payload_data = 32'd0;
reg [5:0] mgmtsoc_master_tx_fifo_source_payload_len = 6'd0;
reg [3:0] mgmtsoc_master_tx_fifo_source_payload_width = 4'd0;
reg [7:0] mgmtsoc_master_tx_fifo_source_payload_mask = 8'd0;
wire mgmtsoc_master_rx_fifo_sink_valid;
wire mgmtsoc_master_rx_fifo_sink_ready;
wire mgmtsoc_master_rx_fifo_sink_first;
wire mgmtsoc_master_rx_fifo_sink_last;
wire [31:0] mgmtsoc_master_rx_fifo_sink_payload_data;
reg mgmtsoc_master_rx_fifo_source_valid = 1'd0;
wire mgmtsoc_master_rx_fifo_source_ready;
reg mgmtsoc_master_rx_fifo_source_first = 1'd0;
reg mgmtsoc_master_rx_fifo_source_last = 1'd0;
reg [31:0] mgmtsoc_master_rx_fifo_source_payload_data = 32'd0;
wire mgmtsoc_port_master_user_port_source_valid;
wire mgmtsoc_port_master_user_port_source_ready;
wire mgmtsoc_port_master_user_port_source_first;
wire mgmtsoc_port_master_user_port_source_last;
wire [31:0] mgmtsoc_port_master_user_port_source_payload_data;
wire mgmtsoc_port_master_user_port_sink_valid;
wire mgmtsoc_port_master_user_port_sink_ready;
wire mgmtsoc_port_master_user_port_sink_first;
wire mgmtsoc_port_master_user_port_sink_last;
wire [31:0] mgmtsoc_port_master_user_port_sink_payload_data;
wire [5:0] mgmtsoc_port_master_user_port_sink_payload_len;
wire [3:0] mgmtsoc_port_master_user_port_sink_payload_width;
wire [7:0] mgmtsoc_port_master_user_port_sink_payload_mask;
wire mgmtsoc_port_master_internal_port_source_valid;
wire mgmtsoc_port_master_internal_port_source_ready;
wire mgmtsoc_port_master_internal_port_source_first;
wire mgmtsoc_port_master_internal_port_source_last;
wire [31:0] mgmtsoc_port_master_internal_port_source_payload_data;
wire mgmtsoc_port_master_internal_port_sink_valid;
wire mgmtsoc_port_master_internal_port_sink_ready;
wire mgmtsoc_port_master_internal_port_sink_first;
wire mgmtsoc_port_master_internal_port_sink_last;
wire [31:0] mgmtsoc_port_master_internal_port_sink_payload_data;
wire [5:0] mgmtsoc_port_master_internal_port_sink_payload_len;
wire [3:0] mgmtsoc_port_master_internal_port_sink_payload_width;
wire [7:0] mgmtsoc_port_master_internal_port_sink_payload_mask;
wire mgmtsoc_port_master_request;
reg uart_bridge_tx_sink_valid = 1'd0;
reg uart_bridge_tx_sink_ready = 1'd0;
wire uart_bridge_tx_sink_last;
reg [7:0] uart_bridge_tx_sink_payload_data = 8'd0;
reg [7:0] uart_bridge_tx_data = 8'd0;
reg [3:0] uart_bridge_tx_count = 4'd0;
reg uart_bridge_tx_enable = 1'd0;
reg uart_bridge_tx_tick = 1'd0;
reg [31:0] uart_bridge_tx_phase = 32'd0;
reg uart_bridge_rx_source_valid = 1'd0;
reg uart_bridge_rx_source_ready = 1'd0;
reg [7:0] uart_bridge_rx_source_payload_data = 8'd0;
reg [7:0] uart_bridge_rx_data = 8'd0;
reg [3:0] uart_bridge_rx_count = 4'd0;
reg uart_bridge_rx_enable = 1'd0;
reg uart_bridge_rx_tick = 1'd0;
reg [31:0] uart_bridge_rx_phase = 32'd0;
wire uart_bridge_rx_rx;
reg uart_bridge_rx_rx_d = 1'd0;
wire [29:0] uart_bridge_wishbone_adr;
wire [31:0] uart_bridge_wishbone_dat_w;
wire [31:0] uart_bridge_wishbone_dat_r;
wire [3:0] uart_bridge_wishbone_sel;
reg uart_bridge_wishbone_cyc = 1'd0;
reg uart_bridge_wishbone_stb = 1'd0;
wire uart_bridge_wishbone_ack;
reg uart_bridge_wishbone_we = 1'd0;
reg [2:0] uart_bridge_wishbone_cti = 3'd0;
reg [1:0] uart_bridge_wishbone_bte = 2'd0;
wire uart_bridge_wishbone_err;
reg [7:0] uart_bridge_cmd = 8'd0;
reg uart_bridge_incr = 1'd0;
reg [7:0] uart_bridge_length = 8'd0;
reg [31:0] uart_bridge_address = 32'd0;
reg [31:0] uart_bridge_data = 32'd0;
reg [1:0] uart_bridge_bytes_count = 2'd0;
reg [7:0] uart_bridge_words_count = 8'd0;
wire uart_bridge_reset;
wire uart_bridge_wait;
wire uart_bridge_done;
reg [19:0] uart_bridge_count = 20'd1000000;
reg uart_bridge_is_ongoing = 1'd0;
reg gpio_mode1_storage = 1'd0;
reg gpio_mode1_re = 1'd0;
reg gpio_mode0_storage = 1'd0;
reg gpio_mode0_re = 1'd0;
reg gpio_ien_storage = 1'd0;
reg gpio_ien_re = 1'd0;
reg gpio_oe_storage = 1'd0;
reg gpio_oe_re = 1'd0;
wire gpio_in_status;
wire gpio_in_we;
reg gpio_in_re = 1'd0;
reg gpio_out_storage = 1'd0;
reg gpio_out_re = 1'd0;
reg [127:0] la_ien_storage = 128'd0;
reg la_ien_re = 1'd0;
reg [127:0] la_oe_storage = 128'd0;
reg la_oe_re = 1'd0;
reg [127:0] la_in_status = 128'd0;
wire la_in_we;
reg la_in_re = 1'd0;
reg [127:0] la_out_storage = 128'd0;
reg la_out_re = 1'd0;
reg mprj_wb_iena_storage = 1'd0;
reg mprj_wb_iena_re = 1'd0;
reg [2:0] user_irq_ena_storage = 3'd0;
reg user_irq_ena_re = 1'd0;
wire gpioin0_in_status;
wire gpioin0_in_we;
reg gpioin0_in_re = 1'd0;
reg gpioin0_gpioin0_mode_storage = 1'd0;
reg gpioin0_gpioin0_mode_re = 1'd0;
reg gpioin0_gpioin0_edge_storage = 1'd0;
reg gpioin0_gpioin0_edge_re = 1'd0;
wire gpioin0_gpioin0_irq;
reg gpioin0_gpioin0_in_pads_n_d = 1'd0;
wire gpioin0_gpioin0_status;
reg gpioin0_gpioin0_pending = 1'd0;
reg gpioin0_gpioin0_trigger = 1'd0;
reg gpioin0_gpioin0_clear = 1'd0;
reg gpioin0_gpioin0_trigger_d = 1'd0;
wire gpioin1_in_status;
wire gpioin1_in_we;
reg gpioin1_in_re = 1'd0;
reg gpioin1_gpioin1_mode_storage = 1'd0;
reg gpioin1_gpioin1_mode_re = 1'd0;
reg gpioin1_gpioin1_edge_storage = 1'd0;
reg gpioin1_gpioin1_edge_re = 1'd0;
wire gpioin1_gpioin1_irq;
reg gpioin1_gpioin1_in_pads_n_d = 1'd0;
wire gpioin1_gpioin1_status;
reg gpioin1_gpioin1_pending = 1'd0;
reg gpioin1_gpioin1_trigger = 1'd0;
reg gpioin1_gpioin1_clear = 1'd0;
reg gpioin1_gpioin1_trigger_d = 1'd0;
wire gpioin2_in_status;
wire gpioin2_in_we;
reg gpioin2_in_re = 1'd0;
reg gpioin2_gpioin2_mode_storage = 1'd0;
reg gpioin2_gpioin2_mode_re = 1'd0;
reg gpioin2_gpioin2_edge_storage = 1'd0;
reg gpioin2_gpioin2_edge_re = 1'd0;
wire gpioin2_gpioin2_irq;
reg gpioin2_gpioin2_in_pads_n_d = 1'd0;
wire gpioin2_gpioin2_status;
reg gpioin2_gpioin2_pending = 1'd0;
reg gpioin2_gpioin2_trigger = 1'd0;
reg gpioin2_gpioin2_clear = 1'd0;
reg gpioin2_gpioin2_trigger_d = 1'd0;
wire gpioin3_in_status;
wire gpioin3_in_we;
reg gpioin3_in_re = 1'd0;
reg gpioin3_gpioin3_mode_storage = 1'd0;
reg gpioin3_gpioin3_mode_re = 1'd0;
reg gpioin3_gpioin3_edge_storage = 1'd0;
reg gpioin3_gpioin3_edge_re = 1'd0;
wire gpioin3_gpioin3_irq;
reg gpioin3_gpioin3_in_pads_n_d = 1'd0;
wire gpioin3_gpioin3_status;
reg gpioin3_gpioin3_pending = 1'd0;
reg gpioin3_gpioin3_trigger = 1'd0;
reg gpioin3_gpioin3_clear = 1'd0;
reg gpioin3_gpioin3_trigger_d = 1'd0;
wire gpioin4_in_status;
wire gpioin4_in_we;
reg gpioin4_in_re = 1'd0;
reg gpioin4_gpioin4_mode_storage = 1'd0;
reg gpioin4_gpioin4_mode_re = 1'd0;
reg gpioin4_gpioin4_edge_storage = 1'd0;
reg gpioin4_gpioin4_edge_re = 1'd0;
wire gpioin4_gpioin4_irq;
reg gpioin4_gpioin4_in_pads_n_d = 1'd0;
wire gpioin4_gpioin4_status;
reg gpioin4_gpioin4_pending = 1'd0;
reg gpioin4_gpioin4_trigger = 1'd0;
reg gpioin4_gpioin4_clear = 1'd0;
reg gpioin4_gpioin4_trigger_d = 1'd0;
wire gpioin5_in_status;
wire gpioin5_in_we;
reg gpioin5_in_re = 1'd0;
reg gpioin5_gpioin5_mode_storage = 1'd0;
reg gpioin5_gpioin5_mode_re = 1'd0;
reg gpioin5_gpioin5_edge_storage = 1'd0;
reg gpioin5_gpioin5_edge_re = 1'd0;
wire gpioin5_gpioin5_irq;
reg gpioin5_gpioin5_in_pads_n_d = 1'd0;
wire gpioin5_gpioin5_status;
reg gpioin5_gpioin5_pending = 1'd0;
reg gpioin5_gpioin5_trigger = 1'd0;
reg gpioin5_gpioin5_clear = 1'd0;
reg gpioin5_gpioin5_trigger_d = 1'd0;
reg rs232phy_rs232phytx_state = 1'd0;
reg rs232phy_rs232phytx_next_state = 1'd0;
reg [3:0] mgmtsoc_tx_count_rs232phy_rs232phytx_next_value0 = 4'd0;
reg mgmtsoc_tx_count_rs232phy_rs232phytx_next_value_ce0 = 1'd0;
reg mgmtsoc_serial_tx_rs232phy_rs232phytx_next_value1 = 1'd0;
reg mgmtsoc_serial_tx_rs232phy_rs232phytx_next_value_ce1 = 1'd0;
reg [7:0] mgmtsoc_tx_data_rs232phy_rs232phytx_next_value2 = 8'd0;
reg mgmtsoc_tx_data_rs232phy_rs232phytx_next_value_ce2 = 1'd0;
reg rs232phy_rs232phyrx_state = 1'd0;
reg rs232phy_rs232phyrx_next_state = 1'd0;
reg [3:0] mgmtsoc_rx_count_rs232phy_rs232phyrx_next_value0 = 4'd0;
reg mgmtsoc_rx_count_rs232phy_rs232phyrx_next_value_ce0 = 1'd0;
reg [7:0] mgmtsoc_rx_data_rs232phy_rs232phyrx_next_value1 = 8'd0;
reg mgmtsoc_rx_data_rs232phy_rs232phyrx_next_value_ce1 = 1'd0;
reg [1:0] spimaster_state = 2'd0;
reg [1:0] spimaster_next_state = 2'd0;
reg [2:0] spi_master_count_spimaster_next_value = 3'd0;
reg spi_master_count_spimaster_next_value_ce = 1'd0;
reg [1:0] litespiphy_state = 2'd0;
reg [1:0] litespiphy_next_state = 2'd0;
reg [7:0] mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value = 8'd0;
reg mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value_ce = 1'd0;
wire [1:0] litespi_request;
reg litespi_grant = 1'd0;
reg litespi_tx_mux_source_valid = 1'd0;
wire litespi_tx_mux_source_ready;
reg litespi_tx_mux_source_first = 1'd0;
reg litespi_tx_mux_source_last = 1'd0;
reg [31:0] litespi_tx_mux_source_payload_data = 32'd0;
reg [5:0] litespi_tx_mux_source_payload_len = 6'd0;
reg [3:0] litespi_tx_mux_source_payload_width = 4'd0;
reg [7:0] litespi_tx_mux_source_payload_mask = 8'd0;
wire litespi_tx_mux_endpoint0_sink_valid;
reg litespi_tx_mux_endpoint0_sink_ready = 1'd0;
wire litespi_tx_mux_endpoint0_sink_first;
wire litespi_tx_mux_endpoint0_sink_last;
wire [31:0] litespi_tx_mux_endpoint0_sink_payload_data;
wire [5:0] litespi_tx_mux_endpoint0_sink_payload_len;
wire [3:0] litespi_tx_mux_endpoint0_sink_payload_width;
wire [7:0] litespi_tx_mux_endpoint0_sink_payload_mask;
wire litespi_tx_mux_endpoint1_sink_valid;
reg litespi_tx_mux_endpoint1_sink_ready = 1'd0;
wire litespi_tx_mux_endpoint1_sink_first;
wire litespi_tx_mux_endpoint1_sink_last;
wire [31:0] litespi_tx_mux_endpoint1_sink_payload_data;
wire [5:0] litespi_tx_mux_endpoint1_sink_payload_len;
wire [3:0] litespi_tx_mux_endpoint1_sink_payload_width;
wire [7:0] litespi_tx_mux_endpoint1_sink_payload_mask;
wire litespi_tx_mux_sel;
wire litespi_rx_demux_sink_valid;
reg litespi_rx_demux_sink_ready = 1'd0;
wire litespi_rx_demux_sink_first;
wire litespi_rx_demux_sink_last;
wire [31:0] litespi_rx_demux_sink_payload_data;
reg litespi_rx_demux_endpoint0_source_valid = 1'd0;
wire litespi_rx_demux_endpoint0_source_ready;
reg litespi_rx_demux_endpoint0_source_first = 1'd0;
reg litespi_rx_demux_endpoint0_source_last = 1'd0;
reg [31:0] litespi_rx_demux_endpoint0_source_payload_data = 32'd0;
reg litespi_rx_demux_endpoint1_source_valid = 1'd0;
wire litespi_rx_demux_endpoint1_source_ready;
reg litespi_rx_demux_endpoint1_source_first = 1'd0;
reg litespi_rx_demux_endpoint1_source_last = 1'd0;
reg [31:0] litespi_rx_demux_endpoint1_source_payload_data = 32'd0;
wire litespi_rx_demux_sel;
reg [3:0] litespi_state = 4'd0;
reg [3:0] litespi_next_state = 4'd0;
reg mgmtsoc_litespimmap_burst_cs_litespi_next_value0 = 1'd0;
reg mgmtsoc_litespimmap_burst_cs_litespi_next_value_ce0 = 1'd0;
reg [29:0] mgmtsoc_litespimmap_burst_adr_litespi_next_value1 = 30'd0;
reg mgmtsoc_litespimmap_burst_adr_litespi_next_value_ce1 = 1'd0;
reg uartwishbonebridge_rs232phytx_state = 1'd0;
reg uartwishbonebridge_rs232phytx_next_state = 1'd0;
reg [3:0] uart_bridge_tx_count_uartwishbonebridge_rs232phytx_next_value0 = 4'd0;
reg uart_bridge_tx_count_uartwishbonebridge_rs232phytx_next_value_ce0 = 1'd0;
reg platform_obj_serial_dbg_tx_uartwishbonebridge_rs232phytx_next_value1 = 1'd0;
reg platform_obj_serial_dbg_tx_uartwishbonebridge_rs232phytx_next_value_ce1 = 1'd0;
reg [7:0] uart_bridge_tx_data_uartwishbonebridge_rs232phytx_next_value2 = 8'd0;
reg uart_bridge_tx_data_uartwishbonebridge_rs232phytx_next_value_ce2 = 1'd0;
reg uartwishbonebridge_rs232phyrx_state = 1'd0;
reg uartwishbonebridge_rs232phyrx_next_state = 1'd0;
reg [3:0] uart_bridge_rx_count_uartwishbonebridge_rs232phyrx_next_value0 = 4'd0;
reg uart_bridge_rx_count_uartwishbonebridge_rs232phyrx_next_value_ce0 = 1'd0;
reg [7:0] uart_bridge_rx_data_uartwishbonebridge_rs232phyrx_next_value1 = 8'd0;
reg uart_bridge_rx_data_uartwishbonebridge_rs232phyrx_next_value_ce1 = 1'd0;
reg [2:0] uartwishbonebridge_state = 3'd0;
reg [2:0] uartwishbonebridge_next_state = 3'd0;
reg [1:0] uart_bridge_bytes_count_uartwishbonebridge_next_value0 = 2'd0;
reg uart_bridge_bytes_count_uartwishbonebridge_next_value_ce0 = 1'd0;
reg [7:0] uart_bridge_words_count_uartwishbonebridge_next_value1 = 8'd0;
reg uart_bridge_words_count_uartwishbonebridge_next_value_ce1 = 1'd0;
reg [7:0] uart_bridge_cmd_uartwishbonebridge_next_value2 = 8'd0;
reg uart_bridge_cmd_uartwishbonebridge_next_value_ce2 = 1'd0;
reg [7:0] uart_bridge_length_uartwishbonebridge_next_value3 = 8'd0;
reg uart_bridge_length_uartwishbonebridge_next_value_ce3 = 1'd0;
reg [31:0] uart_bridge_address_uartwishbonebridge_next_value4 = 32'd0;
reg uart_bridge_address_uartwishbonebridge_next_value_ce4 = 1'd0;
reg uart_bridge_incr_uartwishbonebridge_next_value5 = 1'd0;
reg uart_bridge_incr_uartwishbonebridge_next_value_ce5 = 1'd0;
reg [31:0] uart_bridge_data_uartwishbonebridge_next_value6 = 32'd0;
reg uart_bridge_data_uartwishbonebridge_next_value_ce6 = 1'd0;
wire gpioin0_i00;
wire gpioin0_status_status;
wire gpioin0_status_we;
reg gpioin0_status_re = 1'd0;
wire gpioin0_i01;
wire gpioin0_pending_status;
wire gpioin0_pending_we;
reg gpioin0_pending_re = 1'd0;
reg gpioin0_pending_r = 1'd0;
wire gpioin0_i02;
reg gpioin0_enable_storage = 1'd0;
reg gpioin0_enable_re = 1'd0;
wire gpioin1_i00;
wire gpioin1_status_status;
wire gpioin1_status_we;
reg gpioin1_status_re = 1'd0;
wire gpioin1_i01;
wire gpioin1_pending_status;
wire gpioin1_pending_we;
reg gpioin1_pending_re = 1'd0;
reg gpioin1_pending_r = 1'd0;
wire gpioin1_i02;
reg gpioin1_enable_storage = 1'd0;
reg gpioin1_enable_re = 1'd0;
wire gpioin2_i00;
wire gpioin2_status_status;
wire gpioin2_status_we;
reg gpioin2_status_re = 1'd0;
wire gpioin2_i01;
wire gpioin2_pending_status;
wire gpioin2_pending_we;
reg gpioin2_pending_re = 1'd0;
reg gpioin2_pending_r = 1'd0;
wire gpioin2_i02;
reg gpioin2_enable_storage = 1'd0;
reg gpioin2_enable_re = 1'd0;
wire gpioin3_i00;
wire gpioin3_status_status;
wire gpioin3_status_we;
reg gpioin3_status_re = 1'd0;
wire gpioin3_i01;
wire gpioin3_pending_status;
wire gpioin3_pending_we;
reg gpioin3_pending_re = 1'd0;
reg gpioin3_pending_r = 1'd0;
wire gpioin3_i02;
reg gpioin3_enable_storage = 1'd0;
reg gpioin3_enable_re = 1'd0;
wire gpioin4_i00;
wire gpioin4_status_status;
wire gpioin4_status_we;
reg gpioin4_status_re = 1'd0;
wire gpioin4_i01;
wire gpioin4_pending_status;
wire gpioin4_pending_we;
reg gpioin4_pending_re = 1'd0;
reg gpioin4_pending_r = 1'd0;
wire gpioin4_i02;
reg gpioin4_enable_storage = 1'd0;
reg gpioin4_enable_re = 1'd0;
wire gpioin5_i00;
wire gpioin5_status_status;
wire gpioin5_status_we;
reg gpioin5_status_re = 1'd0;
wire gpioin5_i01;
wire gpioin5_pending_status;
wire gpioin5_pending_we;
reg gpioin5_pending_re = 1'd0;
reg gpioin5_pending_r = 1'd0;
wire gpioin5_i02;
reg gpioin5_enable_storage = 1'd0;
reg gpioin5_enable_re = 1'd0;
reg [13:0] mgmtsoc_adr = 14'd0;
reg mgmtsoc_we = 1'd0;
reg [31:0] mgmtsoc_dat_w = 32'd0;
wire [31:0] mgmtsoc_dat_r;
wire [29:0] mgmtsoc_wishbone_adr;
wire [31:0] mgmtsoc_wishbone_dat_w;
reg [31:0] mgmtsoc_wishbone_dat_r = 32'd0;
wire [3:0] mgmtsoc_wishbone_sel;
wire mgmtsoc_wishbone_cyc;
wire mgmtsoc_wishbone_stb;
reg mgmtsoc_wishbone_ack = 1'd0;
wire mgmtsoc_wishbone_we;
wire [2:0] mgmtsoc_wishbone_cti;
wire [1:0] mgmtsoc_wishbone_bte;
reg mgmtsoc_wishbone_err = 1'd0;
wire [29:0] shared_adr;
wire [31:0] shared_dat_w;
reg [31:0] shared_dat_r = 32'd0;
wire [3:0] shared_sel;
wire shared_cyc;
wire shared_stb;
reg shared_ack = 1'd0;
wire shared_we;
wire [2:0] shared_cti;
wire [1:0] shared_bte;
wire shared_err;
wire [1:0] request;
reg grant = 1'd0;
reg [2:0] slave_sel = 3'd0;
reg [2:0] slave_sel_r = 3'd0;
reg error = 1'd0;
wire wait_1;
wire done;
reg [19:0] count = 20'd1000000;
wire [13:0] interface0_bank_bus_adr;
wire interface0_bank_bus_we;
wire [31:0] interface0_bank_bus_dat_w;
reg [31:0] interface0_bank_bus_dat_r = 32'd0;
reg csrbank0_reset0_re = 1'd0;
wire [1:0] csrbank0_reset0_r;
reg csrbank0_reset0_we = 1'd0;
wire [1:0] csrbank0_reset0_w;
reg csrbank0_scratch0_re = 1'd0;
wire [31:0] csrbank0_scratch0_r;
reg csrbank0_scratch0_we = 1'd0;
wire [31:0] csrbank0_scratch0_w;
reg csrbank0_bus_errors_re = 1'd0;
wire [31:0] csrbank0_bus_errors_r;
reg csrbank0_bus_errors_we = 1'd0;
wire [31:0] csrbank0_bus_errors_w;
wire csrbank0_sel;
wire [13:0] interface1_bank_bus_adr;
wire interface1_bank_bus_we;
wire [31:0] interface1_bank_bus_dat_w;
reg [31:0] interface1_bank_bus_dat_r = 32'd0;
reg csrbank1_mode10_re = 1'd0;
wire csrbank1_mode10_r;
reg csrbank1_mode10_we = 1'd0;
wire csrbank1_mode10_w;
reg csrbank1_mode00_re = 1'd0;
wire csrbank1_mode00_r;
reg csrbank1_mode00_we = 1'd0;
wire csrbank1_mode00_w;
reg csrbank1_ien0_re = 1'd0;
wire csrbank1_ien0_r;
reg csrbank1_ien0_we = 1'd0;
wire csrbank1_ien0_w;
reg csrbank1_oe0_re = 1'd0;
wire csrbank1_oe0_r;
reg csrbank1_oe0_we = 1'd0;
wire csrbank1_oe0_w;
reg csrbank1_in_re = 1'd0;
wire csrbank1_in_r;
reg csrbank1_in_we = 1'd0;
wire csrbank1_in_w;
reg csrbank1_out0_re = 1'd0;
wire csrbank1_out0_r;
reg csrbank1_out0_we = 1'd0;
wire csrbank1_out0_w;
wire csrbank1_sel;
wire [13:0] interface2_bank_bus_adr;
wire interface2_bank_bus_we;
wire [31:0] interface2_bank_bus_dat_w;
reg [31:0] interface2_bank_bus_dat_r = 32'd0;
reg csrbank2_ien3_re = 1'd0;
wire [31:0] csrbank2_ien3_r;
reg csrbank2_ien3_we = 1'd0;
wire [31:0] csrbank2_ien3_w;
reg csrbank2_ien2_re = 1'd0;
wire [31:0] csrbank2_ien2_r;
reg csrbank2_ien2_we = 1'd0;
wire [31:0] csrbank2_ien2_w;
reg csrbank2_ien1_re = 1'd0;
wire [31:0] csrbank2_ien1_r;
reg csrbank2_ien1_we = 1'd0;
wire [31:0] csrbank2_ien1_w;
reg csrbank2_ien0_re = 1'd0;
wire [31:0] csrbank2_ien0_r;
reg csrbank2_ien0_we = 1'd0;
wire [31:0] csrbank2_ien0_w;
reg csrbank2_oe3_re = 1'd0;
wire [31:0] csrbank2_oe3_r;
reg csrbank2_oe3_we = 1'd0;
wire [31:0] csrbank2_oe3_w;
reg csrbank2_oe2_re = 1'd0;
wire [31:0] csrbank2_oe2_r;
reg csrbank2_oe2_we = 1'd0;
wire [31:0] csrbank2_oe2_w;
reg csrbank2_oe1_re = 1'd0;
wire [31:0] csrbank2_oe1_r;
reg csrbank2_oe1_we = 1'd0;
wire [31:0] csrbank2_oe1_w;
reg csrbank2_oe0_re = 1'd0;
wire [31:0] csrbank2_oe0_r;
reg csrbank2_oe0_we = 1'd0;
wire [31:0] csrbank2_oe0_w;
reg csrbank2_in3_re = 1'd0;
wire [31:0] csrbank2_in3_r;
reg csrbank2_in3_we = 1'd0;
wire [31:0] csrbank2_in3_w;
reg csrbank2_in2_re = 1'd0;
wire [31:0] csrbank2_in2_r;
reg csrbank2_in2_we = 1'd0;
wire [31:0] csrbank2_in2_w;
reg csrbank2_in1_re = 1'd0;
wire [31:0] csrbank2_in1_r;
reg csrbank2_in1_we = 1'd0;
wire [31:0] csrbank2_in1_w;
reg csrbank2_in0_re = 1'd0;
wire [31:0] csrbank2_in0_r;
reg csrbank2_in0_we = 1'd0;
wire [31:0] csrbank2_in0_w;
reg csrbank2_out3_re = 1'd0;
wire [31:0] csrbank2_out3_r;
reg csrbank2_out3_we = 1'd0;
wire [31:0] csrbank2_out3_w;
reg csrbank2_out2_re = 1'd0;
wire [31:0] csrbank2_out2_r;
reg csrbank2_out2_we = 1'd0;
wire [31:0] csrbank2_out2_w;
reg csrbank2_out1_re = 1'd0;
wire [31:0] csrbank2_out1_r;
reg csrbank2_out1_we = 1'd0;
wire [31:0] csrbank2_out1_w;
reg csrbank2_out0_re = 1'd0;
wire [31:0] csrbank2_out0_r;
reg csrbank2_out0_we = 1'd0;
wire [31:0] csrbank2_out0_w;
wire csrbank2_sel;
wire [13:0] interface3_bank_bus_adr;
wire interface3_bank_bus_we;
wire [31:0] interface3_bank_bus_dat_w;
reg [31:0] interface3_bank_bus_dat_r = 32'd0;
reg csrbank3_out0_re = 1'd0;
wire csrbank3_out0_r;
reg csrbank3_out0_we = 1'd0;
wire csrbank3_out0_w;
wire csrbank3_sel;
wire [13:0] interface4_bank_bus_adr;
wire interface4_bank_bus_we;
wire [31:0] interface4_bank_bus_dat_w;
reg [31:0] interface4_bank_bus_dat_r = 32'd0;
reg csrbank4_control0_re = 1'd0;
wire [15:0] csrbank4_control0_r;
reg csrbank4_control0_we = 1'd0;
wire [15:0] csrbank4_control0_w;
reg csrbank4_status_re = 1'd0;
wire csrbank4_status_r;
reg csrbank4_status_we = 1'd0;
wire csrbank4_status_w;
reg csrbank4_mosi0_re = 1'd0;
wire [7:0] csrbank4_mosi0_r;
reg csrbank4_mosi0_we = 1'd0;
wire [7:0] csrbank4_mosi0_w;
reg csrbank4_miso_re = 1'd0;
wire [7:0] csrbank4_miso_r;
reg csrbank4_miso_we = 1'd0;
wire [7:0] csrbank4_miso_w;
reg csrbank4_cs0_re = 1'd0;
wire [16:0] csrbank4_cs0_r;
reg csrbank4_cs0_we = 1'd0;
wire [16:0] csrbank4_cs0_w;
reg csrbank4_loopback0_re = 1'd0;
wire csrbank4_loopback0_r;
reg csrbank4_loopback0_we = 1'd0;
wire csrbank4_loopback0_w;
reg csrbank4_clk_divider0_re = 1'd0;
wire [15:0] csrbank4_clk_divider0_r;
reg csrbank4_clk_divider0_we = 1'd0;
wire [15:0] csrbank4_clk_divider0_w;
wire csrbank4_sel;
wire [13:0] interface5_bank_bus_adr;
wire interface5_bank_bus_we;
wire [31:0] interface5_bank_bus_dat_w;
reg [31:0] interface5_bank_bus_dat_r = 32'd0;
reg csrbank5_mmap_dummy_bits0_re = 1'd0;
wire [7:0] csrbank5_mmap_dummy_bits0_r;
reg csrbank5_mmap_dummy_bits0_we = 1'd0;
wire [7:0] csrbank5_mmap_dummy_bits0_w;
reg csrbank5_master_cs0_re = 1'd0;
wire csrbank5_master_cs0_r;
reg csrbank5_master_cs0_we = 1'd0;
wire csrbank5_master_cs0_w;
reg csrbank5_master_phyconfig0_re = 1'd0;
wire [23:0] csrbank5_master_phyconfig0_r;
reg csrbank5_master_phyconfig0_we = 1'd0;
wire [23:0] csrbank5_master_phyconfig0_w;
reg csrbank5_master_status_re = 1'd0;
wire [1:0] csrbank5_master_status_r;
reg csrbank5_master_status_we = 1'd0;
wire [1:0] csrbank5_master_status_w;
wire csrbank5_sel;
wire [13:0] interface6_bank_bus_adr;
wire interface6_bank_bus_we;
wire [31:0] interface6_bank_bus_dat_w;
reg [31:0] interface6_bank_bus_dat_r = 32'd0;
reg csrbank6_clk_divisor0_re = 1'd0;
wire [7:0] csrbank6_clk_divisor0_r;
reg csrbank6_clk_divisor0_we = 1'd0;
wire [7:0] csrbank6_clk_divisor0_w;
wire csrbank6_sel;
wire [13:0] interface7_bank_bus_adr;
wire interface7_bank_bus_we;
wire [31:0] interface7_bank_bus_dat_w;
reg [31:0] interface7_bank_bus_dat_r = 32'd0;
reg csrbank7_load0_re = 1'd0;
wire [31:0] csrbank7_load0_r;
reg csrbank7_load0_we = 1'd0;
wire [31:0] csrbank7_load0_w;
reg csrbank7_reload0_re = 1'd0;
wire [31:0] csrbank7_reload0_r;
reg csrbank7_reload0_we = 1'd0;
wire [31:0] csrbank7_reload0_w;
reg csrbank7_en0_re = 1'd0;
wire csrbank7_en0_r;
reg csrbank7_en0_we = 1'd0;
wire csrbank7_en0_w;
reg csrbank7_update_value0_re = 1'd0;
wire csrbank7_update_value0_r;
reg csrbank7_update_value0_we = 1'd0;
wire csrbank7_update_value0_w;
reg csrbank7_value_re = 1'd0;
wire [31:0] csrbank7_value_r;
reg csrbank7_value_we = 1'd0;
wire [31:0] csrbank7_value_w;
reg csrbank7_ev_status_re = 1'd0;
wire csrbank7_ev_status_r;
reg csrbank7_ev_status_we = 1'd0;
wire csrbank7_ev_status_w;
reg csrbank7_ev_pending_re = 1'd0;
wire csrbank7_ev_pending_r;
reg csrbank7_ev_pending_we = 1'd0;
wire csrbank7_ev_pending_w;
reg csrbank7_ev_enable0_re = 1'd0;
wire csrbank7_ev_enable0_r;
reg csrbank7_ev_enable0_we = 1'd0;
wire csrbank7_ev_enable0_w;
wire csrbank7_sel;
wire [13:0] interface8_bank_bus_adr;
wire interface8_bank_bus_we;
wire [31:0] interface8_bank_bus_dat_w;
reg [31:0] interface8_bank_bus_dat_r = 32'd0;
reg csrbank8_txfull_re = 1'd0;
wire csrbank8_txfull_r;
reg csrbank8_txfull_we = 1'd0;
wire csrbank8_txfull_w;
reg csrbank8_rxempty_re = 1'd0;
wire csrbank8_rxempty_r;
reg csrbank8_rxempty_we = 1'd0;
wire csrbank8_rxempty_w;
reg csrbank8_ev_status_re = 1'd0;
wire [1:0] csrbank8_ev_status_r;
reg csrbank8_ev_status_we = 1'd0;
wire [1:0] csrbank8_ev_status_w;
reg csrbank8_ev_pending_re = 1'd0;
wire [1:0] csrbank8_ev_pending_r;
reg csrbank8_ev_pending_we = 1'd0;
wire [1:0] csrbank8_ev_pending_w;
reg csrbank8_ev_enable0_re = 1'd0;
wire [1:0] csrbank8_ev_enable0_r;
reg csrbank8_ev_enable0_we = 1'd0;
wire [1:0] csrbank8_ev_enable0_w;
reg csrbank8_txempty_re = 1'd0;
wire csrbank8_txempty_r;
reg csrbank8_txempty_we = 1'd0;
wire csrbank8_txempty_w;
reg csrbank8_rxfull_re = 1'd0;
wire csrbank8_rxfull_r;
reg csrbank8_rxfull_we = 1'd0;
wire csrbank8_rxfull_w;
wire csrbank8_sel;
wire [13:0] interface9_bank_bus_adr;
wire interface9_bank_bus_we;
wire [31:0] interface9_bank_bus_dat_w;
reg [31:0] interface9_bank_bus_dat_r = 32'd0;
reg csrbank9_in_re = 1'd0;
wire csrbank9_in_r;
reg csrbank9_in_we = 1'd0;
wire csrbank9_in_w;
reg csrbank9_mode0_re = 1'd0;
wire csrbank9_mode0_r;
reg csrbank9_mode0_we = 1'd0;
wire csrbank9_mode0_w;
reg csrbank9_edge0_re = 1'd0;
wire csrbank9_edge0_r;
reg csrbank9_edge0_we = 1'd0;
wire csrbank9_edge0_w;
reg csrbank9_ev_status_re = 1'd0;
wire csrbank9_ev_status_r;
reg csrbank9_ev_status_we = 1'd0;
wire csrbank9_ev_status_w;
reg csrbank9_ev_pending_re = 1'd0;
wire csrbank9_ev_pending_r;
reg csrbank9_ev_pending_we = 1'd0;
wire csrbank9_ev_pending_w;
reg csrbank9_ev_enable0_re = 1'd0;
wire csrbank9_ev_enable0_r;
reg csrbank9_ev_enable0_we = 1'd0;
wire csrbank9_ev_enable0_w;
wire csrbank9_sel;
wire [13:0] interface10_bank_bus_adr;
wire interface10_bank_bus_we;
wire [31:0] interface10_bank_bus_dat_w;
reg [31:0] interface10_bank_bus_dat_r = 32'd0;
reg csrbank10_in_re = 1'd0;
wire csrbank10_in_r;
reg csrbank10_in_we = 1'd0;
wire csrbank10_in_w;
reg csrbank10_mode0_re = 1'd0;
wire csrbank10_mode0_r;
reg csrbank10_mode0_we = 1'd0;
wire csrbank10_mode0_w;
reg csrbank10_edge0_re = 1'd0;
wire csrbank10_edge0_r;
reg csrbank10_edge0_we = 1'd0;
wire csrbank10_edge0_w;
reg csrbank10_ev_status_re = 1'd0;
wire csrbank10_ev_status_r;
reg csrbank10_ev_status_we = 1'd0;
wire csrbank10_ev_status_w;
reg csrbank10_ev_pending_re = 1'd0;
wire csrbank10_ev_pending_r;
reg csrbank10_ev_pending_we = 1'd0;
wire csrbank10_ev_pending_w;
reg csrbank10_ev_enable0_re = 1'd0;
wire csrbank10_ev_enable0_r;
reg csrbank10_ev_enable0_we = 1'd0;
wire csrbank10_ev_enable0_w;
wire csrbank10_sel;
wire [13:0] interface11_bank_bus_adr;
wire interface11_bank_bus_we;
wire [31:0] interface11_bank_bus_dat_w;
reg [31:0] interface11_bank_bus_dat_r = 32'd0;
reg csrbank11_in_re = 1'd0;
wire csrbank11_in_r;
reg csrbank11_in_we = 1'd0;
wire csrbank11_in_w;
reg csrbank11_mode0_re = 1'd0;
wire csrbank11_mode0_r;
reg csrbank11_mode0_we = 1'd0;
wire csrbank11_mode0_w;
reg csrbank11_edge0_re = 1'd0;
wire csrbank11_edge0_r;
reg csrbank11_edge0_we = 1'd0;
wire csrbank11_edge0_w;
reg csrbank11_ev_status_re = 1'd0;
wire csrbank11_ev_status_r;
reg csrbank11_ev_status_we = 1'd0;
wire csrbank11_ev_status_w;
reg csrbank11_ev_pending_re = 1'd0;
wire csrbank11_ev_pending_r;
reg csrbank11_ev_pending_we = 1'd0;
wire csrbank11_ev_pending_w;
reg csrbank11_ev_enable0_re = 1'd0;
wire csrbank11_ev_enable0_r;
reg csrbank11_ev_enable0_we = 1'd0;
wire csrbank11_ev_enable0_w;
wire csrbank11_sel;
wire [13:0] interface12_bank_bus_adr;
wire interface12_bank_bus_we;
wire [31:0] interface12_bank_bus_dat_w;
reg [31:0] interface12_bank_bus_dat_r = 32'd0;
reg csrbank12_in_re = 1'd0;
wire csrbank12_in_r;
reg csrbank12_in_we = 1'd0;
wire csrbank12_in_w;
reg csrbank12_mode0_re = 1'd0;
wire csrbank12_mode0_r;
reg csrbank12_mode0_we = 1'd0;
wire csrbank12_mode0_w;
reg csrbank12_edge0_re = 1'd0;
wire csrbank12_edge0_r;
reg csrbank12_edge0_we = 1'd0;
wire csrbank12_edge0_w;
reg csrbank12_ev_status_re = 1'd0;
wire csrbank12_ev_status_r;
reg csrbank12_ev_status_we = 1'd0;
wire csrbank12_ev_status_w;
reg csrbank12_ev_pending_re = 1'd0;
wire csrbank12_ev_pending_r;
reg csrbank12_ev_pending_we = 1'd0;
wire csrbank12_ev_pending_w;
reg csrbank12_ev_enable0_re = 1'd0;
wire csrbank12_ev_enable0_r;
reg csrbank12_ev_enable0_we = 1'd0;
wire csrbank12_ev_enable0_w;
wire csrbank12_sel;
wire [13:0] interface13_bank_bus_adr;
wire interface13_bank_bus_we;
wire [31:0] interface13_bank_bus_dat_w;
reg [31:0] interface13_bank_bus_dat_r = 32'd0;
reg csrbank13_in_re = 1'd0;
wire csrbank13_in_r;
reg csrbank13_in_we = 1'd0;
wire csrbank13_in_w;
reg csrbank13_mode0_re = 1'd0;
wire csrbank13_mode0_r;
reg csrbank13_mode0_we = 1'd0;
wire csrbank13_mode0_w;
reg csrbank13_edge0_re = 1'd0;
wire csrbank13_edge0_r;
reg csrbank13_edge0_we = 1'd0;
wire csrbank13_edge0_w;
reg csrbank13_ev_status_re = 1'd0;
wire csrbank13_ev_status_r;
reg csrbank13_ev_status_we = 1'd0;
wire csrbank13_ev_status_w;
reg csrbank13_ev_pending_re = 1'd0;
wire csrbank13_ev_pending_r;
reg csrbank13_ev_pending_we = 1'd0;
wire csrbank13_ev_pending_w;
reg csrbank13_ev_enable0_re = 1'd0;
wire csrbank13_ev_enable0_r;
reg csrbank13_ev_enable0_we = 1'd0;
wire csrbank13_ev_enable0_w;
wire csrbank13_sel;
wire [13:0] interface14_bank_bus_adr;
wire interface14_bank_bus_we;
wire [31:0] interface14_bank_bus_dat_w;
reg [31:0] interface14_bank_bus_dat_r = 32'd0;
reg csrbank14_in_re = 1'd0;
wire csrbank14_in_r;
reg csrbank14_in_we = 1'd0;
wire csrbank14_in_w;
reg csrbank14_mode0_re = 1'd0;
wire csrbank14_mode0_r;
reg csrbank14_mode0_we = 1'd0;
wire csrbank14_mode0_w;
reg csrbank14_edge0_re = 1'd0;
wire csrbank14_edge0_r;
reg csrbank14_edge0_we = 1'd0;
wire csrbank14_edge0_w;
reg csrbank14_ev_status_re = 1'd0;
wire csrbank14_ev_status_r;
reg csrbank14_ev_status_we = 1'd0;
wire csrbank14_ev_status_w;
reg csrbank14_ev_pending_re = 1'd0;
wire csrbank14_ev_pending_r;
reg csrbank14_ev_pending_we = 1'd0;
wire csrbank14_ev_pending_w;
reg csrbank14_ev_enable0_re = 1'd0;
wire csrbank14_ev_enable0_r;
reg csrbank14_ev_enable0_we = 1'd0;
wire csrbank14_ev_enable0_w;
wire csrbank14_sel;
wire [13:0] interface15_bank_bus_adr;
wire interface15_bank_bus_we;
wire [31:0] interface15_bank_bus_dat_w;
reg [31:0] interface15_bank_bus_dat_r = 32'd0;
reg csrbank15_out0_re = 1'd0;
wire [2:0] csrbank15_out0_r;
reg csrbank15_out0_we = 1'd0;
wire [2:0] csrbank15_out0_w;
wire csrbank15_sel;
wire [13:0] csr_interconnect_adr;
wire csr_interconnect_we;
wire [31:0] csr_interconnect_dat_w;
wire [31:0] csr_interconnect_dat_r;
reg state = 1'd0;
reg next_state = 1'd0;
reg [29:0] comb_array_muxed0 = 30'd0;
reg [31:0] comb_array_muxed1 = 32'd0;
reg [3:0] comb_array_muxed2 = 4'd0;
reg comb_array_muxed3 = 1'd0;
reg comb_array_muxed4 = 1'd0;
reg comb_array_muxed5 = 1'd0;
reg [2:0] comb_array_muxed6 = 3'd0;
reg [1:0] comb_array_muxed7 = 2'd0;
reg sync_array_muxed = 1'd0;
reg multiregimpl0_regs0 = 1'd0;
reg multiregimpl0_regs1 = 1'd0;
wire sdrio_clk;
wire sdrio_clk_1;
wire sdrio_clk_2;
reg multiregimpl1_regs0 = 1'd0;
reg multiregimpl1_regs1 = 1'd0;
reg multiregimpl2_regs0 = 1'd0;
reg multiregimpl2_regs1 = 1'd0;
reg multiregimpl3_regs0 = 1'd0;
reg multiregimpl3_regs1 = 1'd0;
reg multiregimpl4_regs0 = 1'd0;
reg multiregimpl4_regs1 = 1'd0;
reg multiregimpl5_regs0 = 1'd0;
reg multiregimpl5_regs1 = 1'd0;
reg multiregimpl6_regs0 = 1'd0;
reg multiregimpl6_regs1 = 1'd0;
reg multiregimpl7_regs0 = 1'd0;
reg multiregimpl7_regs1 = 1'd0;
reg multiregimpl8_regs0 = 1'd0;
reg multiregimpl8_regs1 = 1'd0;
reg multiregimpl9_regs0 = 1'd0;
reg multiregimpl9_regs1 = 1'd0;
reg multiregimpl10_regs0 = 1'd0;
reg multiregimpl10_regs1 = 1'd0;
reg multiregimpl11_regs0 = 1'd0;
reg multiregimpl11_regs1 = 1'd0;
reg multiregimpl12_regs0 = 1'd0;
reg multiregimpl12_regs1 = 1'd0;
reg multiregimpl13_regs0 = 1'd0;
reg multiregimpl13_regs1 = 1'd0;
reg multiregimpl14_regs0 = 1'd0;
reg multiregimpl14_regs1 = 1'd0;
reg multiregimpl15_regs0 = 1'd0;
reg multiregimpl15_regs1 = 1'd0;
reg multiregimpl16_regs0 = 1'd0;
reg multiregimpl16_regs1 = 1'd0;
reg multiregimpl17_regs0 = 1'd0;
reg multiregimpl17_regs1 = 1'd0;
reg multiregimpl18_regs0 = 1'd0;
reg multiregimpl18_regs1 = 1'd0;
reg multiregimpl19_regs0 = 1'd0;
reg multiregimpl19_regs1 = 1'd0;
reg multiregimpl20_regs0 = 1'd0;
reg multiregimpl20_regs1 = 1'd0;
reg multiregimpl21_regs0 = 1'd0;
reg multiregimpl21_regs1 = 1'd0;
reg multiregimpl22_regs0 = 1'd0;
reg multiregimpl22_regs1 = 1'd0;
reg multiregimpl23_regs0 = 1'd0;
reg multiregimpl23_regs1 = 1'd0;
reg multiregimpl24_regs0 = 1'd0;
reg multiregimpl24_regs1 = 1'd0;
reg multiregimpl25_regs0 = 1'd0;
reg multiregimpl25_regs1 = 1'd0;
reg multiregimpl26_regs0 = 1'd0;
reg multiregimpl26_regs1 = 1'd0;
reg multiregimpl27_regs0 = 1'd0;
reg multiregimpl27_regs1 = 1'd0;
reg multiregimpl28_regs0 = 1'd0;
reg multiregimpl28_regs1 = 1'd0;
reg multiregimpl29_regs0 = 1'd0;
reg multiregimpl29_regs1 = 1'd0;
reg multiregimpl30_regs0 = 1'd0;
reg multiregimpl30_regs1 = 1'd0;
reg multiregimpl31_regs0 = 1'd0;
reg multiregimpl31_regs1 = 1'd0;
reg multiregimpl32_regs0 = 1'd0;
reg multiregimpl32_regs1 = 1'd0;
reg multiregimpl33_regs0 = 1'd0;
reg multiregimpl33_regs1 = 1'd0;
reg multiregimpl34_regs0 = 1'd0;
reg multiregimpl34_regs1 = 1'd0;
reg multiregimpl35_regs0 = 1'd0;
reg multiregimpl35_regs1 = 1'd0;
reg multiregimpl36_regs0 = 1'd0;
reg multiregimpl36_regs1 = 1'd0;
reg multiregimpl37_regs0 = 1'd0;
reg multiregimpl37_regs1 = 1'd0;
reg multiregimpl38_regs0 = 1'd0;
reg multiregimpl38_regs1 = 1'd0;
reg multiregimpl39_regs0 = 1'd0;
reg multiregimpl39_regs1 = 1'd0;
reg multiregimpl40_regs0 = 1'd0;
reg multiregimpl40_regs1 = 1'd0;
reg multiregimpl41_regs0 = 1'd0;
reg multiregimpl41_regs1 = 1'd0;
reg multiregimpl42_regs0 = 1'd0;
reg multiregimpl42_regs1 = 1'd0;
reg multiregimpl43_regs0 = 1'd0;
reg multiregimpl43_regs1 = 1'd0;
reg multiregimpl44_regs0 = 1'd0;
reg multiregimpl44_regs1 = 1'd0;
reg multiregimpl45_regs0 = 1'd0;
reg multiregimpl45_regs1 = 1'd0;
reg multiregimpl46_regs0 = 1'd0;
reg multiregimpl46_regs1 = 1'd0;
reg multiregimpl47_regs0 = 1'd0;
reg multiregimpl47_regs1 = 1'd0;
reg multiregimpl48_regs0 = 1'd0;
reg multiregimpl48_regs1 = 1'd0;
reg multiregimpl49_regs0 = 1'd0;
reg multiregimpl49_regs1 = 1'd0;
reg multiregimpl50_regs0 = 1'd0;
reg multiregimpl50_regs1 = 1'd0;
reg multiregimpl51_regs0 = 1'd0;
reg multiregimpl51_regs1 = 1'd0;
reg multiregimpl52_regs0 = 1'd0;
reg multiregimpl52_regs1 = 1'd0;
reg multiregimpl53_regs0 = 1'd0;
reg multiregimpl53_regs1 = 1'd0;
reg multiregimpl54_regs0 = 1'd0;
reg multiregimpl54_regs1 = 1'd0;
reg multiregimpl55_regs0 = 1'd0;
reg multiregimpl55_regs1 = 1'd0;
reg multiregimpl56_regs0 = 1'd0;
reg multiregimpl56_regs1 = 1'd0;
reg multiregimpl57_regs0 = 1'd0;
reg multiregimpl57_regs1 = 1'd0;
reg multiregimpl58_regs0 = 1'd0;
reg multiregimpl58_regs1 = 1'd0;
reg multiregimpl59_regs0 = 1'd0;
reg multiregimpl59_regs1 = 1'd0;
reg multiregimpl60_regs0 = 1'd0;
reg multiregimpl60_regs1 = 1'd0;
reg multiregimpl61_regs0 = 1'd0;
reg multiregimpl61_regs1 = 1'd0;
reg multiregimpl62_regs0 = 1'd0;
reg multiregimpl62_regs1 = 1'd0;
reg multiregimpl63_regs0 = 1'd0;
reg multiregimpl63_regs1 = 1'd0;
reg multiregimpl64_regs0 = 1'd0;
reg multiregimpl64_regs1 = 1'd0;
reg multiregimpl65_regs0 = 1'd0;
reg multiregimpl65_regs1 = 1'd0;
reg multiregimpl66_regs0 = 1'd0;
reg multiregimpl66_regs1 = 1'd0;
reg multiregimpl67_regs0 = 1'd0;
reg multiregimpl67_regs1 = 1'd0;
reg multiregimpl68_regs0 = 1'd0;
reg multiregimpl68_regs1 = 1'd0;
reg multiregimpl69_regs0 = 1'd0;
reg multiregimpl69_regs1 = 1'd0;
reg multiregimpl70_regs0 = 1'd0;
reg multiregimpl70_regs1 = 1'd0;
reg multiregimpl71_regs0 = 1'd0;
reg multiregimpl71_regs1 = 1'd0;
reg multiregimpl72_regs0 = 1'd0;
reg multiregimpl72_regs1 = 1'd0;
reg multiregimpl73_regs0 = 1'd0;
reg multiregimpl73_regs1 = 1'd0;
reg multiregimpl74_regs0 = 1'd0;
reg multiregimpl74_regs1 = 1'd0;
reg multiregimpl75_regs0 = 1'd0;
reg multiregimpl75_regs1 = 1'd0;
reg multiregimpl76_regs0 = 1'd0;
reg multiregimpl76_regs1 = 1'd0;
reg multiregimpl77_regs0 = 1'd0;
reg multiregimpl77_regs1 = 1'd0;
reg multiregimpl78_regs0 = 1'd0;
reg multiregimpl78_regs1 = 1'd0;
reg multiregimpl79_regs0 = 1'd0;
reg multiregimpl79_regs1 = 1'd0;
reg multiregimpl80_regs0 = 1'd0;
reg multiregimpl80_regs1 = 1'd0;
reg multiregimpl81_regs0 = 1'd0;
reg multiregimpl81_regs1 = 1'd0;
reg multiregimpl82_regs0 = 1'd0;
reg multiregimpl82_regs1 = 1'd0;
reg multiregimpl83_regs0 = 1'd0;
reg multiregimpl83_regs1 = 1'd0;
reg multiregimpl84_regs0 = 1'd0;
reg multiregimpl84_regs1 = 1'd0;
reg multiregimpl85_regs0 = 1'd0;
reg multiregimpl85_regs1 = 1'd0;
reg multiregimpl86_regs0 = 1'd0;
reg multiregimpl86_regs1 = 1'd0;
reg multiregimpl87_regs0 = 1'd0;
reg multiregimpl87_regs1 = 1'd0;
reg multiregimpl88_regs0 = 1'd0;
reg multiregimpl88_regs1 = 1'd0;
reg multiregimpl89_regs0 = 1'd0;
reg multiregimpl89_regs1 = 1'd0;
reg multiregimpl90_regs0 = 1'd0;
reg multiregimpl90_regs1 = 1'd0;
reg multiregimpl91_regs0 = 1'd0;
reg multiregimpl91_regs1 = 1'd0;
reg multiregimpl92_regs0 = 1'd0;
reg multiregimpl92_regs1 = 1'd0;
reg multiregimpl93_regs0 = 1'd0;
reg multiregimpl93_regs1 = 1'd0;
reg multiregimpl94_regs0 = 1'd0;
reg multiregimpl94_regs1 = 1'd0;
reg multiregimpl95_regs0 = 1'd0;
reg multiregimpl95_regs1 = 1'd0;
reg multiregimpl96_regs0 = 1'd0;
reg multiregimpl96_regs1 = 1'd0;
reg multiregimpl97_regs0 = 1'd0;
reg multiregimpl97_regs1 = 1'd0;
reg multiregimpl98_regs0 = 1'd0;
reg multiregimpl98_regs1 = 1'd0;
reg multiregimpl99_regs0 = 1'd0;
reg multiregimpl99_regs1 = 1'd0;
reg multiregimpl100_regs0 = 1'd0;
reg multiregimpl100_regs1 = 1'd0;
reg multiregimpl101_regs0 = 1'd0;
reg multiregimpl101_regs1 = 1'd0;
reg multiregimpl102_regs0 = 1'd0;
reg multiregimpl102_regs1 = 1'd0;
reg multiregimpl103_regs0 = 1'd0;
reg multiregimpl103_regs1 = 1'd0;
reg multiregimpl104_regs0 = 1'd0;
reg multiregimpl104_regs1 = 1'd0;
reg multiregimpl105_regs0 = 1'd0;
reg multiregimpl105_regs1 = 1'd0;
reg multiregimpl106_regs0 = 1'd0;
reg multiregimpl106_regs1 = 1'd0;
reg multiregimpl107_regs0 = 1'd0;
reg multiregimpl107_regs1 = 1'd0;
reg multiregimpl108_regs0 = 1'd0;
reg multiregimpl108_regs1 = 1'd0;
reg multiregimpl109_regs0 = 1'd0;
reg multiregimpl109_regs1 = 1'd0;
reg multiregimpl110_regs0 = 1'd0;
reg multiregimpl110_regs1 = 1'd0;
reg multiregimpl111_regs0 = 1'd0;
reg multiregimpl111_regs1 = 1'd0;
reg multiregimpl112_regs0 = 1'd0;
reg multiregimpl112_regs1 = 1'd0;
reg multiregimpl113_regs0 = 1'd0;
reg multiregimpl113_regs1 = 1'd0;
reg multiregimpl114_regs0 = 1'd0;
reg multiregimpl114_regs1 = 1'd0;
reg multiregimpl115_regs0 = 1'd0;
reg multiregimpl115_regs1 = 1'd0;
reg multiregimpl116_regs0 = 1'd0;
reg multiregimpl116_regs1 = 1'd0;
reg multiregimpl117_regs0 = 1'd0;
reg multiregimpl117_regs1 = 1'd0;
reg multiregimpl118_regs0 = 1'd0;
reg multiregimpl118_regs1 = 1'd0;
reg multiregimpl119_regs0 = 1'd0;
reg multiregimpl119_regs1 = 1'd0;
reg multiregimpl120_regs0 = 1'd0;
reg multiregimpl120_regs1 = 1'd0;
reg multiregimpl121_regs0 = 1'd0;
reg multiregimpl121_regs1 = 1'd0;
reg multiregimpl122_regs0 = 1'd0;
reg multiregimpl122_regs1 = 1'd0;
reg multiregimpl123_regs0 = 1'd0;
reg multiregimpl123_regs1 = 1'd0;
reg multiregimpl124_regs0 = 1'd0;
reg multiregimpl124_regs1 = 1'd0;
reg multiregimpl125_regs0 = 1'd0;
reg multiregimpl125_regs1 = 1'd0;
reg multiregimpl126_regs0 = 1'd0;
reg multiregimpl126_regs1 = 1'd0;
reg multiregimpl127_regs0 = 1'd0;
reg multiregimpl127_regs1 = 1'd0;
reg multiregimpl128_regs0 = 1'd0;
reg multiregimpl128_regs1 = 1'd0;
reg multiregimpl129_regs0 = 1'd0;
reg multiregimpl129_regs1 = 1'd0;
reg multiregimpl130_regs0 = 1'd0;
reg multiregimpl130_regs1 = 1'd0;
reg multiregimpl131_regs0 = 1'd0;
reg multiregimpl131_regs1 = 1'd0;
reg multiregimpl132_regs0 = 1'd0;
reg multiregimpl132_regs1 = 1'd0;
reg multiregimpl133_regs0 = 1'd0;
reg multiregimpl133_regs1 = 1'd0;
reg multiregimpl134_regs0 = 1'd0;
reg multiregimpl134_regs1 = 1'd0;
reg multiregimpl135_regs0 = 1'd0;
reg multiregimpl135_regs1 = 1'd0;
reg multiregimpl136_regs0 = 1'd0;
reg multiregimpl136_regs1 = 1'd0;

assign mgmtsoc_picorv32_reset = (mgmtsoc_soc_rst | mgmtsoc_cpu_rst);
assign mgmtsoc_bus_error = error;
always @(*) begin
	mgmtsoc_picorv32_interrupt <= 32'd0;
	mgmtsoc_picorv32_interrupt[1] <= mgmtsoc_timer_irq;
	mgmtsoc_picorv32_interrupt[0] <= mgmtsoc_uart_irq;
	mgmtsoc_picorv32_interrupt[2] <= gpioin0_gpioin0_irq;
	mgmtsoc_picorv32_interrupt[3] <= gpioin1_gpioin1_irq;
	mgmtsoc_picorv32_interrupt[4] <= gpioin2_gpioin2_irq;
	mgmtsoc_picorv32_interrupt[5] <= gpioin3_gpioin3_irq;
	mgmtsoc_picorv32_interrupt[6] <= gpioin4_gpioin4_irq;
	mgmtsoc_picorv32_interrupt[7] <= gpioin5_gpioin5_irq;
end
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst_1 = int_rst;
assign mgmtsoc_bus_errors_status = mgmtsoc_bus_errors;
assign mgmtsoc_picorv32_idbus_adr = mgmtsoc_picorv32_mem_addr[31:2];
assign mgmtsoc_picorv32_idbus_dat_w = mgmtsoc_picorv32_mem_wdata;
assign mgmtsoc_picorv32_idbus_we = (mgmtsoc_picorv32_mem_wstrb != 1'd0);
assign mgmtsoc_picorv32_idbus_sel = mgmtsoc_picorv32_mem_wstrb;
assign mgmtsoc_picorv32_idbus_cyc = mgmtsoc_picorv32_mem_valid;
assign mgmtsoc_picorv32_idbus_stb = mgmtsoc_picorv32_mem_valid;
assign mgmtsoc_picorv32_idbus_cti = 1'd0;
assign mgmtsoc_picorv32_idbus_bte = 1'd0;
assign mgmtsoc_picorv32_mem_ready = mgmtsoc_picorv32_idbus_ack;
assign mgmtsoc_picorv32_mem_rdata = mgmtsoc_picorv32_idbus_dat_r;
always @(*) begin
	mgmtsoc_serial_tx_rs232phy_rs232phytx_next_value1 <= 1'd0;
	mgmtsoc_tx_sink_ready <= 1'd0;
	mgmtsoc_serial_tx_rs232phy_rs232phytx_next_value_ce1 <= 1'd0;
	mgmtsoc_tx_data_rs232phy_rs232phytx_next_value2 <= 8'd0;
	mgmtsoc_tx_data_rs232phy_rs232phytx_next_value_ce2 <= 1'd0;
	mgmtsoc_tx_enable <= 1'd0;
	rs232phy_rs232phytx_next_state <= 1'd0;
	mgmtsoc_tx_count_rs232phy_rs232phytx_next_value0 <= 4'd0;
	mgmtsoc_tx_count_rs232phy_rs232phytx_next_value_ce0 <= 1'd0;
	rs232phy_rs232phytx_next_state <= rs232phy_rs232phytx_state;
	case (rs232phy_rs232phytx_state)
		1'd1: begin
			mgmtsoc_tx_enable <= 1'd1;
			if (mgmtsoc_tx_tick) begin
				mgmtsoc_serial_tx_rs232phy_rs232phytx_next_value1 <= mgmtsoc_tx_data;
				mgmtsoc_serial_tx_rs232phy_rs232phytx_next_value_ce1 <= 1'd1;
				mgmtsoc_tx_count_rs232phy_rs232phytx_next_value0 <= (mgmtsoc_tx_count + 1'd1);
				mgmtsoc_tx_count_rs232phy_rs232phytx_next_value_ce0 <= 1'd1;
				mgmtsoc_tx_data_rs232phy_rs232phytx_next_value2 <= {1'd1, mgmtsoc_tx_data[7:1]};
				mgmtsoc_tx_data_rs232phy_rs232phytx_next_value_ce2 <= 1'd1;
				if ((mgmtsoc_tx_count == 4'd9)) begin
					mgmtsoc_tx_sink_ready <= 1'd1;
					rs232phy_rs232phytx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			mgmtsoc_tx_count_rs232phy_rs232phytx_next_value0 <= 1'd0;
			mgmtsoc_tx_count_rs232phy_rs232phytx_next_value_ce0 <= 1'd1;
			mgmtsoc_serial_tx_rs232phy_rs232phytx_next_value1 <= 1'd1;
			mgmtsoc_serial_tx_rs232phy_rs232phytx_next_value_ce1 <= 1'd1;
			if (mgmtsoc_tx_sink_valid) begin
				mgmtsoc_serial_tx_rs232phy_rs232phytx_next_value1 <= 1'd0;
				mgmtsoc_serial_tx_rs232phy_rs232phytx_next_value_ce1 <= 1'd1;
				mgmtsoc_tx_data_rs232phy_rs232phytx_next_value2 <= mgmtsoc_tx_sink_payload_data;
				mgmtsoc_tx_data_rs232phy_rs232phytx_next_value_ce2 <= 1'd1;
				rs232phy_rs232phytx_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	mgmtsoc_rx_source_valid <= 1'd0;
	mgmtsoc_rx_data_rs232phy_rs232phyrx_next_value1 <= 8'd0;
	mgmtsoc_rx_data_rs232phy_rs232phyrx_next_value_ce1 <= 1'd0;
	mgmtsoc_rx_source_payload_data <= 8'd0;
	mgmtsoc_rx_enable <= 1'd0;
	rs232phy_rs232phyrx_next_state <= 1'd0;
	mgmtsoc_rx_count_rs232phy_rs232phyrx_next_value0 <= 4'd0;
	mgmtsoc_rx_count_rs232phy_rs232phyrx_next_value_ce0 <= 1'd0;
	rs232phy_rs232phyrx_next_state <= rs232phy_rs232phyrx_state;
	case (rs232phy_rs232phyrx_state)
		1'd1: begin
			mgmtsoc_rx_enable <= 1'd1;
			if (mgmtsoc_rx_tick) begin
				mgmtsoc_rx_count_rs232phy_rs232phyrx_next_value0 <= (mgmtsoc_rx_count + 1'd1);
				mgmtsoc_rx_count_rs232phy_rs232phyrx_next_value_ce0 <= 1'd1;
				mgmtsoc_rx_data_rs232phy_rs232phyrx_next_value1 <= {mgmtsoc_rx_rx, mgmtsoc_rx_data[7:1]};
				mgmtsoc_rx_data_rs232phy_rs232phyrx_next_value_ce1 <= 1'd1;
				if ((mgmtsoc_rx_count == 4'd9)) begin
					mgmtsoc_rx_source_valid <= (mgmtsoc_rx_rx == 1'd1);
					mgmtsoc_rx_source_payload_data <= mgmtsoc_rx_data;
					rs232phy_rs232phyrx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			mgmtsoc_rx_count_rs232phy_rs232phyrx_next_value0 <= 1'd0;
			mgmtsoc_rx_count_rs232phy_rs232phyrx_next_value_ce0 <= 1'd1;
			if (((mgmtsoc_rx_rx == 1'd0) & (mgmtsoc_rx_rx_d == 1'd1))) begin
				rs232phy_rs232phyrx_next_state <= 1'd1;
			end
		end
	endcase
end
assign mgmtsoc_uart_uart_sink_valid = mgmtsoc_rx_source_valid;
assign mgmtsoc_rx_source_ready = mgmtsoc_uart_uart_sink_ready;
assign mgmtsoc_uart_uart_sink_first = mgmtsoc_rx_source_first;
assign mgmtsoc_uart_uart_sink_last = mgmtsoc_rx_source_last;
assign mgmtsoc_uart_uart_sink_payload_data = mgmtsoc_rx_source_payload_data;
assign mgmtsoc_tx_sink_valid = mgmtsoc_uart_uart_source_valid;
assign mgmtsoc_uart_uart_source_ready = mgmtsoc_tx_sink_ready;
assign mgmtsoc_tx_sink_first = mgmtsoc_uart_uart_source_first;
assign mgmtsoc_tx_sink_last = mgmtsoc_uart_uart_source_last;
assign mgmtsoc_tx_sink_payload_data = mgmtsoc_uart_uart_source_payload_data;
assign mgmtsoc_uart_tx_fifo_sink_valid = mgmtsoc_uart_rxtx_re;
assign mgmtsoc_uart_tx_fifo_sink_payload_data = mgmtsoc_uart_rxtx_r;
assign mgmtsoc_uart_uart_source_valid = mgmtsoc_uart_tx_fifo_source_valid;
assign mgmtsoc_uart_tx_fifo_source_ready = mgmtsoc_uart_uart_source_ready;
assign mgmtsoc_uart_uart_source_first = mgmtsoc_uart_tx_fifo_source_first;
assign mgmtsoc_uart_uart_source_last = mgmtsoc_uart_tx_fifo_source_last;
assign mgmtsoc_uart_uart_source_payload_data = mgmtsoc_uart_tx_fifo_source_payload_data;
assign mgmtsoc_uart_txfull_status = (~mgmtsoc_uart_tx_fifo_sink_ready);
assign mgmtsoc_uart_txempty_status = (~mgmtsoc_uart_tx_fifo_source_valid);
assign mgmtsoc_uart_tx_trigger = mgmtsoc_uart_tx_fifo_sink_ready;
assign mgmtsoc_uart_rx_fifo_sink_valid = mgmtsoc_uart_uart_sink_valid;
assign mgmtsoc_uart_uart_sink_ready = mgmtsoc_uart_rx_fifo_sink_ready;
assign mgmtsoc_uart_rx_fifo_sink_first = mgmtsoc_uart_uart_sink_first;
assign mgmtsoc_uart_rx_fifo_sink_last = mgmtsoc_uart_uart_sink_last;
assign mgmtsoc_uart_rx_fifo_sink_payload_data = mgmtsoc_uart_uart_sink_payload_data;
assign mgmtsoc_uart_rxtx_w = mgmtsoc_uart_rx_fifo_source_payload_data;
assign mgmtsoc_uart_rx_fifo_source_ready = (mgmtsoc_uart_rx_clear | (1'd0 & mgmtsoc_uart_rxtx_we));
assign mgmtsoc_uart_rxempty_status = (~mgmtsoc_uart_rx_fifo_source_valid);
assign mgmtsoc_uart_rxfull_status = (~mgmtsoc_uart_rx_fifo_sink_ready);
assign mgmtsoc_uart_rx_trigger = mgmtsoc_uart_rx_fifo_source_valid;
assign mgmtsoc_uart_tx0 = mgmtsoc_uart_tx_status;
assign mgmtsoc_uart_tx1 = mgmtsoc_uart_tx_pending;
always @(*) begin
	mgmtsoc_uart_tx_clear <= 1'd0;
	if ((mgmtsoc_uart_pending_re & mgmtsoc_uart_pending_r[0])) begin
		mgmtsoc_uart_tx_clear <= 1'd1;
	end
end
assign mgmtsoc_uart_rx0 = mgmtsoc_uart_rx_status;
assign mgmtsoc_uart_rx1 = mgmtsoc_uart_rx_pending;
always @(*) begin
	mgmtsoc_uart_rx_clear <= 1'd0;
	if ((mgmtsoc_uart_pending_re & mgmtsoc_uart_pending_r[1])) begin
		mgmtsoc_uart_rx_clear <= 1'd1;
	end
end
assign mgmtsoc_uart_irq = ((mgmtsoc_uart_pending_status[0] & mgmtsoc_uart_enable_storage[0]) | (mgmtsoc_uart_pending_status[1] & mgmtsoc_uart_enable_storage[1]));
assign mgmtsoc_uart_tx_status = mgmtsoc_uart_tx_trigger;
assign mgmtsoc_uart_rx_status = mgmtsoc_uart_rx_trigger;
assign mgmtsoc_uart_tx_fifo_syncfifo_din = {mgmtsoc_uart_tx_fifo_fifo_in_last, mgmtsoc_uart_tx_fifo_fifo_in_first, mgmtsoc_uart_tx_fifo_fifo_in_payload_data};
assign {mgmtsoc_uart_tx_fifo_fifo_out_last, mgmtsoc_uart_tx_fifo_fifo_out_first, mgmtsoc_uart_tx_fifo_fifo_out_payload_data} = mgmtsoc_uart_tx_fifo_syncfifo_dout;
assign mgmtsoc_uart_tx_fifo_sink_ready = mgmtsoc_uart_tx_fifo_syncfifo_writable;
assign mgmtsoc_uart_tx_fifo_syncfifo_we = mgmtsoc_uart_tx_fifo_sink_valid;
assign mgmtsoc_uart_tx_fifo_fifo_in_first = mgmtsoc_uart_tx_fifo_sink_first;
assign mgmtsoc_uart_tx_fifo_fifo_in_last = mgmtsoc_uart_tx_fifo_sink_last;
assign mgmtsoc_uart_tx_fifo_fifo_in_payload_data = mgmtsoc_uart_tx_fifo_sink_payload_data;
assign mgmtsoc_uart_tx_fifo_source_valid = mgmtsoc_uart_tx_fifo_readable;
assign mgmtsoc_uart_tx_fifo_source_first = mgmtsoc_uart_tx_fifo_fifo_out_first;
assign mgmtsoc_uart_tx_fifo_source_last = mgmtsoc_uart_tx_fifo_fifo_out_last;
assign mgmtsoc_uart_tx_fifo_source_payload_data = mgmtsoc_uart_tx_fifo_fifo_out_payload_data;
assign mgmtsoc_uart_tx_fifo_re = mgmtsoc_uart_tx_fifo_source_ready;
assign mgmtsoc_uart_tx_fifo_syncfifo_re = (mgmtsoc_uart_tx_fifo_syncfifo_readable & ((~mgmtsoc_uart_tx_fifo_readable) | mgmtsoc_uart_tx_fifo_re));
assign mgmtsoc_uart_tx_fifo_level1 = (mgmtsoc_uart_tx_fifo_level0 + mgmtsoc_uart_tx_fifo_readable);
always @(*) begin
	mgmtsoc_uart_tx_fifo_wrport_adr <= 4'd0;
	if (mgmtsoc_uart_tx_fifo_replace) begin
		mgmtsoc_uart_tx_fifo_wrport_adr <= (mgmtsoc_uart_tx_fifo_produce - 1'd1);
	end else begin
		mgmtsoc_uart_tx_fifo_wrport_adr <= mgmtsoc_uart_tx_fifo_produce;
	end
end
assign mgmtsoc_uart_tx_fifo_wrport_dat_w = mgmtsoc_uart_tx_fifo_syncfifo_din;
assign mgmtsoc_uart_tx_fifo_wrport_we = (mgmtsoc_uart_tx_fifo_syncfifo_we & (mgmtsoc_uart_tx_fifo_syncfifo_writable | mgmtsoc_uart_tx_fifo_replace));
assign mgmtsoc_uart_tx_fifo_do_read = (mgmtsoc_uart_tx_fifo_syncfifo_readable & mgmtsoc_uart_tx_fifo_syncfifo_re);
assign mgmtsoc_uart_tx_fifo_rdport_adr = mgmtsoc_uart_tx_fifo_consume;
assign mgmtsoc_uart_tx_fifo_syncfifo_dout = mgmtsoc_uart_tx_fifo_rdport_dat_r;
assign mgmtsoc_uart_tx_fifo_rdport_re = mgmtsoc_uart_tx_fifo_do_read;
assign mgmtsoc_uart_tx_fifo_syncfifo_writable = (mgmtsoc_uart_tx_fifo_level0 != 5'd16);
assign mgmtsoc_uart_tx_fifo_syncfifo_readable = (mgmtsoc_uart_tx_fifo_level0 != 1'd0);
assign mgmtsoc_uart_rx_fifo_syncfifo_din = {mgmtsoc_uart_rx_fifo_fifo_in_last, mgmtsoc_uart_rx_fifo_fifo_in_first, mgmtsoc_uart_rx_fifo_fifo_in_payload_data};
assign {mgmtsoc_uart_rx_fifo_fifo_out_last, mgmtsoc_uart_rx_fifo_fifo_out_first, mgmtsoc_uart_rx_fifo_fifo_out_payload_data} = mgmtsoc_uart_rx_fifo_syncfifo_dout;
assign mgmtsoc_uart_rx_fifo_sink_ready = mgmtsoc_uart_rx_fifo_syncfifo_writable;
assign mgmtsoc_uart_rx_fifo_syncfifo_we = mgmtsoc_uart_rx_fifo_sink_valid;
assign mgmtsoc_uart_rx_fifo_fifo_in_first = mgmtsoc_uart_rx_fifo_sink_first;
assign mgmtsoc_uart_rx_fifo_fifo_in_last = mgmtsoc_uart_rx_fifo_sink_last;
assign mgmtsoc_uart_rx_fifo_fifo_in_payload_data = mgmtsoc_uart_rx_fifo_sink_payload_data;
assign mgmtsoc_uart_rx_fifo_source_valid = mgmtsoc_uart_rx_fifo_readable;
assign mgmtsoc_uart_rx_fifo_source_first = mgmtsoc_uart_rx_fifo_fifo_out_first;
assign mgmtsoc_uart_rx_fifo_source_last = mgmtsoc_uart_rx_fifo_fifo_out_last;
assign mgmtsoc_uart_rx_fifo_source_payload_data = mgmtsoc_uart_rx_fifo_fifo_out_payload_data;
assign mgmtsoc_uart_rx_fifo_re = mgmtsoc_uart_rx_fifo_source_ready;
assign mgmtsoc_uart_rx_fifo_syncfifo_re = (mgmtsoc_uart_rx_fifo_syncfifo_readable & ((~mgmtsoc_uart_rx_fifo_readable) | mgmtsoc_uart_rx_fifo_re));
assign mgmtsoc_uart_rx_fifo_level1 = (mgmtsoc_uart_rx_fifo_level0 + mgmtsoc_uart_rx_fifo_readable);
always @(*) begin
	mgmtsoc_uart_rx_fifo_wrport_adr <= 4'd0;
	if (mgmtsoc_uart_rx_fifo_replace) begin
		mgmtsoc_uart_rx_fifo_wrport_adr <= (mgmtsoc_uart_rx_fifo_produce - 1'd1);
	end else begin
		mgmtsoc_uart_rx_fifo_wrport_adr <= mgmtsoc_uart_rx_fifo_produce;
	end
end
assign mgmtsoc_uart_rx_fifo_wrport_dat_w = mgmtsoc_uart_rx_fifo_syncfifo_din;
assign mgmtsoc_uart_rx_fifo_wrport_we = (mgmtsoc_uart_rx_fifo_syncfifo_we & (mgmtsoc_uart_rx_fifo_syncfifo_writable | mgmtsoc_uart_rx_fifo_replace));
assign mgmtsoc_uart_rx_fifo_do_read = (mgmtsoc_uart_rx_fifo_syncfifo_readable & mgmtsoc_uart_rx_fifo_syncfifo_re);
assign mgmtsoc_uart_rx_fifo_rdport_adr = mgmtsoc_uart_rx_fifo_consume;
assign mgmtsoc_uart_rx_fifo_syncfifo_dout = mgmtsoc_uart_rx_fifo_rdport_dat_r;
assign mgmtsoc_uart_rx_fifo_rdport_re = mgmtsoc_uart_rx_fifo_do_read;
assign mgmtsoc_uart_rx_fifo_syncfifo_writable = (mgmtsoc_uart_rx_fifo_level0 != 5'd16);
assign mgmtsoc_uart_rx_fifo_syncfifo_readable = (mgmtsoc_uart_rx_fifo_level0 != 1'd0);
assign mgmtsoc_timer_zero_trigger = (mgmtsoc_timer_value == 1'd0);
assign mgmtsoc_timer_zero0 = mgmtsoc_timer_zero_status;
assign mgmtsoc_timer_zero1 = mgmtsoc_timer_zero_pending;
always @(*) begin
	mgmtsoc_timer_zero_clear <= 1'd0;
	if ((mgmtsoc_timer_pending_re & mgmtsoc_timer_pending_r)) begin
		mgmtsoc_timer_zero_clear <= 1'd1;
	end
end
assign mgmtsoc_timer_irq = (mgmtsoc_timer_pending_status & mgmtsoc_timer_enable_storage);
assign mgmtsoc_timer_zero_status = mgmtsoc_timer_zero_trigger;
assign spi_master_start0 = spi_master_start1;
assign spi_master_length0 = spi_master_length1;
assign spi_master_done1 = spi_master_done0;
assign spi_master_mosi_1 = spi_master_mosi_storage;
assign spi_master_miso_status = spi_master_miso_1;
assign spi_master_cs = spi_master_sel;
assign spi_master_cs_mode = spi_master_mode0;
assign spi_master_loopback = spi_master_mode1;
assign spi_master_clk_rise = (spi_master_clk_divider1 == (spi_master_clk_divider0[15:1] - 1'd1));
assign spi_master_clk_fall = (spi_master_clk_divider1 == (spi_master_clk_divider0 - 1'd1));
assign spi_master_clk_divider0 = spimaster_storage;
always @(*) begin
	spi_master_clk_enable <= 1'd0;
	spi_master_done0 <= 1'd0;
	spi_master_xfer_enable <= 1'd0;
	spi_master_mosi_latch <= 1'd0;
	spi_master_miso_latch <= 1'd0;
	spimaster_next_state <= 2'd0;
	spi_master_count_spimaster_next_value <= 3'd0;
	spi_master_count_spimaster_next_value_ce <= 1'd0;
	spi_master_irq <= 1'd0;
	spimaster_next_state <= spimaster_state;
	case (spimaster_state)
		1'd1: begin
			spi_master_count_spimaster_next_value <= 1'd0;
			spi_master_count_spimaster_next_value_ce <= 1'd1;
			if (spi_master_clk_fall) begin
				spi_master_xfer_enable <= 1'd1;
				spimaster_next_state <= 2'd2;
			end
		end
		2'd2: begin
			spi_master_clk_enable <= 1'd1;
			spi_master_xfer_enable <= 1'd1;
			if (spi_master_clk_fall) begin
				spi_master_count_spimaster_next_value <= (spi_master_count + 1'd1);
				spi_master_count_spimaster_next_value_ce <= 1'd1;
				if ((spi_master_count == (spi_master_length0 - 1'd1))) begin
					spimaster_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			spi_master_xfer_enable <= 1'd1;
			if (spi_master_clk_rise) begin
				spi_master_miso_latch <= 1'd1;
				spi_master_irq <= 1'd1;
				spimaster_next_state <= 1'd0;
			end
		end
		default: begin
			spi_master_done0 <= 1'd1;
			if (spi_master_start0) begin
				spi_master_done0 <= 1'd0;
				spi_master_mosi_latch <= 1'd1;
				spimaster_next_state <= 1'd1;
			end
		end
	endcase
end
assign datain0 = bus_dat_w[31:0];
always @(*) begin
	maskwren0 <= 4'd0;
	maskwren0[0] <= bus_sel[0];
	maskwren0[1] <= bus_sel[1];
	maskwren0[2] <= bus_sel[2];
	maskwren0[3] <= bus_sel[3];
end
assign datain1 = bus_dat_w[31:0];
always @(*) begin
	wren_b1 <= 1'd0;
	cs_b1 <= 1'd0;
	wren_b0 <= 1'd0;
	cs_b0 <= 1'd0;
	bus_dat_r <= 32'd0;
	if ((bus_adr[8] == 1'd0)) begin
		wren_b0 <= (~((bus_we & bus_stb) & bus_cyc));
		bus_dat_r[31:0] <= dataout0;
		cs_b0 <= 1'd1;
	end
	if ((bus_adr[8] == 1'd1)) begin
		wren_b1 <= (~((bus_we & bus_stb) & bus_cyc));
		bus_dat_r[31:0] <= dataout1;
		cs_b1 <= 1'd1;
	end
end
always @(*) begin
	maskwren1 <= 4'd0;
	maskwren1[0] <= bus_sel[0];
	maskwren1[1] <= bus_sel[1];
	maskwren1[2] <= bus_sel[2];
	maskwren1[3] <= bus_sel[3];
end
assign mgmtsoc_litespisdrphycore_div = mgmtsoc_litespisdrphycore_spi_clk_divisor;
assign mgmtsoc_litespisdrphycore_sample_cnt = 1'd1;
assign mgmtsoc_litespisdrphycore_update_cnt = 1'd1;
assign mgmtsoc_litespisdrphycore_wait = mgmtsoc_litespisdrphycore_cs;
assign mgmtsoc_litespisdrphycore_cs_enable = mgmtsoc_litespisdrphycore_done;
assign spiflash_cs_n = (~mgmtsoc_litespisdrphycore_cs_enable);
assign mgmtsoc_litespisdrphycore_dq_oe = mgmtsoc_litespisdrphycore_sink_payload_mask;
always @(*) begin
	mgmtsoc_litespisdrphycore_dq_o <= 1'd0;
	case (mgmtsoc_litespisdrphycore_sink_payload_width)
		1'd1: begin
			mgmtsoc_litespisdrphycore_dq_o <= mgmtsoc_litespisdrphycore_sr_out[31];
		end
		2'd2: begin
			mgmtsoc_litespisdrphycore_dq_o <= mgmtsoc_litespisdrphycore_sr_out[31:30];
		end
		3'd4: begin
			mgmtsoc_litespisdrphycore_dq_o <= mgmtsoc_litespisdrphycore_sr_out[31:28];
		end
		4'd8: begin
			mgmtsoc_litespisdrphycore_dq_o <= mgmtsoc_litespisdrphycore_sr_out[31:24];
		end
	endcase
end
assign mgmtsoc_litespisdrphycore_source_payload_data = mgmtsoc_litespisdrphycore_sr_in;
assign mgmtsoc_litespisdrphycore_spi_clk_divisor = mgmtsoc_litespisdrphycore_storage;
assign mgmtsoc_litespisdrphycore_posedge = ((mgmtsoc_litespisdrphycore_en & (~mgmtsoc_litespisdrphycore_clk)) & (mgmtsoc_litespisdrphycore_cnt == mgmtsoc_litespisdrphycore_div));
assign mgmtsoc_litespisdrphycore_negedge = ((mgmtsoc_litespisdrphycore_en & mgmtsoc_litespisdrphycore_clk) & (mgmtsoc_litespisdrphycore_cnt == mgmtsoc_litespisdrphycore_div));
assign mgmtsoc_litespisdrphycore_sample = (mgmtsoc_litespisdrphycore_cnt == mgmtsoc_litespisdrphycore_sample_cnt);
assign mgmtsoc_litespisdrphycore_update = (mgmtsoc_litespisdrphycore_cnt == mgmtsoc_litespisdrphycore_update_cnt);
assign mgmtsoc_litespisdrphycore_done = (mgmtsoc_litespisdrphycore_count == 1'd0);
always @(*) begin
	mgmtsoc_litespisdrphycore_source_valid <= 1'd0;
	litespiphy_next_state <= 2'd0;
	mgmtsoc_litespisdrphycore_source_last <= 1'd0;
	mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value <= 8'd0;
	mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd0;
	mgmtsoc_litespisdrphycore_sr_out_load <= 1'd0;
	mgmtsoc_litespisdrphycore_sr_out_shift <= 1'd0;
	mgmtsoc_litespisdrphycore_sink_ready <= 1'd0;
	mgmtsoc_litespisdrphycore_sr_in_shift <= 1'd0;
	mgmtsoc_litespisdrphycore_en <= 1'd0;
	litespiphy_next_state <= litespiphy_state;
	case (litespiphy_state)
		1'd1: begin
			mgmtsoc_litespisdrphycore_en <= 1'd1;
			if (mgmtsoc_litespisdrphycore_posedge_reg2) begin
				mgmtsoc_litespisdrphycore_sr_in_shift <= 1'd1;
			end
			if (mgmtsoc_litespisdrphycore_negedge) begin
				mgmtsoc_litespisdrphycore_sr_out_shift <= 1'd1;
			end
			if (mgmtsoc_litespisdrphycore_negedge) begin
				mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value <= (mgmtsoc_litespisdrphycore_sr_cnt - mgmtsoc_litespisdrphycore_sink_payload_width);
				mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd1;
				if ((mgmtsoc_litespisdrphycore_sr_cnt == 1'd0)) begin
					litespiphy_next_state <= 2'd2;
				end
			end
		end
		2'd2: begin
			if (((mgmtsoc_litespisdrphycore_spi_clk_divisor > 1'd0) | mgmtsoc_litespisdrphycore_posedge_reg2)) begin
				mgmtsoc_litespisdrphycore_sink_ready <= 1'd1;
				mgmtsoc_litespisdrphycore_sr_in_shift <= (mgmtsoc_litespisdrphycore_spi_clk_divisor == 1'd0);
				litespiphy_next_state <= 2'd3;
			end
		end
		2'd3: begin
			mgmtsoc_litespisdrphycore_source_valid <= 1'd1;
			mgmtsoc_litespisdrphycore_source_last <= 1'd1;
			if (mgmtsoc_litespisdrphycore_source_ready) begin
				litespiphy_next_state <= 1'd0;
			end
		end
		default: begin
			if ((mgmtsoc_litespisdrphycore_cs_enable & mgmtsoc_litespisdrphycore_sink_valid)) begin
				mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value <= (mgmtsoc_litespisdrphycore_sink_payload_len - mgmtsoc_litespisdrphycore_sink_payload_width);
				mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd1;
				mgmtsoc_litespisdrphycore_sr_out_load <= 1'd1;
				litespiphy_next_state <= 1'd1;
			end
		end
	endcase
end
assign mgmtsoc_litespisdrphycore_cs = mgmtsoc_crossbar_cs;
assign mgmtsoc_litespimmap_sink_valid = mgmtsoc_port_mmap_user_port_source_valid;
assign mgmtsoc_port_mmap_user_port_source_ready = mgmtsoc_litespimmap_sink_ready;
assign mgmtsoc_litespimmap_sink_first = mgmtsoc_port_mmap_user_port_source_first;
assign mgmtsoc_litespimmap_sink_last = mgmtsoc_port_mmap_user_port_source_last;
assign mgmtsoc_litespimmap_sink_payload_data = mgmtsoc_port_mmap_user_port_source_payload_data;
assign mgmtsoc_port_mmap_user_port_sink_valid = mgmtsoc_litespimmap_source_valid;
assign mgmtsoc_litespimmap_source_ready = mgmtsoc_port_mmap_user_port_sink_ready;
assign mgmtsoc_port_mmap_user_port_sink_first = mgmtsoc_litespimmap_source_first;
assign mgmtsoc_port_mmap_user_port_sink_last = mgmtsoc_litespimmap_source_last;
assign mgmtsoc_port_mmap_user_port_sink_payload_data = mgmtsoc_litespimmap_source_payload_data;
assign mgmtsoc_port_mmap_user_port_sink_payload_len = mgmtsoc_litespimmap_source_payload_len;
assign mgmtsoc_port_mmap_user_port_sink_payload_width = mgmtsoc_litespimmap_source_payload_width;
assign mgmtsoc_port_mmap_user_port_sink_payload_mask = mgmtsoc_litespimmap_source_payload_mask;
assign mgmtsoc_master_sink_sink_valid = mgmtsoc_port_master_user_port_source_valid;
assign mgmtsoc_port_master_user_port_source_ready = mgmtsoc_master_sink_sink_ready;
assign mgmtsoc_master_sink_sink_first = mgmtsoc_port_master_user_port_source_first;
assign mgmtsoc_master_sink_sink_last = mgmtsoc_port_master_user_port_source_last;
assign mgmtsoc_master_sink_sink_payload_data = mgmtsoc_port_master_user_port_source_payload_data;
assign mgmtsoc_port_master_user_port_sink_valid = mgmtsoc_master_source_source_valid;
assign mgmtsoc_master_source_source_ready = mgmtsoc_port_master_user_port_sink_ready;
assign mgmtsoc_port_master_user_port_sink_first = mgmtsoc_master_source_source_first;
assign mgmtsoc_port_master_user_port_sink_last = mgmtsoc_master_source_source_last;
assign mgmtsoc_port_master_user_port_sink_payload_data = mgmtsoc_master_source_source_payload_data;
assign mgmtsoc_port_master_user_port_sink_payload_len = mgmtsoc_master_source_source_payload_len;
assign mgmtsoc_port_master_user_port_sink_payload_width = mgmtsoc_master_source_source_payload_width;
assign mgmtsoc_port_master_user_port_sink_payload_mask = mgmtsoc_master_source_source_payload_mask;
assign mgmtsoc_litespisdrphycore_sink_valid = mgmtsoc_crossbar_source_valid;
assign mgmtsoc_crossbar_source_ready = mgmtsoc_litespisdrphycore_sink_ready;
assign mgmtsoc_litespisdrphycore_sink_first = mgmtsoc_crossbar_source_first;
assign mgmtsoc_litespisdrphycore_sink_last = mgmtsoc_crossbar_source_last;
assign mgmtsoc_litespisdrphycore_sink_payload_data = mgmtsoc_crossbar_source_payload_data;
assign mgmtsoc_litespisdrphycore_sink_payload_len = mgmtsoc_crossbar_source_payload_len;
assign mgmtsoc_litespisdrphycore_sink_payload_width = mgmtsoc_crossbar_source_payload_width;
assign mgmtsoc_litespisdrphycore_sink_payload_mask = mgmtsoc_crossbar_source_payload_mask;
assign mgmtsoc_crossbar_sink_valid = mgmtsoc_litespisdrphycore_source_valid;
assign mgmtsoc_litespisdrphycore_source_ready = mgmtsoc_crossbar_sink_ready;
assign mgmtsoc_crossbar_sink_first = mgmtsoc_litespisdrphycore_source_first;
assign mgmtsoc_crossbar_sink_last = mgmtsoc_litespisdrphycore_source_last;
assign mgmtsoc_crossbar_sink_payload_data = mgmtsoc_litespisdrphycore_source_payload_data;
assign mgmtsoc_port_mmap_internal_port_sink_valid = mgmtsoc_port_mmap_user_port_sink_valid;
assign mgmtsoc_port_mmap_user_port_sink_ready = mgmtsoc_port_mmap_internal_port_sink_ready;
assign mgmtsoc_port_mmap_internal_port_sink_first = mgmtsoc_port_mmap_user_port_sink_first;
assign mgmtsoc_port_mmap_internal_port_sink_last = mgmtsoc_port_mmap_user_port_sink_last;
assign mgmtsoc_port_mmap_internal_port_sink_payload_data = mgmtsoc_port_mmap_user_port_sink_payload_data;
assign mgmtsoc_port_mmap_internal_port_sink_payload_len = mgmtsoc_port_mmap_user_port_sink_payload_len;
assign mgmtsoc_port_mmap_internal_port_sink_payload_width = mgmtsoc_port_mmap_user_port_sink_payload_width;
assign mgmtsoc_port_mmap_internal_port_sink_payload_mask = mgmtsoc_port_mmap_user_port_sink_payload_mask;
assign mgmtsoc_port_mmap_user_port_source_valid = mgmtsoc_port_mmap_internal_port_source_valid;
assign mgmtsoc_port_mmap_internal_port_source_ready = mgmtsoc_port_mmap_user_port_source_ready;
assign mgmtsoc_port_mmap_user_port_source_first = mgmtsoc_port_mmap_internal_port_source_first;
assign mgmtsoc_port_mmap_user_port_source_last = mgmtsoc_port_mmap_internal_port_source_last;
assign mgmtsoc_port_mmap_user_port_source_payload_data = mgmtsoc_port_mmap_internal_port_source_payload_data;
assign mgmtsoc_port_mmap_request = mgmtsoc_litespimmap_cs;
assign mgmtsoc_port_master_internal_port_sink_valid = mgmtsoc_port_master_user_port_sink_valid;
assign mgmtsoc_port_master_user_port_sink_ready = mgmtsoc_port_master_internal_port_sink_ready;
assign mgmtsoc_port_master_internal_port_sink_first = mgmtsoc_port_master_user_port_sink_first;
assign mgmtsoc_port_master_internal_port_sink_last = mgmtsoc_port_master_user_port_sink_last;
assign mgmtsoc_port_master_internal_port_sink_payload_data = mgmtsoc_port_master_user_port_sink_payload_data;
assign mgmtsoc_port_master_internal_port_sink_payload_len = mgmtsoc_port_master_user_port_sink_payload_len;
assign mgmtsoc_port_master_internal_port_sink_payload_width = mgmtsoc_port_master_user_port_sink_payload_width;
assign mgmtsoc_port_master_internal_port_sink_payload_mask = mgmtsoc_port_master_user_port_sink_payload_mask;
assign mgmtsoc_port_master_user_port_source_valid = mgmtsoc_port_master_internal_port_source_valid;
assign mgmtsoc_port_master_internal_port_source_ready = mgmtsoc_port_master_user_port_source_ready;
assign mgmtsoc_port_master_user_port_source_first = mgmtsoc_port_master_internal_port_source_first;
assign mgmtsoc_port_master_user_port_source_last = mgmtsoc_port_master_internal_port_source_last;
assign mgmtsoc_port_master_user_port_source_payload_data = mgmtsoc_port_master_internal_port_source_payload_data;
assign mgmtsoc_port_master_request = mgmtsoc_master_cs;
assign litespi_tx_mux_endpoint0_sink_valid = mgmtsoc_port_mmap_internal_port_sink_valid;
assign mgmtsoc_port_mmap_internal_port_sink_ready = litespi_tx_mux_endpoint0_sink_ready;
assign litespi_tx_mux_endpoint0_sink_first = mgmtsoc_port_mmap_internal_port_sink_first;
assign litespi_tx_mux_endpoint0_sink_last = mgmtsoc_port_mmap_internal_port_sink_last;
assign litespi_tx_mux_endpoint0_sink_payload_data = mgmtsoc_port_mmap_internal_port_sink_payload_data;
assign litespi_tx_mux_endpoint0_sink_payload_len = mgmtsoc_port_mmap_internal_port_sink_payload_len;
assign litespi_tx_mux_endpoint0_sink_payload_width = mgmtsoc_port_mmap_internal_port_sink_payload_width;
assign litespi_tx_mux_endpoint0_sink_payload_mask = mgmtsoc_port_mmap_internal_port_sink_payload_mask;
assign mgmtsoc_port_mmap_internal_port_source_valid = litespi_rx_demux_endpoint0_source_valid;
assign litespi_rx_demux_endpoint0_source_ready = mgmtsoc_port_mmap_internal_port_source_ready;
assign mgmtsoc_port_mmap_internal_port_source_first = litespi_rx_demux_endpoint0_source_first;
assign mgmtsoc_port_mmap_internal_port_source_last = litespi_rx_demux_endpoint0_source_last;
assign mgmtsoc_port_mmap_internal_port_source_payload_data = litespi_rx_demux_endpoint0_source_payload_data;
assign litespi_tx_mux_endpoint1_sink_valid = mgmtsoc_port_master_internal_port_sink_valid;
assign mgmtsoc_port_master_internal_port_sink_ready = litespi_tx_mux_endpoint1_sink_ready;
assign litespi_tx_mux_endpoint1_sink_first = mgmtsoc_port_master_internal_port_sink_first;
assign litespi_tx_mux_endpoint1_sink_last = mgmtsoc_port_master_internal_port_sink_last;
assign litespi_tx_mux_endpoint1_sink_payload_data = mgmtsoc_port_master_internal_port_sink_payload_data;
assign litespi_tx_mux_endpoint1_sink_payload_len = mgmtsoc_port_master_internal_port_sink_payload_len;
assign litespi_tx_mux_endpoint1_sink_payload_width = mgmtsoc_port_master_internal_port_sink_payload_width;
assign litespi_tx_mux_endpoint1_sink_payload_mask = mgmtsoc_port_master_internal_port_sink_payload_mask;
assign mgmtsoc_port_master_internal_port_source_valid = litespi_rx_demux_endpoint1_source_valid;
assign litespi_rx_demux_endpoint1_source_ready = mgmtsoc_port_master_internal_port_source_ready;
assign mgmtsoc_port_master_internal_port_source_first = litespi_rx_demux_endpoint1_source_first;
assign mgmtsoc_port_master_internal_port_source_last = litespi_rx_demux_endpoint1_source_last;
assign mgmtsoc_port_master_internal_port_source_payload_data = litespi_rx_demux_endpoint1_source_payload_data;
assign litespi_request = {mgmtsoc_port_master_request, mgmtsoc_port_mmap_request};
assign mgmtsoc_crossbar_source_valid = litespi_tx_mux_source_valid;
assign litespi_tx_mux_source_ready = mgmtsoc_crossbar_source_ready;
assign mgmtsoc_crossbar_source_first = litespi_tx_mux_source_first;
assign mgmtsoc_crossbar_source_last = litespi_tx_mux_source_last;
assign mgmtsoc_crossbar_source_payload_data = litespi_tx_mux_source_payload_data;
assign mgmtsoc_crossbar_source_payload_len = litespi_tx_mux_source_payload_len;
assign mgmtsoc_crossbar_source_payload_width = litespi_tx_mux_source_payload_width;
assign mgmtsoc_crossbar_source_payload_mask = litespi_tx_mux_source_payload_mask;
assign litespi_tx_mux_sel = litespi_grant;
assign litespi_rx_demux_sink_valid = mgmtsoc_crossbar_sink_valid;
assign mgmtsoc_crossbar_sink_ready = litespi_rx_demux_sink_ready;
assign litespi_rx_demux_sink_first = mgmtsoc_crossbar_sink_first;
assign litespi_rx_demux_sink_last = mgmtsoc_crossbar_sink_last;
assign litespi_rx_demux_sink_payload_data = mgmtsoc_crossbar_sink_payload_data;
assign litespi_rx_demux_sel = litespi_grant;
always @(*) begin
	mgmtsoc_crossbar_cs <= 1'd0;
	case (litespi_grant)
		1'd0: begin
			mgmtsoc_crossbar_cs <= mgmtsoc_litespimmap_cs;
		end
		1'd1: begin
			mgmtsoc_crossbar_cs <= mgmtsoc_master_cs;
		end
	endcase
end
always @(*) begin
	litespi_tx_mux_source_payload_width <= 4'd0;
	litespi_tx_mux_source_payload_mask <= 8'd0;
	litespi_tx_mux_endpoint0_sink_ready <= 1'd0;
	litespi_tx_mux_source_valid <= 1'd0;
	litespi_tx_mux_endpoint1_sink_ready <= 1'd0;
	litespi_tx_mux_source_first <= 1'd0;
	litespi_tx_mux_source_last <= 1'd0;
	litespi_tx_mux_source_payload_data <= 32'd0;
	litespi_tx_mux_source_payload_len <= 6'd0;
	case (litespi_tx_mux_sel)
		1'd0: begin
			litespi_tx_mux_source_valid <= litespi_tx_mux_endpoint0_sink_valid;
			litespi_tx_mux_endpoint0_sink_ready <= litespi_tx_mux_source_ready;
			litespi_tx_mux_source_first <= litespi_tx_mux_endpoint0_sink_first;
			litespi_tx_mux_source_last <= litespi_tx_mux_endpoint0_sink_last;
			litespi_tx_mux_source_payload_data <= litespi_tx_mux_endpoint0_sink_payload_data;
			litespi_tx_mux_source_payload_len <= litespi_tx_mux_endpoint0_sink_payload_len;
			litespi_tx_mux_source_payload_width <= litespi_tx_mux_endpoint0_sink_payload_width;
			litespi_tx_mux_source_payload_mask <= litespi_tx_mux_endpoint0_sink_payload_mask;
		end
		1'd1: begin
			litespi_tx_mux_source_valid <= litespi_tx_mux_endpoint1_sink_valid;
			litespi_tx_mux_endpoint1_sink_ready <= litespi_tx_mux_source_ready;
			litespi_tx_mux_source_first <= litespi_tx_mux_endpoint1_sink_first;
			litespi_tx_mux_source_last <= litespi_tx_mux_endpoint1_sink_last;
			litespi_tx_mux_source_payload_data <= litespi_tx_mux_endpoint1_sink_payload_data;
			litespi_tx_mux_source_payload_len <= litespi_tx_mux_endpoint1_sink_payload_len;
			litespi_tx_mux_source_payload_width <= litespi_tx_mux_endpoint1_sink_payload_width;
			litespi_tx_mux_source_payload_mask <= litespi_tx_mux_endpoint1_sink_payload_mask;
		end
	endcase
end
always @(*) begin
	litespi_rx_demux_endpoint1_source_first <= 1'd0;
	litespi_rx_demux_endpoint1_source_last <= 1'd0;
	litespi_rx_demux_endpoint1_source_payload_data <= 32'd0;
	litespi_rx_demux_sink_ready <= 1'd0;
	litespi_rx_demux_endpoint0_source_valid <= 1'd0;
	litespi_rx_demux_endpoint0_source_first <= 1'd0;
	litespi_rx_demux_endpoint0_source_last <= 1'd0;
	litespi_rx_demux_endpoint0_source_payload_data <= 32'd0;
	litespi_rx_demux_endpoint1_source_valid <= 1'd0;
	case (litespi_rx_demux_sel)
		1'd0: begin
			litespi_rx_demux_endpoint0_source_valid <= litespi_rx_demux_sink_valid;
			litespi_rx_demux_sink_ready <= litespi_rx_demux_endpoint0_source_ready;
			litespi_rx_demux_endpoint0_source_first <= litespi_rx_demux_sink_first;
			litespi_rx_demux_endpoint0_source_last <= litespi_rx_demux_sink_last;
			litespi_rx_demux_endpoint0_source_payload_data <= litespi_rx_demux_sink_payload_data;
		end
		1'd1: begin
			litespi_rx_demux_endpoint1_source_valid <= litespi_rx_demux_sink_valid;
			litespi_rx_demux_sink_ready <= litespi_rx_demux_endpoint1_source_ready;
			litespi_rx_demux_endpoint1_source_first <= litespi_rx_demux_sink_first;
			litespi_rx_demux_endpoint1_source_last <= litespi_rx_demux_sink_last;
			litespi_rx_demux_endpoint1_source_payload_data <= litespi_rx_demux_sink_payload_data;
		end
	endcase
end
assign mgmtsoc_litespimmap_spi_dummy_bits = mgmtsoc_litespimmap_storage;
assign mgmtsoc_litespimmap_done = (mgmtsoc_litespimmap_count == 1'd0);
always @(*) begin
	mgmtsoc_litespimmap_source_payload_mask <= 8'd0;
	mgmtsoc_litespimmap_sink_ready <= 1'd0;
	litespi_next_state <= 4'd0;
	mgmtsoc_litespimmap_bus_dat_r <= 32'd0;
	mgmtsoc_litespimmap_burst_cs_litespi_next_value0 <= 1'd0;
	mgmtsoc_litespimmap_burst_cs_litespi_next_value_ce0 <= 1'd0;
	mgmtsoc_litespimmap_bus_ack <= 1'd0;
	mgmtsoc_litespimmap_burst_adr_litespi_next_value1 <= 30'd0;
	mgmtsoc_litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd0;
	mgmtsoc_litespimmap_cs <= 1'd0;
	mgmtsoc_litespimmap_wait <= 1'd0;
	mgmtsoc_litespimmap_source_valid <= 1'd0;
	mgmtsoc_litespimmap_source_last <= 1'd0;
	mgmtsoc_litespimmap_source_payload_data <= 32'd0;
	mgmtsoc_litespimmap_source_payload_len <= 6'd0;
	mgmtsoc_litespimmap_source_payload_width <= 4'd0;
	litespi_next_state <= litespi_state;
	case (litespi_state)
		1'd1: begin
			mgmtsoc_litespimmap_cs <= 1'd1;
			mgmtsoc_litespimmap_source_valid <= 1'd1;
			mgmtsoc_litespimmap_source_payload_data <= 2'd3;
			mgmtsoc_litespimmap_source_payload_len <= 4'd8;
			mgmtsoc_litespimmap_source_payload_width <= 1'd1;
			mgmtsoc_litespimmap_source_payload_mask <= 1'd1;
			mgmtsoc_litespimmap_burst_adr_litespi_next_value1 <= mgmtsoc_litespimmap_bus_adr;
			mgmtsoc_litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd1;
			if (mgmtsoc_litespimmap_source_ready) begin
				litespi_next_state <= 2'd2;
			end
		end
		2'd2: begin
			mgmtsoc_litespimmap_cs <= 1'd1;
			mgmtsoc_litespimmap_sink_ready <= 1'd1;
			if (mgmtsoc_litespimmap_sink_valid) begin
				litespi_next_state <= 2'd3;
			end
		end
		2'd3: begin
			mgmtsoc_litespimmap_cs <= 1'd1;
			mgmtsoc_litespimmap_source_valid <= 1'd1;
			mgmtsoc_litespimmap_source_payload_width <= 1'd1;
			mgmtsoc_litespimmap_source_payload_mask <= 1'd1;
			mgmtsoc_litespimmap_source_payload_data <= {mgmtsoc_litespimmap_bus_adr, mgmtsoc_litespimmap};
			mgmtsoc_litespimmap_source_payload_len <= 5'd24;
			mgmtsoc_litespimmap_burst_cs_litespi_next_value0 <= 1'd1;
			mgmtsoc_litespimmap_burst_cs_litespi_next_value_ce0 <= 1'd1;
			mgmtsoc_litespimmap_burst_adr_litespi_next_value1 <= mgmtsoc_litespimmap_bus_adr;
			mgmtsoc_litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd1;
			if (mgmtsoc_litespimmap_source_ready) begin
				litespi_next_state <= 3'd4;
			end
		end
		3'd4: begin
			mgmtsoc_litespimmap_cs <= 1'd1;
			mgmtsoc_litespimmap_sink_ready <= 1'd1;
			if (mgmtsoc_litespimmap_sink_valid) begin
				if ((mgmtsoc_litespimmap_spi_dummy_bits == 1'd0)) begin
					litespi_next_state <= 3'd7;
				end else begin
					litespi_next_state <= 3'd5;
				end
			end
		end
		3'd5: begin
			mgmtsoc_litespimmap_cs <= 1'd1;
			mgmtsoc_litespimmap_source_valid <= 1'd1;
			mgmtsoc_litespimmap_source_payload_width <= 1'd1;
			mgmtsoc_litespimmap_source_payload_mask <= 1'd1;
			mgmtsoc_litespimmap_source_payload_data <= mgmtsoc_litespimmap_dummy;
			mgmtsoc_litespimmap_source_payload_len <= mgmtsoc_litespimmap_spi_dummy_bits;
			mgmtsoc_litespimmap_burst_cs_litespi_next_value0 <= 1'd1;
			mgmtsoc_litespimmap_burst_cs_litespi_next_value_ce0 <= 1'd1;
			mgmtsoc_litespimmap_burst_adr_litespi_next_value1 <= mgmtsoc_litespimmap_bus_adr;
			mgmtsoc_litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd1;
			if (mgmtsoc_litespimmap_source_ready) begin
				litespi_next_state <= 3'd6;
			end
		end
		3'd6: begin
			mgmtsoc_litespimmap_cs <= 1'd1;
			mgmtsoc_litespimmap_sink_ready <= 1'd1;
			if (mgmtsoc_litespimmap_sink_valid) begin
				litespi_next_state <= 3'd7;
			end
		end
		3'd7: begin
			mgmtsoc_litespimmap_cs <= 1'd1;
			mgmtsoc_litespimmap_source_valid <= 1'd1;
			mgmtsoc_litespimmap_source_last <= 1'd1;
			mgmtsoc_litespimmap_source_payload_width <= 1'd1;
			mgmtsoc_litespimmap_source_payload_len <= 6'd32;
			mgmtsoc_litespimmap_source_payload_mask <= 1'd0;
			if (mgmtsoc_litespimmap_source_ready) begin
				litespi_next_state <= 4'd8;
			end
		end
		4'd8: begin
			mgmtsoc_litespimmap_cs <= 1'd1;
			mgmtsoc_litespimmap_sink_ready <= 1'd1;
			mgmtsoc_litespimmap_bus_dat_r <= {mgmtsoc_litespimmap_sink_payload_data[7:0], mgmtsoc_litespimmap_sink_payload_data[15:8], mgmtsoc_litespimmap_sink_payload_data[23:16], mgmtsoc_litespimmap_sink_payload_data[31:24]};
			if (mgmtsoc_litespimmap_sink_valid) begin
				mgmtsoc_litespimmap_bus_ack <= 1'd1;
				mgmtsoc_litespimmap_burst_adr_litespi_next_value1 <= (mgmtsoc_litespimmap_burst_adr + 1'd1);
				mgmtsoc_litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd1;
				litespi_next_state <= 1'd0;
			end
		end
		default: begin
			mgmtsoc_litespimmap_wait <= 1'd1;
			mgmtsoc_litespimmap_burst_cs_litespi_next_value0 <= (mgmtsoc_litespimmap_burst_cs & (~mgmtsoc_litespimmap_done));
			mgmtsoc_litespimmap_burst_cs_litespi_next_value_ce0 <= 1'd1;
			mgmtsoc_litespimmap_cs <= mgmtsoc_litespimmap_burst_cs;
			if (((mgmtsoc_litespimmap_bus_cyc & mgmtsoc_litespimmap_bus_stb) & (~mgmtsoc_litespimmap_bus_we))) begin
				if ((mgmtsoc_litespimmap_burst_cs & (mgmtsoc_litespimmap_bus_adr == mgmtsoc_litespimmap_burst_adr))) begin
					litespi_next_state <= 3'd7;
				end else begin
					mgmtsoc_litespimmap_cs <= 1'd0;
					litespi_next_state <= 1'd1;
				end
			end
		end
	endcase
end
assign mgmtsoc_master_rx_fifo_sink_valid = mgmtsoc_master_sink_sink_valid;
assign mgmtsoc_master_sink_sink_ready = mgmtsoc_master_rx_fifo_sink_ready;
assign mgmtsoc_master_rx_fifo_sink_first = mgmtsoc_master_sink_sink_first;
assign mgmtsoc_master_rx_fifo_sink_last = mgmtsoc_master_sink_sink_last;
assign mgmtsoc_master_rx_fifo_sink_payload_data = mgmtsoc_master_sink_sink_payload_data;
assign mgmtsoc_master_source_source_valid = mgmtsoc_master_tx_fifo_source_valid;
assign mgmtsoc_master_tx_fifo_source_ready = mgmtsoc_master_source_source_ready;
assign mgmtsoc_master_source_source_first = mgmtsoc_master_tx_fifo_source_first;
assign mgmtsoc_master_source_source_last = mgmtsoc_master_tx_fifo_source_last;
assign mgmtsoc_master_source_source_payload_data = mgmtsoc_master_tx_fifo_source_payload_data;
assign mgmtsoc_master_source_source_payload_len = mgmtsoc_master_tx_fifo_source_payload_len;
assign mgmtsoc_master_source_source_payload_width = mgmtsoc_master_tx_fifo_source_payload_width;
assign mgmtsoc_master_source_source_payload_mask = mgmtsoc_master_tx_fifo_source_payload_mask;
assign mgmtsoc_master_cs = mgmtsoc_master_cs_storage;
assign mgmtsoc_master_tx_fifo_sink_valid = mgmtsoc_master_rxtx_re;
assign mgmtsoc_master_tx_ready = mgmtsoc_master_tx_fifo_sink_ready;
assign mgmtsoc_master_tx_fifo_sink_payload_data = mgmtsoc_master_rxtx_r;
assign mgmtsoc_master_tx_fifo_sink_payload_len = mgmtsoc_master_len;
assign mgmtsoc_master_tx_fifo_sink_payload_width = mgmtsoc_master_width;
assign mgmtsoc_master_tx_fifo_sink_payload_mask = mgmtsoc_master_mask;
assign mgmtsoc_master_tx_fifo_sink_last = 1'd1;
assign mgmtsoc_master_rx_fifo_source_ready = mgmtsoc_master_rxtx_we;
assign mgmtsoc_master_rx_ready = mgmtsoc_master_rx_fifo_source_valid;
assign mgmtsoc_master_rxtx_w = mgmtsoc_master_rx_fifo_source_payload_data;
assign mgmtsoc_master_tx_fifo_sink_ready = ((~mgmtsoc_master_tx_fifo_source_valid) | mgmtsoc_master_tx_fifo_source_ready);
assign mgmtsoc_master_rx_fifo_sink_ready = ((~mgmtsoc_master_rx_fifo_source_valid) | mgmtsoc_master_rx_fifo_source_ready);
assign uart_bridge_wait = (~uart_bridge_is_ongoing);
assign uart_bridge_reset = uart_bridge_done;
assign uart_bridge_wishbone_adr = uart_bridge_address;
assign uart_bridge_wishbone_dat_w = uart_bridge_data;
assign uart_bridge_wishbone_sel = 4'd15;
always @(*) begin
	uart_bridge_tx_sink_payload_data <= 8'd0;
	case (uart_bridge_bytes_count)
		1'd0: begin
			uart_bridge_tx_sink_payload_data <= uart_bridge_data[31:24];
		end
		1'd1: begin
			uart_bridge_tx_sink_payload_data <= uart_bridge_data[31:16];
		end
		2'd2: begin
			uart_bridge_tx_sink_payload_data <= uart_bridge_data[31:8];
		end
		2'd3: begin
			uart_bridge_tx_sink_payload_data <= uart_bridge_data[31:0];
		end
	endcase
end
assign uart_bridge_tx_sink_last = ((uart_bridge_bytes_count == 2'd3) & (uart_bridge_words_count == (uart_bridge_length - 1'd1)));
always @(*) begin
	uart_bridge_tx_sink_ready <= 1'd0;
	uartwishbonebridge_rs232phytx_next_state <= 1'd0;
	uart_bridge_tx_count_uartwishbonebridge_rs232phytx_next_value0 <= 4'd0;
	uart_bridge_tx_count_uartwishbonebridge_rs232phytx_next_value_ce0 <= 1'd0;
	platform_obj_serial_dbg_tx_uartwishbonebridge_rs232phytx_next_value1 <= 1'd0;
	platform_obj_serial_dbg_tx_uartwishbonebridge_rs232phytx_next_value_ce1 <= 1'd0;
	uart_bridge_tx_enable <= 1'd0;
	uart_bridge_tx_data_uartwishbonebridge_rs232phytx_next_value2 <= 8'd0;
	uart_bridge_tx_data_uartwishbonebridge_rs232phytx_next_value_ce2 <= 1'd0;
	uartwishbonebridge_rs232phytx_next_state <= uartwishbonebridge_rs232phytx_state;
	case (uartwishbonebridge_rs232phytx_state)
		1'd1: begin
			uart_bridge_tx_enable <= 1'd1;
			if (uart_bridge_tx_tick) begin
				platform_obj_serial_dbg_tx_uartwishbonebridge_rs232phytx_next_value1 <= uart_bridge_tx_data;
				platform_obj_serial_dbg_tx_uartwishbonebridge_rs232phytx_next_value_ce1 <= 1'd1;
				uart_bridge_tx_count_uartwishbonebridge_rs232phytx_next_value0 <= (uart_bridge_tx_count + 1'd1);
				uart_bridge_tx_count_uartwishbonebridge_rs232phytx_next_value_ce0 <= 1'd1;
				uart_bridge_tx_data_uartwishbonebridge_rs232phytx_next_value2 <= {1'd1, uart_bridge_tx_data[7:1]};
				uart_bridge_tx_data_uartwishbonebridge_rs232phytx_next_value_ce2 <= 1'd1;
				if ((uart_bridge_tx_count == 4'd9)) begin
					uart_bridge_tx_sink_ready <= 1'd1;
					uartwishbonebridge_rs232phytx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			uart_bridge_tx_count_uartwishbonebridge_rs232phytx_next_value0 <= 1'd0;
			uart_bridge_tx_count_uartwishbonebridge_rs232phytx_next_value_ce0 <= 1'd1;
			platform_obj_serial_dbg_tx_uartwishbonebridge_rs232phytx_next_value1 <= 1'd1;
			platform_obj_serial_dbg_tx_uartwishbonebridge_rs232phytx_next_value_ce1 <= 1'd1;
			if (uart_bridge_tx_sink_valid) begin
				platform_obj_serial_dbg_tx_uartwishbonebridge_rs232phytx_next_value1 <= 1'd0;
				platform_obj_serial_dbg_tx_uartwishbonebridge_rs232phytx_next_value_ce1 <= 1'd1;
				uart_bridge_tx_data_uartwishbonebridge_rs232phytx_next_value2 <= uart_bridge_tx_sink_payload_data;
				uart_bridge_tx_data_uartwishbonebridge_rs232phytx_next_value_ce2 <= 1'd1;
				uartwishbonebridge_rs232phytx_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	uart_bridge_rx_source_valid <= 1'd0;
	uartwishbonebridge_rs232phyrx_next_state <= 1'd0;
	uart_bridge_rx_count_uartwishbonebridge_rs232phyrx_next_value0 <= 4'd0;
	uart_bridge_rx_count_uartwishbonebridge_rs232phyrx_next_value_ce0 <= 1'd0;
	uart_bridge_rx_source_payload_data <= 8'd0;
	uart_bridge_rx_enable <= 1'd0;
	uart_bridge_rx_data_uartwishbonebridge_rs232phyrx_next_value1 <= 8'd0;
	uart_bridge_rx_data_uartwishbonebridge_rs232phyrx_next_value_ce1 <= 1'd0;
	uartwishbonebridge_rs232phyrx_next_state <= uartwishbonebridge_rs232phyrx_state;
	case (uartwishbonebridge_rs232phyrx_state)
		1'd1: begin
			uart_bridge_rx_enable <= 1'd1;
			if (uart_bridge_rx_tick) begin
				uart_bridge_rx_count_uartwishbonebridge_rs232phyrx_next_value0 <= (uart_bridge_rx_count + 1'd1);
				uart_bridge_rx_count_uartwishbonebridge_rs232phyrx_next_value_ce0 <= 1'd1;
				uart_bridge_rx_data_uartwishbonebridge_rs232phyrx_next_value1 <= {uart_bridge_rx_rx, uart_bridge_rx_data[7:1]};
				uart_bridge_rx_data_uartwishbonebridge_rs232phyrx_next_value_ce1 <= 1'd1;
				if ((uart_bridge_rx_count == 4'd9)) begin
					uart_bridge_rx_source_valid <= (uart_bridge_rx_rx == 1'd1);
					uart_bridge_rx_source_payload_data <= uart_bridge_rx_data;
					uartwishbonebridge_rs232phyrx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			uart_bridge_rx_count_uartwishbonebridge_rs232phyrx_next_value0 <= 1'd0;
			uart_bridge_rx_count_uartwishbonebridge_rs232phyrx_next_value_ce0 <= 1'd1;
			if (((uart_bridge_rx_rx == 1'd0) & (uart_bridge_rx_rx_d == 1'd1))) begin
				uartwishbonebridge_rs232phyrx_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	uart_bridge_wishbone_we <= 1'd0;
	uartwishbonebridge_next_state <= 3'd0;
	uart_bridge_bytes_count_uartwishbonebridge_next_value0 <= 2'd0;
	uart_bridge_bytes_count_uartwishbonebridge_next_value_ce0 <= 1'd0;
	uart_bridge_rx_source_ready <= 1'd0;
	uart_bridge_words_count_uartwishbonebridge_next_value1 <= 8'd0;
	uart_bridge_words_count_uartwishbonebridge_next_value_ce1 <= 1'd0;
	uart_bridge_cmd_uartwishbonebridge_next_value2 <= 8'd0;
	uart_bridge_cmd_uartwishbonebridge_next_value_ce2 <= 1'd0;
	uart_bridge_length_uartwishbonebridge_next_value3 <= 8'd0;
	uart_bridge_length_uartwishbonebridge_next_value_ce3 <= 1'd0;
	uart_bridge_address_uartwishbonebridge_next_value4 <= 32'd0;
	uart_bridge_address_uartwishbonebridge_next_value_ce4 <= 1'd0;
	uart_bridge_tx_sink_valid <= 1'd0;
	uart_bridge_incr_uartwishbonebridge_next_value5 <= 1'd0;
	uart_bridge_is_ongoing <= 1'd0;
	uart_bridge_incr_uartwishbonebridge_next_value_ce5 <= 1'd0;
	uart_bridge_data_uartwishbonebridge_next_value6 <= 32'd0;
	uart_bridge_data_uartwishbonebridge_next_value_ce6 <= 1'd0;
	uart_bridge_wishbone_cyc <= 1'd0;
	uart_bridge_wishbone_stb <= 1'd0;
	uartwishbonebridge_next_state <= uartwishbonebridge_state;
	case (uartwishbonebridge_state)
		1'd1: begin
			uart_bridge_rx_source_ready <= 1'd1;
			if (uart_bridge_rx_source_valid) begin
				uart_bridge_length_uartwishbonebridge_next_value3 <= uart_bridge_rx_source_payload_data;
				uart_bridge_length_uartwishbonebridge_next_value_ce3 <= 1'd1;
				uartwishbonebridge_next_state <= 2'd2;
			end
		end
		2'd2: begin
			uart_bridge_rx_source_ready <= 1'd1;
			if (uart_bridge_rx_source_valid) begin
				uart_bridge_address_uartwishbonebridge_next_value4 <= {uart_bridge_address, uart_bridge_rx_source_payload_data};
				uart_bridge_address_uartwishbonebridge_next_value_ce4 <= 1'd1;
				uart_bridge_bytes_count_uartwishbonebridge_next_value0 <= (uart_bridge_bytes_count + 1'd1);
				uart_bridge_bytes_count_uartwishbonebridge_next_value_ce0 <= 1'd1;
				if ((uart_bridge_bytes_count == 2'd3)) begin
					if (((uart_bridge_cmd == 1'd1) | (uart_bridge_cmd == 2'd3))) begin
						uart_bridge_incr_uartwishbonebridge_next_value5 <= (uart_bridge_cmd == 1'd1);
						uart_bridge_incr_uartwishbonebridge_next_value_ce5 <= 1'd1;
						uartwishbonebridge_next_state <= 2'd3;
					end else begin
						if (((uart_bridge_cmd == 2'd2) | (uart_bridge_cmd == 3'd4))) begin
							uart_bridge_incr_uartwishbonebridge_next_value5 <= (uart_bridge_cmd == 2'd2);
							uart_bridge_incr_uartwishbonebridge_next_value_ce5 <= 1'd1;
							uartwishbonebridge_next_state <= 3'd5;
						end else begin
							uartwishbonebridge_next_state <= 1'd0;
						end
					end
				end
			end
		end
		2'd3: begin
			uart_bridge_rx_source_ready <= 1'd1;
			if (uart_bridge_rx_source_valid) begin
				uart_bridge_data_uartwishbonebridge_next_value6 <= {uart_bridge_data, uart_bridge_rx_source_payload_data};
				uart_bridge_data_uartwishbonebridge_next_value_ce6 <= 1'd1;
				uart_bridge_bytes_count_uartwishbonebridge_next_value0 <= (uart_bridge_bytes_count + 1'd1);
				uart_bridge_bytes_count_uartwishbonebridge_next_value_ce0 <= 1'd1;
				if ((uart_bridge_bytes_count == 2'd3)) begin
					uartwishbonebridge_next_state <= 3'd4;
				end
			end
		end
		3'd4: begin
			uart_bridge_rx_source_ready <= 1'd0;
			uart_bridge_wishbone_stb <= 1'd1;
			uart_bridge_wishbone_we <= 1'd1;
			uart_bridge_wishbone_cyc <= 1'd1;
			if (uart_bridge_wishbone_ack) begin
				uart_bridge_words_count_uartwishbonebridge_next_value1 <= (uart_bridge_words_count + 1'd1);
				uart_bridge_words_count_uartwishbonebridge_next_value_ce1 <= 1'd1;
				uart_bridge_address_uartwishbonebridge_next_value4 <= (uart_bridge_address + uart_bridge_incr);
				uart_bridge_address_uartwishbonebridge_next_value_ce4 <= 1'd1;
				if ((uart_bridge_words_count == (uart_bridge_length - 1'd1))) begin
					uartwishbonebridge_next_state <= 1'd0;
				end else begin
					uartwishbonebridge_next_state <= 2'd3;
				end
			end
		end
		3'd5: begin
			uart_bridge_rx_source_ready <= 1'd0;
			uart_bridge_wishbone_stb <= 1'd1;
			uart_bridge_wishbone_we <= 1'd0;
			uart_bridge_wishbone_cyc <= 1'd1;
			if (uart_bridge_wishbone_ack) begin
				uart_bridge_data_uartwishbonebridge_next_value6 <= uart_bridge_wishbone_dat_r;
				uart_bridge_data_uartwishbonebridge_next_value_ce6 <= 1'd1;
				uartwishbonebridge_next_state <= 3'd6;
			end
		end
		3'd6: begin
			uart_bridge_rx_source_ready <= 1'd0;
			uart_bridge_tx_sink_valid <= 1'd1;
			if (uart_bridge_tx_sink_ready) begin
				uart_bridge_bytes_count_uartwishbonebridge_next_value0 <= (uart_bridge_bytes_count + 1'd1);
				uart_bridge_bytes_count_uartwishbonebridge_next_value_ce0 <= 1'd1;
				if ((uart_bridge_bytes_count == 2'd3)) begin
					uart_bridge_words_count_uartwishbonebridge_next_value1 <= (uart_bridge_words_count + 1'd1);
					uart_bridge_words_count_uartwishbonebridge_next_value_ce1 <= 1'd1;
					uart_bridge_address_uartwishbonebridge_next_value4 <= (uart_bridge_address + uart_bridge_incr);
					uart_bridge_address_uartwishbonebridge_next_value_ce4 <= 1'd1;
					if ((uart_bridge_words_count == (uart_bridge_length - 1'd1))) begin
						uartwishbonebridge_next_state <= 1'd0;
					end else begin
						uartwishbonebridge_next_state <= 3'd5;
					end
				end
			end
		end
		default: begin
			uart_bridge_is_ongoing <= 1'd1;
			uart_bridge_rx_source_ready <= 1'd1;
			uart_bridge_bytes_count_uartwishbonebridge_next_value0 <= 1'd0;
			uart_bridge_bytes_count_uartwishbonebridge_next_value_ce0 <= 1'd1;
			uart_bridge_words_count_uartwishbonebridge_next_value1 <= 1'd0;
			uart_bridge_words_count_uartwishbonebridge_next_value_ce1 <= 1'd1;
			if (uart_bridge_rx_source_valid) begin
				uart_bridge_cmd_uartwishbonebridge_next_value2 <= uart_bridge_rx_source_payload_data;
				uart_bridge_cmd_uartwishbonebridge_next_value_ce2 <= 1'd1;
				uartwishbonebridge_next_state <= 1'd1;
			end
		end
	endcase
end
assign uart_bridge_done = (uart_bridge_count == 1'd0);
assign gpio_mode0_pad = (~gpio_mode0_storage);
assign gpio_mode1_pad = (~gpio_mode1_storage);
assign gpio_inenb_pad = (~gpio_ien_storage);
assign gpio_outenb_pad = (~gpio_oe_storage);
assign gpio_out_pad = gpio_out_storage;
always @(*) begin
	la_iena <= 128'd0;
	la_iena[0] <= (~la_ien_storage[0]);
	la_iena[1] <= (~la_ien_storage[1]);
	la_iena[2] <= (~la_ien_storage[2]);
	la_iena[3] <= (~la_ien_storage[3]);
	la_iena[4] <= (~la_ien_storage[4]);
	la_iena[5] <= (~la_ien_storage[5]);
	la_iena[6] <= (~la_ien_storage[6]);
	la_iena[7] <= (~la_ien_storage[7]);
	la_iena[8] <= (~la_ien_storage[8]);
	la_iena[9] <= (~la_ien_storage[9]);
	la_iena[10] <= (~la_ien_storage[10]);
	la_iena[11] <= (~la_ien_storage[11]);
	la_iena[12] <= (~la_ien_storage[12]);
	la_iena[13] <= (~la_ien_storage[13]);
	la_iena[14] <= (~la_ien_storage[14]);
	la_iena[15] <= (~la_ien_storage[15]);
	la_iena[16] <= (~la_ien_storage[16]);
	la_iena[17] <= (~la_ien_storage[17]);
	la_iena[18] <= (~la_ien_storage[18]);
	la_iena[19] <= (~la_ien_storage[19]);
	la_iena[20] <= (~la_ien_storage[20]);
	la_iena[21] <= (~la_ien_storage[21]);
	la_iena[22] <= (~la_ien_storage[22]);
	la_iena[23] <= (~la_ien_storage[23]);
	la_iena[24] <= (~la_ien_storage[24]);
	la_iena[25] <= (~la_ien_storage[25]);
	la_iena[26] <= (~la_ien_storage[26]);
	la_iena[27] <= (~la_ien_storage[27]);
	la_iena[28] <= (~la_ien_storage[28]);
	la_iena[29] <= (~la_ien_storage[29]);
	la_iena[30] <= (~la_ien_storage[30]);
	la_iena[31] <= (~la_ien_storage[31]);
	la_iena[32] <= (~la_ien_storage[32]);
	la_iena[33] <= (~la_ien_storage[33]);
	la_iena[34] <= (~la_ien_storage[34]);
	la_iena[35] <= (~la_ien_storage[35]);
	la_iena[36] <= (~la_ien_storage[36]);
	la_iena[37] <= (~la_ien_storage[37]);
	la_iena[38] <= (~la_ien_storage[38]);
	la_iena[39] <= (~la_ien_storage[39]);
	la_iena[40] <= (~la_ien_storage[40]);
	la_iena[41] <= (~la_ien_storage[41]);
	la_iena[42] <= (~la_ien_storage[42]);
	la_iena[43] <= (~la_ien_storage[43]);
	la_iena[44] <= (~la_ien_storage[44]);
	la_iena[45] <= (~la_ien_storage[45]);
	la_iena[46] <= (~la_ien_storage[46]);
	la_iena[47] <= (~la_ien_storage[47]);
	la_iena[48] <= (~la_ien_storage[48]);
	la_iena[49] <= (~la_ien_storage[49]);
	la_iena[50] <= (~la_ien_storage[50]);
	la_iena[51] <= (~la_ien_storage[51]);
	la_iena[52] <= (~la_ien_storage[52]);
	la_iena[53] <= (~la_ien_storage[53]);
	la_iena[54] <= (~la_ien_storage[54]);
	la_iena[55] <= (~la_ien_storage[55]);
	la_iena[56] <= (~la_ien_storage[56]);
	la_iena[57] <= (~la_ien_storage[57]);
	la_iena[58] <= (~la_ien_storage[58]);
	la_iena[59] <= (~la_ien_storage[59]);
	la_iena[60] <= (~la_ien_storage[60]);
	la_iena[61] <= (~la_ien_storage[61]);
	la_iena[62] <= (~la_ien_storage[62]);
	la_iena[63] <= (~la_ien_storage[63]);
	la_iena[64] <= (~la_ien_storage[64]);
	la_iena[65] <= (~la_ien_storage[65]);
	la_iena[66] <= (~la_ien_storage[66]);
	la_iena[67] <= (~la_ien_storage[67]);
	la_iena[68] <= (~la_ien_storage[68]);
	la_iena[69] <= (~la_ien_storage[69]);
	la_iena[70] <= (~la_ien_storage[70]);
	la_iena[71] <= (~la_ien_storage[71]);
	la_iena[72] <= (~la_ien_storage[72]);
	la_iena[73] <= (~la_ien_storage[73]);
	la_iena[74] <= (~la_ien_storage[74]);
	la_iena[75] <= (~la_ien_storage[75]);
	la_iena[76] <= (~la_ien_storage[76]);
	la_iena[77] <= (~la_ien_storage[77]);
	la_iena[78] <= (~la_ien_storage[78]);
	la_iena[79] <= (~la_ien_storage[79]);
	la_iena[80] <= (~la_ien_storage[80]);
	la_iena[81] <= (~la_ien_storage[81]);
	la_iena[82] <= (~la_ien_storage[82]);
	la_iena[83] <= (~la_ien_storage[83]);
	la_iena[84] <= (~la_ien_storage[84]);
	la_iena[85] <= (~la_ien_storage[85]);
	la_iena[86] <= (~la_ien_storage[86]);
	la_iena[87] <= (~la_ien_storage[87]);
	la_iena[88] <= (~la_ien_storage[88]);
	la_iena[89] <= (~la_ien_storage[89]);
	la_iena[90] <= (~la_ien_storage[90]);
	la_iena[91] <= (~la_ien_storage[91]);
	la_iena[92] <= (~la_ien_storage[92]);
	la_iena[93] <= (~la_ien_storage[93]);
	la_iena[94] <= (~la_ien_storage[94]);
	la_iena[95] <= (~la_ien_storage[95]);
	la_iena[96] <= (~la_ien_storage[96]);
	la_iena[97] <= (~la_ien_storage[97]);
	la_iena[98] <= (~la_ien_storage[98]);
	la_iena[99] <= (~la_ien_storage[99]);
	la_iena[100] <= (~la_ien_storage[100]);
	la_iena[101] <= (~la_ien_storage[101]);
	la_iena[102] <= (~la_ien_storage[102]);
	la_iena[103] <= (~la_ien_storage[103]);
	la_iena[104] <= (~la_ien_storage[104]);
	la_iena[105] <= (~la_ien_storage[105]);
	la_iena[106] <= (~la_ien_storage[106]);
	la_iena[107] <= (~la_ien_storage[107]);
	la_iena[108] <= (~la_ien_storage[108]);
	la_iena[109] <= (~la_ien_storage[109]);
	la_iena[110] <= (~la_ien_storage[110]);
	la_iena[111] <= (~la_ien_storage[111]);
	la_iena[112] <= (~la_ien_storage[112]);
	la_iena[113] <= (~la_ien_storage[113]);
	la_iena[114] <= (~la_ien_storage[114]);
	la_iena[115] <= (~la_ien_storage[115]);
	la_iena[116] <= (~la_ien_storage[116]);
	la_iena[117] <= (~la_ien_storage[117]);
	la_iena[118] <= (~la_ien_storage[118]);
	la_iena[119] <= (~la_ien_storage[119]);
	la_iena[120] <= (~la_ien_storage[120]);
	la_iena[121] <= (~la_ien_storage[121]);
	la_iena[122] <= (~la_ien_storage[122]);
	la_iena[123] <= (~la_ien_storage[123]);
	la_iena[124] <= (~la_ien_storage[124]);
	la_iena[125] <= (~la_ien_storage[125]);
	la_iena[126] <= (~la_ien_storage[126]);
	la_iena[127] <= (~la_ien_storage[127]);
end
always @(*) begin
	la_oenb <= 128'd0;
	la_oenb[0] <= (~la_oe_storage[0]);
	la_oenb[1] <= (~la_oe_storage[1]);
	la_oenb[2] <= (~la_oe_storage[2]);
	la_oenb[3] <= (~la_oe_storage[3]);
	la_oenb[4] <= (~la_oe_storage[4]);
	la_oenb[5] <= (~la_oe_storage[5]);
	la_oenb[6] <= (~la_oe_storage[6]);
	la_oenb[7] <= (~la_oe_storage[7]);
	la_oenb[8] <= (~la_oe_storage[8]);
	la_oenb[9] <= (~la_oe_storage[9]);
	la_oenb[10] <= (~la_oe_storage[10]);
	la_oenb[11] <= (~la_oe_storage[11]);
	la_oenb[12] <= (~la_oe_storage[12]);
	la_oenb[13] <= (~la_oe_storage[13]);
	la_oenb[14] <= (~la_oe_storage[14]);
	la_oenb[15] <= (~la_oe_storage[15]);
	la_oenb[16] <= (~la_oe_storage[16]);
	la_oenb[17] <= (~la_oe_storage[17]);
	la_oenb[18] <= (~la_oe_storage[18]);
	la_oenb[19] <= (~la_oe_storage[19]);
	la_oenb[20] <= (~la_oe_storage[20]);
	la_oenb[21] <= (~la_oe_storage[21]);
	la_oenb[22] <= (~la_oe_storage[22]);
	la_oenb[23] <= (~la_oe_storage[23]);
	la_oenb[24] <= (~la_oe_storage[24]);
	la_oenb[25] <= (~la_oe_storage[25]);
	la_oenb[26] <= (~la_oe_storage[26]);
	la_oenb[27] <= (~la_oe_storage[27]);
	la_oenb[28] <= (~la_oe_storage[28]);
	la_oenb[29] <= (~la_oe_storage[29]);
	la_oenb[30] <= (~la_oe_storage[30]);
	la_oenb[31] <= (~la_oe_storage[31]);
	la_oenb[32] <= (~la_oe_storage[32]);
	la_oenb[33] <= (~la_oe_storage[33]);
	la_oenb[34] <= (~la_oe_storage[34]);
	la_oenb[35] <= (~la_oe_storage[35]);
	la_oenb[36] <= (~la_oe_storage[36]);
	la_oenb[37] <= (~la_oe_storage[37]);
	la_oenb[38] <= (~la_oe_storage[38]);
	la_oenb[39] <= (~la_oe_storage[39]);
	la_oenb[40] <= (~la_oe_storage[40]);
	la_oenb[41] <= (~la_oe_storage[41]);
	la_oenb[42] <= (~la_oe_storage[42]);
	la_oenb[43] <= (~la_oe_storage[43]);
	la_oenb[44] <= (~la_oe_storage[44]);
	la_oenb[45] <= (~la_oe_storage[45]);
	la_oenb[46] <= (~la_oe_storage[46]);
	la_oenb[47] <= (~la_oe_storage[47]);
	la_oenb[48] <= (~la_oe_storage[48]);
	la_oenb[49] <= (~la_oe_storage[49]);
	la_oenb[50] <= (~la_oe_storage[50]);
	la_oenb[51] <= (~la_oe_storage[51]);
	la_oenb[52] <= (~la_oe_storage[52]);
	la_oenb[53] <= (~la_oe_storage[53]);
	la_oenb[54] <= (~la_oe_storage[54]);
	la_oenb[55] <= (~la_oe_storage[55]);
	la_oenb[56] <= (~la_oe_storage[56]);
	la_oenb[57] <= (~la_oe_storage[57]);
	la_oenb[58] <= (~la_oe_storage[58]);
	la_oenb[59] <= (~la_oe_storage[59]);
	la_oenb[60] <= (~la_oe_storage[60]);
	la_oenb[61] <= (~la_oe_storage[61]);
	la_oenb[62] <= (~la_oe_storage[62]);
	la_oenb[63] <= (~la_oe_storage[63]);
	la_oenb[64] <= (~la_oe_storage[64]);
	la_oenb[65] <= (~la_oe_storage[65]);
	la_oenb[66] <= (~la_oe_storage[66]);
	la_oenb[67] <= (~la_oe_storage[67]);
	la_oenb[68] <= (~la_oe_storage[68]);
	la_oenb[69] <= (~la_oe_storage[69]);
	la_oenb[70] <= (~la_oe_storage[70]);
	la_oenb[71] <= (~la_oe_storage[71]);
	la_oenb[72] <= (~la_oe_storage[72]);
	la_oenb[73] <= (~la_oe_storage[73]);
	la_oenb[74] <= (~la_oe_storage[74]);
	la_oenb[75] <= (~la_oe_storage[75]);
	la_oenb[76] <= (~la_oe_storage[76]);
	la_oenb[77] <= (~la_oe_storage[77]);
	la_oenb[78] <= (~la_oe_storage[78]);
	la_oenb[79] <= (~la_oe_storage[79]);
	la_oenb[80] <= (~la_oe_storage[80]);
	la_oenb[81] <= (~la_oe_storage[81]);
	la_oenb[82] <= (~la_oe_storage[82]);
	la_oenb[83] <= (~la_oe_storage[83]);
	la_oenb[84] <= (~la_oe_storage[84]);
	la_oenb[85] <= (~la_oe_storage[85]);
	la_oenb[86] <= (~la_oe_storage[86]);
	la_oenb[87] <= (~la_oe_storage[87]);
	la_oenb[88] <= (~la_oe_storage[88]);
	la_oenb[89] <= (~la_oe_storage[89]);
	la_oenb[90] <= (~la_oe_storage[90]);
	la_oenb[91] <= (~la_oe_storage[91]);
	la_oenb[92] <= (~la_oe_storage[92]);
	la_oenb[93] <= (~la_oe_storage[93]);
	la_oenb[94] <= (~la_oe_storage[94]);
	la_oenb[95] <= (~la_oe_storage[95]);
	la_oenb[96] <= (~la_oe_storage[96]);
	la_oenb[97] <= (~la_oe_storage[97]);
	la_oenb[98] <= (~la_oe_storage[98]);
	la_oenb[99] <= (~la_oe_storage[99]);
	la_oenb[100] <= (~la_oe_storage[100]);
	la_oenb[101] <= (~la_oe_storage[101]);
	la_oenb[102] <= (~la_oe_storage[102]);
	la_oenb[103] <= (~la_oe_storage[103]);
	la_oenb[104] <= (~la_oe_storage[104]);
	la_oenb[105] <= (~la_oe_storage[105]);
	la_oenb[106] <= (~la_oe_storage[106]);
	la_oenb[107] <= (~la_oe_storage[107]);
	la_oenb[108] <= (~la_oe_storage[108]);
	la_oenb[109] <= (~la_oe_storage[109]);
	la_oenb[110] <= (~la_oe_storage[110]);
	la_oenb[111] <= (~la_oe_storage[111]);
	la_oenb[112] <= (~la_oe_storage[112]);
	la_oenb[113] <= (~la_oe_storage[113]);
	la_oenb[114] <= (~la_oe_storage[114]);
	la_oenb[115] <= (~la_oe_storage[115]);
	la_oenb[116] <= (~la_oe_storage[116]);
	la_oenb[117] <= (~la_oe_storage[117]);
	la_oenb[118] <= (~la_oe_storage[118]);
	la_oenb[119] <= (~la_oe_storage[119]);
	la_oenb[120] <= (~la_oe_storage[120]);
	la_oenb[121] <= (~la_oe_storage[121]);
	la_oenb[122] <= (~la_oe_storage[122]);
	la_oenb[123] <= (~la_oe_storage[123]);
	la_oenb[124] <= (~la_oe_storage[124]);
	la_oenb[125] <= (~la_oe_storage[125]);
	la_oenb[126] <= (~la_oe_storage[126]);
	la_oenb[127] <= (~la_oe_storage[127]);
end
always @(*) begin
	la_output <= 128'd0;
	la_output[0] <= la_out_storage[0];
	la_output[1] <= la_out_storage[1];
	la_output[2] <= la_out_storage[2];
	la_output[3] <= la_out_storage[3];
	la_output[4] <= la_out_storage[4];
	la_output[5] <= la_out_storage[5];
	la_output[6] <= la_out_storage[6];
	la_output[7] <= la_out_storage[7];
	la_output[8] <= la_out_storage[8];
	la_output[9] <= la_out_storage[9];
	la_output[10] <= la_out_storage[10];
	la_output[11] <= la_out_storage[11];
	la_output[12] <= la_out_storage[12];
	la_output[13] <= la_out_storage[13];
	la_output[14] <= la_out_storage[14];
	la_output[15] <= la_out_storage[15];
	la_output[16] <= la_out_storage[16];
	la_output[17] <= la_out_storage[17];
	la_output[18] <= la_out_storage[18];
	la_output[19] <= la_out_storage[19];
	la_output[20] <= la_out_storage[20];
	la_output[21] <= la_out_storage[21];
	la_output[22] <= la_out_storage[22];
	la_output[23] <= la_out_storage[23];
	la_output[24] <= la_out_storage[24];
	la_output[25] <= la_out_storage[25];
	la_output[26] <= la_out_storage[26];
	la_output[27] <= la_out_storage[27];
	la_output[28] <= la_out_storage[28];
	la_output[29] <= la_out_storage[29];
	la_output[30] <= la_out_storage[30];
	la_output[31] <= la_out_storage[31];
	la_output[32] <= la_out_storage[32];
	la_output[33] <= la_out_storage[33];
	la_output[34] <= la_out_storage[34];
	la_output[35] <= la_out_storage[35];
	la_output[36] <= la_out_storage[36];
	la_output[37] <= la_out_storage[37];
	la_output[38] <= la_out_storage[38];
	la_output[39] <= la_out_storage[39];
	la_output[40] <= la_out_storage[40];
	la_output[41] <= la_out_storage[41];
	la_output[42] <= la_out_storage[42];
	la_output[43] <= la_out_storage[43];
	la_output[44] <= la_out_storage[44];
	la_output[45] <= la_out_storage[45];
	la_output[46] <= la_out_storage[46];
	la_output[47] <= la_out_storage[47];
	la_output[48] <= la_out_storage[48];
	la_output[49] <= la_out_storage[49];
	la_output[50] <= la_out_storage[50];
	la_output[51] <= la_out_storage[51];
	la_output[52] <= la_out_storage[52];
	la_output[53] <= la_out_storage[53];
	la_output[54] <= la_out_storage[54];
	la_output[55] <= la_out_storage[55];
	la_output[56] <= la_out_storage[56];
	la_output[57] <= la_out_storage[57];
	la_output[58] <= la_out_storage[58];
	la_output[59] <= la_out_storage[59];
	la_output[60] <= la_out_storage[60];
	la_output[61] <= la_out_storage[61];
	la_output[62] <= la_out_storage[62];
	la_output[63] <= la_out_storage[63];
	la_output[64] <= la_out_storage[64];
	la_output[65] <= la_out_storage[65];
	la_output[66] <= la_out_storage[66];
	la_output[67] <= la_out_storage[67];
	la_output[68] <= la_out_storage[68];
	la_output[69] <= la_out_storage[69];
	la_output[70] <= la_out_storage[70];
	la_output[71] <= la_out_storage[71];
	la_output[72] <= la_out_storage[72];
	la_output[73] <= la_out_storage[73];
	la_output[74] <= la_out_storage[74];
	la_output[75] <= la_out_storage[75];
	la_output[76] <= la_out_storage[76];
	la_output[77] <= la_out_storage[77];
	la_output[78] <= la_out_storage[78];
	la_output[79] <= la_out_storage[79];
	la_output[80] <= la_out_storage[80];
	la_output[81] <= la_out_storage[81];
	la_output[82] <= la_out_storage[82];
	la_output[83] <= la_out_storage[83];
	la_output[84] <= la_out_storage[84];
	la_output[85] <= la_out_storage[85];
	la_output[86] <= la_out_storage[86];
	la_output[87] <= la_out_storage[87];
	la_output[88] <= la_out_storage[88];
	la_output[89] <= la_out_storage[89];
	la_output[90] <= la_out_storage[90];
	la_output[91] <= la_out_storage[91];
	la_output[92] <= la_out_storage[92];
	la_output[93] <= la_out_storage[93];
	la_output[94] <= la_out_storage[94];
	la_output[95] <= la_out_storage[95];
	la_output[96] <= la_out_storage[96];
	la_output[97] <= la_out_storage[97];
	la_output[98] <= la_out_storage[98];
	la_output[99] <= la_out_storage[99];
	la_output[100] <= la_out_storage[100];
	la_output[101] <= la_out_storage[101];
	la_output[102] <= la_out_storage[102];
	la_output[103] <= la_out_storage[103];
	la_output[104] <= la_out_storage[104];
	la_output[105] <= la_out_storage[105];
	la_output[106] <= la_out_storage[106];
	la_output[107] <= la_out_storage[107];
	la_output[108] <= la_out_storage[108];
	la_output[109] <= la_out_storage[109];
	la_output[110] <= la_out_storage[110];
	la_output[111] <= la_out_storage[111];
	la_output[112] <= la_out_storage[112];
	la_output[113] <= la_out_storage[113];
	la_output[114] <= la_out_storage[114];
	la_output[115] <= la_out_storage[115];
	la_output[116] <= la_out_storage[116];
	la_output[117] <= la_out_storage[117];
	la_output[118] <= la_out_storage[118];
	la_output[119] <= la_out_storage[119];
	la_output[120] <= la_out_storage[120];
	la_output[121] <= la_out_storage[121];
	la_output[122] <= la_out_storage[122];
	la_output[123] <= la_out_storage[123];
	la_output[124] <= la_out_storage[124];
	la_output[125] <= la_out_storage[125];
	la_output[126] <= la_out_storage[126];
	la_output[127] <= la_out_storage[127];
end
assign mprj_wb_iena = mprj_wb_iena_storage;
assign user_irq_ena = user_irq_ena_storage;
always @(*) begin
	gpioin0_gpioin0_trigger <= 1'd0;
	if (gpioin0_gpioin0_mode_storage) begin
		gpioin0_gpioin0_trigger <= (gpioin0_in_status ^ gpioin0_gpioin0_in_pads_n_d);
	end else begin
		gpioin0_gpioin0_trigger <= (gpioin0_in_status ^ gpioin0_gpioin0_edge_storage);
	end
end
assign gpioin0_i00 = gpioin0_gpioin0_status;
assign gpioin0_i01 = gpioin0_gpioin0_pending;
always @(*) begin
	gpioin0_gpioin0_clear <= 1'd0;
	if ((gpioin0_pending_re & gpioin0_pending_r)) begin
		gpioin0_gpioin0_clear <= 1'd1;
	end
end
assign gpioin0_gpioin0_irq = (gpioin0_pending_status & gpioin0_enable_storage);
assign gpioin0_gpioin0_status = gpioin0_gpioin0_trigger;
always @(*) begin
	gpioin1_gpioin1_trigger <= 1'd0;
	if (gpioin1_gpioin1_mode_storage) begin
		gpioin1_gpioin1_trigger <= (gpioin1_in_status ^ gpioin1_gpioin1_in_pads_n_d);
	end else begin
		gpioin1_gpioin1_trigger <= (gpioin1_in_status ^ gpioin1_gpioin1_edge_storage);
	end
end
assign gpioin1_i00 = gpioin1_gpioin1_status;
assign gpioin1_i01 = gpioin1_gpioin1_pending;
always @(*) begin
	gpioin1_gpioin1_clear <= 1'd0;
	if ((gpioin1_pending_re & gpioin1_pending_r)) begin
		gpioin1_gpioin1_clear <= 1'd1;
	end
end
assign gpioin1_gpioin1_irq = (gpioin1_pending_status & gpioin1_enable_storage);
assign gpioin1_gpioin1_status = gpioin1_gpioin1_trigger;
always @(*) begin
	gpioin2_gpioin2_trigger <= 1'd0;
	if (gpioin2_gpioin2_mode_storage) begin
		gpioin2_gpioin2_trigger <= (gpioin2_in_status ^ gpioin2_gpioin2_in_pads_n_d);
	end else begin
		gpioin2_gpioin2_trigger <= (gpioin2_in_status ^ gpioin2_gpioin2_edge_storage);
	end
end
assign gpioin2_i00 = gpioin2_gpioin2_status;
assign gpioin2_i01 = gpioin2_gpioin2_pending;
always @(*) begin
	gpioin2_gpioin2_clear <= 1'd0;
	if ((gpioin2_pending_re & gpioin2_pending_r)) begin
		gpioin2_gpioin2_clear <= 1'd1;
	end
end
assign gpioin2_gpioin2_irq = (gpioin2_pending_status & gpioin2_enable_storage);
assign gpioin2_gpioin2_status = gpioin2_gpioin2_trigger;
always @(*) begin
	gpioin3_gpioin3_trigger <= 1'd0;
	if (gpioin3_gpioin3_mode_storage) begin
		gpioin3_gpioin3_trigger <= (gpioin3_in_status ^ gpioin3_gpioin3_in_pads_n_d);
	end else begin
		gpioin3_gpioin3_trigger <= (gpioin3_in_status ^ gpioin3_gpioin3_edge_storage);
	end
end
assign gpioin3_i00 = gpioin3_gpioin3_status;
assign gpioin3_i01 = gpioin3_gpioin3_pending;
always @(*) begin
	gpioin3_gpioin3_clear <= 1'd0;
	if ((gpioin3_pending_re & gpioin3_pending_r)) begin
		gpioin3_gpioin3_clear <= 1'd1;
	end
end
assign gpioin3_gpioin3_irq = (gpioin3_pending_status & gpioin3_enable_storage);
assign gpioin3_gpioin3_status = gpioin3_gpioin3_trigger;
always @(*) begin
	gpioin4_gpioin4_trigger <= 1'd0;
	if (gpioin4_gpioin4_mode_storage) begin
		gpioin4_gpioin4_trigger <= (gpioin4_in_status ^ gpioin4_gpioin4_in_pads_n_d);
	end else begin
		gpioin4_gpioin4_trigger <= (gpioin4_in_status ^ gpioin4_gpioin4_edge_storage);
	end
end
assign gpioin4_i00 = gpioin4_gpioin4_status;
assign gpioin4_i01 = gpioin4_gpioin4_pending;
always @(*) begin
	gpioin4_gpioin4_clear <= 1'd0;
	if ((gpioin4_pending_re & gpioin4_pending_r)) begin
		gpioin4_gpioin4_clear <= 1'd1;
	end
end
assign gpioin4_gpioin4_irq = (gpioin4_pending_status & gpioin4_enable_storage);
assign gpioin4_gpioin4_status = gpioin4_gpioin4_trigger;
always @(*) begin
	gpioin5_gpioin5_trigger <= 1'd0;
	if (gpioin5_gpioin5_mode_storage) begin
		gpioin5_gpioin5_trigger <= (gpioin5_in_status ^ gpioin5_gpioin5_in_pads_n_d);
	end else begin
		gpioin5_gpioin5_trigger <= (gpioin5_in_status ^ gpioin5_gpioin5_edge_storage);
	end
end
assign gpioin5_i00 = gpioin5_gpioin5_status;
assign gpioin5_i01 = gpioin5_gpioin5_pending;
always @(*) begin
	gpioin5_gpioin5_clear <= 1'd0;
	if ((gpioin5_pending_re & gpioin5_pending_r)) begin
		gpioin5_gpioin5_clear <= 1'd1;
	end
end
assign gpioin5_gpioin5_irq = (gpioin5_pending_status & gpioin5_enable_storage);
assign gpioin5_gpioin5_status = gpioin5_gpioin5_trigger;
always @(*) begin
	mgmtsoc_adr <= 14'd0;
	mgmtsoc_we <= 1'd0;
	mgmtsoc_wishbone_ack <= 1'd0;
	mgmtsoc_dat_w <= 32'd0;
	next_state <= 1'd0;
	mgmtsoc_wishbone_dat_r <= 32'd0;
	next_state <= state;
	case (state)
		1'd1: begin
			mgmtsoc_wishbone_ack <= 1'd1;
			mgmtsoc_wishbone_dat_r <= mgmtsoc_dat_r;
			next_state <= 1'd0;
		end
		default: begin
			mgmtsoc_dat_w <= mgmtsoc_wishbone_dat_w;
			if ((mgmtsoc_wishbone_cyc & mgmtsoc_wishbone_stb)) begin
				mgmtsoc_adr <= mgmtsoc_wishbone_adr;
				mgmtsoc_we <= (mgmtsoc_wishbone_we & (mgmtsoc_wishbone_sel != 1'd0));
				next_state <= 1'd1;
			end
		end
	endcase
end
assign shared_adr = comb_array_muxed0;
assign shared_dat_w = comb_array_muxed1;
assign shared_sel = comb_array_muxed2;
assign shared_cyc = comb_array_muxed3;
assign shared_stb = comb_array_muxed4;
assign shared_we = comb_array_muxed5;
assign shared_cti = comb_array_muxed6;
assign shared_bte = comb_array_muxed7;
assign mgmtsoc_picorv32_idbus_dat_r = shared_dat_r;
assign uart_bridge_wishbone_dat_r = shared_dat_r;
assign mgmtsoc_picorv32_idbus_ack = (shared_ack & (grant == 1'd0));
assign uart_bridge_wishbone_ack = (shared_ack & (grant == 1'd1));
assign mgmtsoc_picorv32_idbus_err = (shared_err & (grant == 1'd0));
assign uart_bridge_wishbone_err = (shared_err & (grant == 1'd1));
assign request = {uart_bridge_wishbone_cyc, mgmtsoc_picorv32_idbus_cyc};
always @(*) begin
	slave_sel <= 3'd0;
	slave_sel[0] <= (shared_adr[29:9] == 19'd262144);
	slave_sel[1] <= (shared_adr[29:22] == 1'd0);
	slave_sel[2] <= (shared_adr[29:14] == 16'd33280);
end
assign bus_adr = shared_adr;
assign bus_dat_w = shared_dat_w;
assign bus_sel = shared_sel;
assign bus_stb = shared_stb;
assign bus_we = shared_we;
assign bus_cti = shared_cti;
assign bus_bte = shared_bte;
assign mgmtsoc_litespimmap_bus_adr = shared_adr;
assign mgmtsoc_litespimmap_bus_dat_w = shared_dat_w;
assign mgmtsoc_litespimmap_bus_sel = shared_sel;
assign mgmtsoc_litespimmap_bus_stb = shared_stb;
assign mgmtsoc_litespimmap_bus_we = shared_we;
assign mgmtsoc_litespimmap_bus_cti = shared_cti;
assign mgmtsoc_litespimmap_bus_bte = shared_bte;
assign mgmtsoc_wishbone_adr = shared_adr;
assign mgmtsoc_wishbone_dat_w = shared_dat_w;
assign mgmtsoc_wishbone_sel = shared_sel;
assign mgmtsoc_wishbone_stb = shared_stb;
assign mgmtsoc_wishbone_we = shared_we;
assign mgmtsoc_wishbone_cti = shared_cti;
assign mgmtsoc_wishbone_bte = shared_bte;
assign bus_cyc = (shared_cyc & slave_sel[0]);
assign mgmtsoc_litespimmap_bus_cyc = (shared_cyc & slave_sel[1]);
assign mgmtsoc_wishbone_cyc = (shared_cyc & slave_sel[2]);
assign shared_err = ((bus_err | mgmtsoc_litespimmap_bus_err) | mgmtsoc_wishbone_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
	error <= 1'd0;
	shared_ack <= 1'd0;
	shared_dat_r <= 32'd0;
	shared_ack <= ((bus_ack | mgmtsoc_litespimmap_bus_ack) | mgmtsoc_wishbone_ack);
	shared_dat_r <= ((({32{slave_sel_r[0]}} & bus_dat_r) | ({32{slave_sel_r[1]}} & mgmtsoc_litespimmap_bus_dat_r)) | ({32{slave_sel_r[2]}} & mgmtsoc_wishbone_dat_r));
	if (done) begin
		shared_dat_r <= 32'd4294967295;
		shared_ack <= 1'd1;
		error <= 1'd1;
	end
end
assign done = (count == 1'd0);
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 1'd0);
assign csrbank0_reset0_r = interface0_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank0_reset0_we <= 1'd0;
	csrbank0_reset0_re <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank0_reset0_re <= interface0_bank_bus_we;
		csrbank0_reset0_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_scratch0_r = interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank0_scratch0_re <= 1'd0;
	csrbank0_scratch0_we <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank0_scratch0_re <= interface0_bank_bus_we;
		csrbank0_scratch0_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_bus_errors_r = interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank0_bus_errors_re <= 1'd0;
	csrbank0_bus_errors_we <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank0_bus_errors_re <= interface0_bank_bus_we;
		csrbank0_bus_errors_we <= (~interface0_bank_bus_we);
	end
end
always @(*) begin
	mgmtsoc_soc_rst <= 1'd0;
	if (mgmtsoc_reset_re) begin
		mgmtsoc_soc_rst <= mgmtsoc_reset_storage[0];
	end
end
assign mgmtsoc_cpu_rst = mgmtsoc_reset_storage[1];
assign csrbank0_reset0_w = mgmtsoc_reset_storage[1:0];
assign csrbank0_scratch0_w = mgmtsoc_scratch_storage[31:0];
assign csrbank0_bus_errors_w = mgmtsoc_bus_errors_status[31:0];
assign mgmtsoc_bus_errors_we = csrbank0_bus_errors_we;
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 1'd1);
assign csrbank1_mode10_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_mode10_re <= 1'd0;
	csrbank1_mode10_we <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank1_mode10_re <= interface1_bank_bus_we;
		csrbank1_mode10_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_mode00_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_mode00_we <= 1'd0;
	csrbank1_mode00_re <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank1_mode00_re <= interface1_bank_bus_we;
		csrbank1_mode00_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_ien0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_ien0_we <= 1'd0;
	csrbank1_ien0_re <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank1_ien0_re <= interface1_bank_bus_we;
		csrbank1_ien0_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_oe0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_oe0_re <= 1'd0;
	csrbank1_oe0_we <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank1_oe0_re <= interface1_bank_bus_we;
		csrbank1_oe0_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_in_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_in_we <= 1'd0;
	csrbank1_in_re <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank1_in_re <= interface1_bank_bus_we;
		csrbank1_in_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_out0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_out0_we <= 1'd0;
	csrbank1_out0_re <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank1_out0_re <= interface1_bank_bus_we;
		csrbank1_out0_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_mode10_w = gpio_mode1_storage;
assign csrbank1_mode00_w = gpio_mode0_storage;
assign csrbank1_ien0_w = gpio_ien_storage;
assign csrbank1_oe0_w = gpio_oe_storage;
assign csrbank1_in_w = gpio_in_status;
assign gpio_in_we = csrbank1_in_we;
assign csrbank1_out0_w = gpio_out_storage;
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 2'd2);
assign csrbank2_ien3_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_ien3_re <= 1'd0;
	csrbank2_ien3_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank2_ien3_re <= interface2_bank_bus_we;
		csrbank2_ien3_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_ien2_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_ien2_we <= 1'd0;
	csrbank2_ien2_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank2_ien2_re <= interface2_bank_bus_we;
		csrbank2_ien2_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_ien1_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_ien1_re <= 1'd0;
	csrbank2_ien1_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank2_ien1_re <= interface2_bank_bus_we;
		csrbank2_ien1_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_ien0_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_ien0_we <= 1'd0;
	csrbank2_ien0_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank2_ien0_re <= interface2_bank_bus_we;
		csrbank2_ien0_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_oe3_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_oe3_we <= 1'd0;
	csrbank2_oe3_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank2_oe3_re <= interface2_bank_bus_we;
		csrbank2_oe3_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_oe2_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_oe2_re <= 1'd0;
	csrbank2_oe2_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank2_oe2_re <= interface2_bank_bus_we;
		csrbank2_oe2_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_oe1_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_oe1_we <= 1'd0;
	csrbank2_oe1_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank2_oe1_re <= interface2_bank_bus_we;
		csrbank2_oe1_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_oe0_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_oe0_re <= 1'd0;
	csrbank2_oe0_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank2_oe0_re <= interface2_bank_bus_we;
		csrbank2_oe0_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_in3_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_in3_re <= 1'd0;
	csrbank2_in3_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd8))) begin
		csrbank2_in3_re <= interface2_bank_bus_we;
		csrbank2_in3_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_in2_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_in2_we <= 1'd0;
	csrbank2_in2_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd9))) begin
		csrbank2_in2_re <= interface2_bank_bus_we;
		csrbank2_in2_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_in1_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_in1_we <= 1'd0;
	csrbank2_in1_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd10))) begin
		csrbank2_in1_re <= interface2_bank_bus_we;
		csrbank2_in1_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_in0_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_in0_re <= 1'd0;
	csrbank2_in0_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd11))) begin
		csrbank2_in0_re <= interface2_bank_bus_we;
		csrbank2_in0_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_out3_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_out3_re <= 1'd0;
	csrbank2_out3_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd12))) begin
		csrbank2_out3_re <= interface2_bank_bus_we;
		csrbank2_out3_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_out2_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_out2_we <= 1'd0;
	csrbank2_out2_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd13))) begin
		csrbank2_out2_re <= interface2_bank_bus_we;
		csrbank2_out2_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_out1_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_out1_re <= 1'd0;
	csrbank2_out1_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd14))) begin
		csrbank2_out1_re <= interface2_bank_bus_we;
		csrbank2_out1_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_out0_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_out0_we <= 1'd0;
	csrbank2_out0_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd15))) begin
		csrbank2_out0_re <= interface2_bank_bus_we;
		csrbank2_out0_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_ien3_w = la_ien_storage[127:96];
assign csrbank2_ien2_w = la_ien_storage[95:64];
assign csrbank2_ien1_w = la_ien_storage[63:32];
assign csrbank2_ien0_w = la_ien_storage[31:0];
assign csrbank2_oe3_w = la_oe_storage[127:96];
assign csrbank2_oe2_w = la_oe_storage[95:64];
assign csrbank2_oe1_w = la_oe_storage[63:32];
assign csrbank2_oe0_w = la_oe_storage[31:0];
assign csrbank2_in3_w = la_in_status[127:96];
assign csrbank2_in2_w = la_in_status[95:64];
assign csrbank2_in1_w = la_in_status[63:32];
assign csrbank2_in0_w = la_in_status[31:0];
assign la_in_we = csrbank2_in0_we;
assign csrbank2_out3_w = la_out_storage[127:96];
assign csrbank2_out2_w = la_out_storage[95:64];
assign csrbank2_out1_w = la_out_storage[63:32];
assign csrbank2_out0_w = la_out_storage[31:0];
assign csrbank3_sel = (interface3_bank_bus_adr[13:9] == 2'd3);
assign csrbank3_out0_r = interface3_bank_bus_dat_w[0];
always @(*) begin
	csrbank3_out0_we <= 1'd0;
	csrbank3_out0_re <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank3_out0_re <= interface3_bank_bus_we;
		csrbank3_out0_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_out0_w = mprj_wb_iena_storage;
assign csrbank4_sel = (interface4_bank_bus_adr[13:9] == 3'd4);
assign csrbank4_control0_r = interface4_bank_bus_dat_w[15:0];
always @(*) begin
	csrbank4_control0_we <= 1'd0;
	csrbank4_control0_re <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank4_control0_re <= interface4_bank_bus_we;
		csrbank4_control0_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_status_r = interface4_bank_bus_dat_w[0];
always @(*) begin
	csrbank4_status_re <= 1'd0;
	csrbank4_status_we <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank4_status_re <= interface4_bank_bus_we;
		csrbank4_status_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_mosi0_r = interface4_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank4_mosi0_we <= 1'd0;
	csrbank4_mosi0_re <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank4_mosi0_re <= interface4_bank_bus_we;
		csrbank4_mosi0_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_miso_r = interface4_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank4_miso_we <= 1'd0;
	csrbank4_miso_re <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank4_miso_re <= interface4_bank_bus_we;
		csrbank4_miso_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_cs0_r = interface4_bank_bus_dat_w[16:0];
always @(*) begin
	csrbank4_cs0_re <= 1'd0;
	csrbank4_cs0_we <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank4_cs0_re <= interface4_bank_bus_we;
		csrbank4_cs0_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_loopback0_r = interface4_bank_bus_dat_w[0];
always @(*) begin
	csrbank4_loopback0_we <= 1'd0;
	csrbank4_loopback0_re <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank4_loopback0_re <= interface4_bank_bus_we;
		csrbank4_loopback0_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_clk_divider0_r = interface4_bank_bus_dat_w[15:0];
always @(*) begin
	csrbank4_clk_divider0_we <= 1'd0;
	csrbank4_clk_divider0_re <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank4_clk_divider0_re <= interface4_bank_bus_we;
		csrbank4_clk_divider0_we <= (~interface4_bank_bus_we);
	end
end
always @(*) begin
	spi_master_start1 <= 1'd0;
	if (spi_master_control_re) begin
		spi_master_start1 <= spi_master_control_storage[0];
	end
end
assign spi_master_length1 = spi_master_control_storage[15:8];
assign csrbank4_control0_w = spi_master_control_storage[15:0];
assign spi_master_status_status = spi_master_done1;
assign csrbank4_status_w = spi_master_status_status;
assign spi_master_status_we = csrbank4_status_we;
assign csrbank4_mosi0_w = spi_master_mosi_storage[7:0];
assign csrbank4_miso_w = spi_master_miso_status[7:0];
assign spi_master_miso_we = csrbank4_miso_we;
assign spi_master_sel = spi_master_cs_storage[0];
assign spi_master_mode0 = spi_master_cs_storage[16];
assign csrbank4_cs0_w = spi_master_cs_storage[16:0];
assign spi_master_mode1 = spi_master_loopback_storage;
assign csrbank4_loopback0_w = spi_master_loopback_storage;
assign csrbank4_clk_divider0_w = spimaster_storage[15:0];
assign csrbank5_sel = (interface5_bank_bus_adr[13:9] == 3'd5);
assign csrbank5_mmap_dummy_bits0_r = interface5_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank5_mmap_dummy_bits0_re <= 1'd0;
	csrbank5_mmap_dummy_bits0_we <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank5_mmap_dummy_bits0_re <= interface5_bank_bus_we;
		csrbank5_mmap_dummy_bits0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_master_cs0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
	csrbank5_master_cs0_we <= 1'd0;
	csrbank5_master_cs0_re <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank5_master_cs0_re <= interface5_bank_bus_we;
		csrbank5_master_cs0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_master_phyconfig0_r = interface5_bank_bus_dat_w[23:0];
always @(*) begin
	csrbank5_master_phyconfig0_re <= 1'd0;
	csrbank5_master_phyconfig0_we <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank5_master_phyconfig0_re <= interface5_bank_bus_we;
		csrbank5_master_phyconfig0_we <= (~interface5_bank_bus_we);
	end
end
assign mgmtsoc_master_rxtx_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
	mgmtsoc_master_rxtx_we <= 1'd0;
	mgmtsoc_master_rxtx_re <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd3))) begin
		mgmtsoc_master_rxtx_re <= interface5_bank_bus_we;
		mgmtsoc_master_rxtx_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_master_status_r = interface5_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank5_master_status_re <= 1'd0;
	csrbank5_master_status_we <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank5_master_status_re <= interface5_bank_bus_we;
		csrbank5_master_status_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_mmap_dummy_bits0_w = mgmtsoc_litespimmap_storage[7:0];
assign csrbank5_master_cs0_w = mgmtsoc_master_cs_storage;
assign mgmtsoc_master_len = mgmtsoc_master_phyconfig_storage[7:0];
assign mgmtsoc_master_width = mgmtsoc_master_phyconfig_storage[11:8];
assign mgmtsoc_master_mask = mgmtsoc_master_phyconfig_storage[23:16];
assign csrbank5_master_phyconfig0_w = mgmtsoc_master_phyconfig_storage[23:0];
always @(*) begin
	mgmtsoc_master_status_status <= 2'd0;
	mgmtsoc_master_status_status[0] <= mgmtsoc_master_tx_ready;
	mgmtsoc_master_status_status[1] <= mgmtsoc_master_rx_ready;
end
assign csrbank5_master_status_w = mgmtsoc_master_status_status[1:0];
assign mgmtsoc_master_status_we = csrbank5_master_status_we;
assign csrbank6_sel = (interface6_bank_bus_adr[13:9] == 3'd6);
assign csrbank6_clk_divisor0_r = interface6_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank6_clk_divisor0_we <= 1'd0;
	csrbank6_clk_divisor0_re <= 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank6_clk_divisor0_re <= interface6_bank_bus_we;
		csrbank6_clk_divisor0_we <= (~interface6_bank_bus_we);
	end
end
assign csrbank6_clk_divisor0_w = mgmtsoc_litespisdrphycore_storage[7:0];
assign csrbank7_sel = (interface7_bank_bus_adr[13:9] == 3'd7);
assign csrbank7_load0_r = interface7_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank7_load0_re <= 1'd0;
	csrbank7_load0_we <= 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank7_load0_re <= interface7_bank_bus_we;
		csrbank7_load0_we <= (~interface7_bank_bus_we);
	end
end
assign csrbank7_reload0_r = interface7_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank7_reload0_re <= 1'd0;
	csrbank7_reload0_we <= 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank7_reload0_re <= interface7_bank_bus_we;
		csrbank7_reload0_we <= (~interface7_bank_bus_we);
	end
end
assign csrbank7_en0_r = interface7_bank_bus_dat_w[0];
always @(*) begin
	csrbank7_en0_we <= 1'd0;
	csrbank7_en0_re <= 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank7_en0_re <= interface7_bank_bus_we;
		csrbank7_en0_we <= (~interface7_bank_bus_we);
	end
end
assign csrbank7_update_value0_r = interface7_bank_bus_dat_w[0];
always @(*) begin
	csrbank7_update_value0_re <= 1'd0;
	csrbank7_update_value0_we <= 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank7_update_value0_re <= interface7_bank_bus_we;
		csrbank7_update_value0_we <= (~interface7_bank_bus_we);
	end
end
assign csrbank7_value_r = interface7_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank7_value_we <= 1'd0;
	csrbank7_value_re <= 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank7_value_re <= interface7_bank_bus_we;
		csrbank7_value_we <= (~interface7_bank_bus_we);
	end
end
assign csrbank7_ev_status_r = interface7_bank_bus_dat_w[0];
always @(*) begin
	csrbank7_ev_status_we <= 1'd0;
	csrbank7_ev_status_re <= 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank7_ev_status_re <= interface7_bank_bus_we;
		csrbank7_ev_status_we <= (~interface7_bank_bus_we);
	end
end
assign csrbank7_ev_pending_r = interface7_bank_bus_dat_w[0];
always @(*) begin
	csrbank7_ev_pending_re <= 1'd0;
	csrbank7_ev_pending_we <= 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank7_ev_pending_re <= interface7_bank_bus_we;
		csrbank7_ev_pending_we <= (~interface7_bank_bus_we);
	end
end
assign csrbank7_ev_enable0_r = interface7_bank_bus_dat_w[0];
always @(*) begin
	csrbank7_ev_enable0_re <= 1'd0;
	csrbank7_ev_enable0_we <= 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank7_ev_enable0_re <= interface7_bank_bus_we;
		csrbank7_ev_enable0_we <= (~interface7_bank_bus_we);
	end
end
assign csrbank7_load0_w = mgmtsoc_timer_load_storage[31:0];
assign csrbank7_reload0_w = mgmtsoc_timer_reload_storage[31:0];
assign csrbank7_en0_w = mgmtsoc_timer_en_storage;
assign csrbank7_update_value0_w = mgmtsoc_timer_update_value_storage;
assign csrbank7_value_w = mgmtsoc_timer_value_status[31:0];
assign mgmtsoc_timer_value_we = csrbank7_value_we;
assign mgmtsoc_timer_status_status = mgmtsoc_timer_zero0;
assign csrbank7_ev_status_w = mgmtsoc_timer_status_status;
assign mgmtsoc_timer_status_we = csrbank7_ev_status_we;
assign mgmtsoc_timer_pending_status = mgmtsoc_timer_zero1;
assign csrbank7_ev_pending_w = mgmtsoc_timer_pending_status;
assign mgmtsoc_timer_pending_we = csrbank7_ev_pending_we;
assign mgmtsoc_timer_zero2 = mgmtsoc_timer_enable_storage;
assign csrbank7_ev_enable0_w = mgmtsoc_timer_enable_storage;
assign csrbank8_sel = (interface8_bank_bus_adr[13:9] == 4'd8);
assign mgmtsoc_uart_rxtx_r = interface8_bank_bus_dat_w[7:0];
always @(*) begin
	mgmtsoc_uart_rxtx_re <= 1'd0;
	mgmtsoc_uart_rxtx_we <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 1'd0))) begin
		mgmtsoc_uart_rxtx_re <= interface8_bank_bus_we;
		mgmtsoc_uart_rxtx_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_txfull_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_txfull_we <= 1'd0;
	csrbank8_txfull_re <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank8_txfull_re <= interface8_bank_bus_we;
		csrbank8_txfull_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_rxempty_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_rxempty_we <= 1'd0;
	csrbank8_rxempty_re <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank8_rxempty_re <= interface8_bank_bus_we;
		csrbank8_rxempty_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_ev_status_r = interface8_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank8_ev_status_re <= 1'd0;
	csrbank8_ev_status_we <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank8_ev_status_re <= interface8_bank_bus_we;
		csrbank8_ev_status_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_ev_pending_r = interface8_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank8_ev_pending_re <= 1'd0;
	csrbank8_ev_pending_we <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank8_ev_pending_re <= interface8_bank_bus_we;
		csrbank8_ev_pending_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_ev_enable0_r = interface8_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank8_ev_enable0_we <= 1'd0;
	csrbank8_ev_enable0_re <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank8_ev_enable0_re <= interface8_bank_bus_we;
		csrbank8_ev_enable0_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_txempty_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_txempty_re <= 1'd0;
	csrbank8_txempty_we <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank8_txempty_re <= interface8_bank_bus_we;
		csrbank8_txempty_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_rxfull_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_rxfull_re <= 1'd0;
	csrbank8_rxfull_we <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank8_rxfull_re <= interface8_bank_bus_we;
		csrbank8_rxfull_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_txfull_w = mgmtsoc_uart_txfull_status;
assign mgmtsoc_uart_txfull_we = csrbank8_txfull_we;
assign csrbank8_rxempty_w = mgmtsoc_uart_rxempty_status;
assign mgmtsoc_uart_rxempty_we = csrbank8_rxempty_we;
always @(*) begin
	mgmtsoc_uart_status_status <= 2'd0;
	mgmtsoc_uart_status_status[0] <= mgmtsoc_uart_tx0;
	mgmtsoc_uart_status_status[1] <= mgmtsoc_uart_rx0;
end
assign csrbank8_ev_status_w = mgmtsoc_uart_status_status[1:0];
assign mgmtsoc_uart_status_we = csrbank8_ev_status_we;
always @(*) begin
	mgmtsoc_uart_pending_status <= 2'd0;
	mgmtsoc_uart_pending_status[0] <= mgmtsoc_uart_tx1;
	mgmtsoc_uart_pending_status[1] <= mgmtsoc_uart_rx1;
end
assign csrbank8_ev_pending_w = mgmtsoc_uart_pending_status[1:0];
assign mgmtsoc_uart_pending_we = csrbank8_ev_pending_we;
assign mgmtsoc_uart_tx2 = mgmtsoc_uart_enable_storage[0];
assign mgmtsoc_uart_rx2 = mgmtsoc_uart_enable_storage[1];
assign csrbank8_ev_enable0_w = mgmtsoc_uart_enable_storage[1:0];
assign csrbank8_txempty_w = mgmtsoc_uart_txempty_status;
assign mgmtsoc_uart_txempty_we = csrbank8_txempty_we;
assign csrbank8_rxfull_w = mgmtsoc_uart_rxfull_status;
assign mgmtsoc_uart_rxfull_we = csrbank8_rxfull_we;
assign csrbank9_sel = (interface9_bank_bus_adr[13:9] == 4'd9);
assign csrbank9_in_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_in_we <= 1'd0;
	csrbank9_in_re <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank9_in_re <= interface9_bank_bus_we;
		csrbank9_in_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_mode0_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_mode0_we <= 1'd0;
	csrbank9_mode0_re <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank9_mode0_re <= interface9_bank_bus_we;
		csrbank9_mode0_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_edge0_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_edge0_re <= 1'd0;
	csrbank9_edge0_we <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank9_edge0_re <= interface9_bank_bus_we;
		csrbank9_edge0_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_ev_status_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_ev_status_we <= 1'd0;
	csrbank9_ev_status_re <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank9_ev_status_re <= interface9_bank_bus_we;
		csrbank9_ev_status_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_ev_pending_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_ev_pending_we <= 1'd0;
	csrbank9_ev_pending_re <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank9_ev_pending_re <= interface9_bank_bus_we;
		csrbank9_ev_pending_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_ev_enable0_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_ev_enable0_re <= 1'd0;
	csrbank9_ev_enable0_we <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank9_ev_enable0_re <= interface9_bank_bus_we;
		csrbank9_ev_enable0_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_in_w = gpioin0_in_status;
assign gpioin0_in_we = csrbank9_in_we;
assign csrbank9_mode0_w = gpioin0_gpioin0_mode_storage;
assign csrbank9_edge0_w = gpioin0_gpioin0_edge_storage;
assign gpioin0_status_status = gpioin0_i00;
assign csrbank9_ev_status_w = gpioin0_status_status;
assign gpioin0_status_we = csrbank9_ev_status_we;
assign gpioin0_pending_status = gpioin0_i01;
assign csrbank9_ev_pending_w = gpioin0_pending_status;
assign gpioin0_pending_we = csrbank9_ev_pending_we;
assign gpioin0_i02 = gpioin0_enable_storage;
assign csrbank9_ev_enable0_w = gpioin0_enable_storage;
assign csrbank10_sel = (interface10_bank_bus_adr[13:9] == 4'd10);
assign csrbank10_in_r = interface10_bank_bus_dat_w[0];
always @(*) begin
	csrbank10_in_we <= 1'd0;
	csrbank10_in_re <= 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank10_in_re <= interface10_bank_bus_we;
		csrbank10_in_we <= (~interface10_bank_bus_we);
	end
end
assign csrbank10_mode0_r = interface10_bank_bus_dat_w[0];
always @(*) begin
	csrbank10_mode0_we <= 1'd0;
	csrbank10_mode0_re <= 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank10_mode0_re <= interface10_bank_bus_we;
		csrbank10_mode0_we <= (~interface10_bank_bus_we);
	end
end
assign csrbank10_edge0_r = interface10_bank_bus_dat_w[0];
always @(*) begin
	csrbank10_edge0_re <= 1'd0;
	csrbank10_edge0_we <= 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank10_edge0_re <= interface10_bank_bus_we;
		csrbank10_edge0_we <= (~interface10_bank_bus_we);
	end
end
assign csrbank10_ev_status_r = interface10_bank_bus_dat_w[0];
always @(*) begin
	csrbank10_ev_status_we <= 1'd0;
	csrbank10_ev_status_re <= 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank10_ev_status_re <= interface10_bank_bus_we;
		csrbank10_ev_status_we <= (~interface10_bank_bus_we);
	end
end
assign csrbank10_ev_pending_r = interface10_bank_bus_dat_w[0];
always @(*) begin
	csrbank10_ev_pending_we <= 1'd0;
	csrbank10_ev_pending_re <= 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank10_ev_pending_re <= interface10_bank_bus_we;
		csrbank10_ev_pending_we <= (~interface10_bank_bus_we);
	end
end
assign csrbank10_ev_enable0_r = interface10_bank_bus_dat_w[0];
always @(*) begin
	csrbank10_ev_enable0_re <= 1'd0;
	csrbank10_ev_enable0_we <= 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank10_ev_enable0_re <= interface10_bank_bus_we;
		csrbank10_ev_enable0_we <= (~interface10_bank_bus_we);
	end
end
assign csrbank10_in_w = gpioin1_in_status;
assign gpioin1_in_we = csrbank10_in_we;
assign csrbank10_mode0_w = gpioin1_gpioin1_mode_storage;
assign csrbank10_edge0_w = gpioin1_gpioin1_edge_storage;
assign gpioin1_status_status = gpioin1_i00;
assign csrbank10_ev_status_w = gpioin1_status_status;
assign gpioin1_status_we = csrbank10_ev_status_we;
assign gpioin1_pending_status = gpioin1_i01;
assign csrbank10_ev_pending_w = gpioin1_pending_status;
assign gpioin1_pending_we = csrbank10_ev_pending_we;
assign gpioin1_i02 = gpioin1_enable_storage;
assign csrbank10_ev_enable0_w = gpioin1_enable_storage;
assign csrbank11_sel = (interface11_bank_bus_adr[13:9] == 4'd11);
assign csrbank11_in_r = interface11_bank_bus_dat_w[0];
always @(*) begin
	csrbank11_in_we <= 1'd0;
	csrbank11_in_re <= 1'd0;
	if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank11_in_re <= interface11_bank_bus_we;
		csrbank11_in_we <= (~interface11_bank_bus_we);
	end
end
assign csrbank11_mode0_r = interface11_bank_bus_dat_w[0];
always @(*) begin
	csrbank11_mode0_re <= 1'd0;
	csrbank11_mode0_we <= 1'd0;
	if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank11_mode0_re <= interface11_bank_bus_we;
		csrbank11_mode0_we <= (~interface11_bank_bus_we);
	end
end
assign csrbank11_edge0_r = interface11_bank_bus_dat_w[0];
always @(*) begin
	csrbank11_edge0_re <= 1'd0;
	csrbank11_edge0_we <= 1'd0;
	if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank11_edge0_re <= interface11_bank_bus_we;
		csrbank11_edge0_we <= (~interface11_bank_bus_we);
	end
end
assign csrbank11_ev_status_r = interface11_bank_bus_dat_w[0];
always @(*) begin
	csrbank11_ev_status_we <= 1'd0;
	csrbank11_ev_status_re <= 1'd0;
	if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank11_ev_status_re <= interface11_bank_bus_we;
		csrbank11_ev_status_we <= (~interface11_bank_bus_we);
	end
end
assign csrbank11_ev_pending_r = interface11_bank_bus_dat_w[0];
always @(*) begin
	csrbank11_ev_pending_re <= 1'd0;
	csrbank11_ev_pending_we <= 1'd0;
	if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank11_ev_pending_re <= interface11_bank_bus_we;
		csrbank11_ev_pending_we <= (~interface11_bank_bus_we);
	end
end
assign csrbank11_ev_enable0_r = interface11_bank_bus_dat_w[0];
always @(*) begin
	csrbank11_ev_enable0_re <= 1'd0;
	csrbank11_ev_enable0_we <= 1'd0;
	if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank11_ev_enable0_re <= interface11_bank_bus_we;
		csrbank11_ev_enable0_we <= (~interface11_bank_bus_we);
	end
end
assign csrbank11_in_w = gpioin2_in_status;
assign gpioin2_in_we = csrbank11_in_we;
assign csrbank11_mode0_w = gpioin2_gpioin2_mode_storage;
assign csrbank11_edge0_w = gpioin2_gpioin2_edge_storage;
assign gpioin2_status_status = gpioin2_i00;
assign csrbank11_ev_status_w = gpioin2_status_status;
assign gpioin2_status_we = csrbank11_ev_status_we;
assign gpioin2_pending_status = gpioin2_i01;
assign csrbank11_ev_pending_w = gpioin2_pending_status;
assign gpioin2_pending_we = csrbank11_ev_pending_we;
assign gpioin2_i02 = gpioin2_enable_storage;
assign csrbank11_ev_enable0_w = gpioin2_enable_storage;
assign csrbank12_sel = (interface12_bank_bus_adr[13:9] == 4'd12);
assign csrbank12_in_r = interface12_bank_bus_dat_w[0];
always @(*) begin
	csrbank12_in_we <= 1'd0;
	csrbank12_in_re <= 1'd0;
	if ((csrbank12_sel & (interface12_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank12_in_re <= interface12_bank_bus_we;
		csrbank12_in_we <= (~interface12_bank_bus_we);
	end
end
assign csrbank12_mode0_r = interface12_bank_bus_dat_w[0];
always @(*) begin
	csrbank12_mode0_re <= 1'd0;
	csrbank12_mode0_we <= 1'd0;
	if ((csrbank12_sel & (interface12_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank12_mode0_re <= interface12_bank_bus_we;
		csrbank12_mode0_we <= (~interface12_bank_bus_we);
	end
end
assign csrbank12_edge0_r = interface12_bank_bus_dat_w[0];
always @(*) begin
	csrbank12_edge0_we <= 1'd0;
	csrbank12_edge0_re <= 1'd0;
	if ((csrbank12_sel & (interface12_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank12_edge0_re <= interface12_bank_bus_we;
		csrbank12_edge0_we <= (~interface12_bank_bus_we);
	end
end
assign csrbank12_ev_status_r = interface12_bank_bus_dat_w[0];
always @(*) begin
	csrbank12_ev_status_we <= 1'd0;
	csrbank12_ev_status_re <= 1'd0;
	if ((csrbank12_sel & (interface12_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank12_ev_status_re <= interface12_bank_bus_we;
		csrbank12_ev_status_we <= (~interface12_bank_bus_we);
	end
end
assign csrbank12_ev_pending_r = interface12_bank_bus_dat_w[0];
always @(*) begin
	csrbank12_ev_pending_re <= 1'd0;
	csrbank12_ev_pending_we <= 1'd0;
	if ((csrbank12_sel & (interface12_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank12_ev_pending_re <= interface12_bank_bus_we;
		csrbank12_ev_pending_we <= (~interface12_bank_bus_we);
	end
end
assign csrbank12_ev_enable0_r = interface12_bank_bus_dat_w[0];
always @(*) begin
	csrbank12_ev_enable0_we <= 1'd0;
	csrbank12_ev_enable0_re <= 1'd0;
	if ((csrbank12_sel & (interface12_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank12_ev_enable0_re <= interface12_bank_bus_we;
		csrbank12_ev_enable0_we <= (~interface12_bank_bus_we);
	end
end
assign csrbank12_in_w = gpioin3_in_status;
assign gpioin3_in_we = csrbank12_in_we;
assign csrbank12_mode0_w = gpioin3_gpioin3_mode_storage;
assign csrbank12_edge0_w = gpioin3_gpioin3_edge_storage;
assign gpioin3_status_status = gpioin3_i00;
assign csrbank12_ev_status_w = gpioin3_status_status;
assign gpioin3_status_we = csrbank12_ev_status_we;
assign gpioin3_pending_status = gpioin3_i01;
assign csrbank12_ev_pending_w = gpioin3_pending_status;
assign gpioin3_pending_we = csrbank12_ev_pending_we;
assign gpioin3_i02 = gpioin3_enable_storage;
assign csrbank12_ev_enable0_w = gpioin3_enable_storage;
assign csrbank13_sel = (interface13_bank_bus_adr[13:9] == 4'd13);
assign csrbank13_in_r = interface13_bank_bus_dat_w[0];
always @(*) begin
	csrbank13_in_re <= 1'd0;
	csrbank13_in_we <= 1'd0;
	if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank13_in_re <= interface13_bank_bus_we;
		csrbank13_in_we <= (~interface13_bank_bus_we);
	end
end
assign csrbank13_mode0_r = interface13_bank_bus_dat_w[0];
always @(*) begin
	csrbank13_mode0_re <= 1'd0;
	csrbank13_mode0_we <= 1'd0;
	if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank13_mode0_re <= interface13_bank_bus_we;
		csrbank13_mode0_we <= (~interface13_bank_bus_we);
	end
end
assign csrbank13_edge0_r = interface13_bank_bus_dat_w[0];
always @(*) begin
	csrbank13_edge0_we <= 1'd0;
	csrbank13_edge0_re <= 1'd0;
	if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank13_edge0_re <= interface13_bank_bus_we;
		csrbank13_edge0_we <= (~interface13_bank_bus_we);
	end
end
assign csrbank13_ev_status_r = interface13_bank_bus_dat_w[0];
always @(*) begin
	csrbank13_ev_status_re <= 1'd0;
	csrbank13_ev_status_we <= 1'd0;
	if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank13_ev_status_re <= interface13_bank_bus_we;
		csrbank13_ev_status_we <= (~interface13_bank_bus_we);
	end
end
assign csrbank13_ev_pending_r = interface13_bank_bus_dat_w[0];
always @(*) begin
	csrbank13_ev_pending_re <= 1'd0;
	csrbank13_ev_pending_we <= 1'd0;
	if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank13_ev_pending_re <= interface13_bank_bus_we;
		csrbank13_ev_pending_we <= (~interface13_bank_bus_we);
	end
end
assign csrbank13_ev_enable0_r = interface13_bank_bus_dat_w[0];
always @(*) begin
	csrbank13_ev_enable0_we <= 1'd0;
	csrbank13_ev_enable0_re <= 1'd0;
	if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank13_ev_enable0_re <= interface13_bank_bus_we;
		csrbank13_ev_enable0_we <= (~interface13_bank_bus_we);
	end
end
assign csrbank13_in_w = gpioin4_in_status;
assign gpioin4_in_we = csrbank13_in_we;
assign csrbank13_mode0_w = gpioin4_gpioin4_mode_storage;
assign csrbank13_edge0_w = gpioin4_gpioin4_edge_storage;
assign gpioin4_status_status = gpioin4_i00;
assign csrbank13_ev_status_w = gpioin4_status_status;
assign gpioin4_status_we = csrbank13_ev_status_we;
assign gpioin4_pending_status = gpioin4_i01;
assign csrbank13_ev_pending_w = gpioin4_pending_status;
assign gpioin4_pending_we = csrbank13_ev_pending_we;
assign gpioin4_i02 = gpioin4_enable_storage;
assign csrbank13_ev_enable0_w = gpioin4_enable_storage;
assign csrbank14_sel = (interface14_bank_bus_adr[13:9] == 4'd14);
assign csrbank14_in_r = interface14_bank_bus_dat_w[0];
always @(*) begin
	csrbank14_in_re <= 1'd0;
	csrbank14_in_we <= 1'd0;
	if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank14_in_re <= interface14_bank_bus_we;
		csrbank14_in_we <= (~interface14_bank_bus_we);
	end
end
assign csrbank14_mode0_r = interface14_bank_bus_dat_w[0];
always @(*) begin
	csrbank14_mode0_re <= 1'd0;
	csrbank14_mode0_we <= 1'd0;
	if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank14_mode0_re <= interface14_bank_bus_we;
		csrbank14_mode0_we <= (~interface14_bank_bus_we);
	end
end
assign csrbank14_edge0_r = interface14_bank_bus_dat_w[0];
always @(*) begin
	csrbank14_edge0_we <= 1'd0;
	csrbank14_edge0_re <= 1'd0;
	if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank14_edge0_re <= interface14_bank_bus_we;
		csrbank14_edge0_we <= (~interface14_bank_bus_we);
	end
end
assign csrbank14_ev_status_r = interface14_bank_bus_dat_w[0];
always @(*) begin
	csrbank14_ev_status_re <= 1'd0;
	csrbank14_ev_status_we <= 1'd0;
	if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank14_ev_status_re <= interface14_bank_bus_we;
		csrbank14_ev_status_we <= (~interface14_bank_bus_we);
	end
end
assign csrbank14_ev_pending_r = interface14_bank_bus_dat_w[0];
always @(*) begin
	csrbank14_ev_pending_re <= 1'd0;
	csrbank14_ev_pending_we <= 1'd0;
	if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank14_ev_pending_re <= interface14_bank_bus_we;
		csrbank14_ev_pending_we <= (~interface14_bank_bus_we);
	end
end
assign csrbank14_ev_enable0_r = interface14_bank_bus_dat_w[0];
always @(*) begin
	csrbank14_ev_enable0_we <= 1'd0;
	csrbank14_ev_enable0_re <= 1'd0;
	if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank14_ev_enable0_re <= interface14_bank_bus_we;
		csrbank14_ev_enable0_we <= (~interface14_bank_bus_we);
	end
end
assign csrbank14_in_w = gpioin5_in_status;
assign gpioin5_in_we = csrbank14_in_we;
assign csrbank14_mode0_w = gpioin5_gpioin5_mode_storage;
assign csrbank14_edge0_w = gpioin5_gpioin5_edge_storage;
assign gpioin5_status_status = gpioin5_i00;
assign csrbank14_ev_status_w = gpioin5_status_status;
assign gpioin5_status_we = csrbank14_ev_status_we;
assign gpioin5_pending_status = gpioin5_i01;
assign csrbank14_ev_pending_w = gpioin5_pending_status;
assign gpioin5_pending_we = csrbank14_ev_pending_we;
assign gpioin5_i02 = gpioin5_enable_storage;
assign csrbank14_ev_enable0_w = gpioin5_enable_storage;
assign csrbank15_sel = (interface15_bank_bus_adr[13:9] == 4'd15);
assign csrbank15_out0_r = interface15_bank_bus_dat_w[2:0];
always @(*) begin
	csrbank15_out0_re <= 1'd0;
	csrbank15_out0_we <= 1'd0;
	if ((csrbank15_sel & (interface15_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank15_out0_re <= interface15_bank_bus_we;
		csrbank15_out0_we <= (~interface15_bank_bus_we);
	end
end
assign csrbank15_out0_w = user_irq_ena_storage[2:0];
assign csr_interconnect_adr = mgmtsoc_adr;
assign csr_interconnect_we = mgmtsoc_we;
assign csr_interconnect_dat_w = mgmtsoc_dat_w;
assign mgmtsoc_dat_r = csr_interconnect_dat_r;
assign interface0_bank_bus_adr = csr_interconnect_adr;
assign interface1_bank_bus_adr = csr_interconnect_adr;
assign interface2_bank_bus_adr = csr_interconnect_adr;
assign interface3_bank_bus_adr = csr_interconnect_adr;
assign interface4_bank_bus_adr = csr_interconnect_adr;
assign interface5_bank_bus_adr = csr_interconnect_adr;
assign interface6_bank_bus_adr = csr_interconnect_adr;
assign interface7_bank_bus_adr = csr_interconnect_adr;
assign interface8_bank_bus_adr = csr_interconnect_adr;
assign interface9_bank_bus_adr = csr_interconnect_adr;
assign interface10_bank_bus_adr = csr_interconnect_adr;
assign interface11_bank_bus_adr = csr_interconnect_adr;
assign interface12_bank_bus_adr = csr_interconnect_adr;
assign interface13_bank_bus_adr = csr_interconnect_adr;
assign interface14_bank_bus_adr = csr_interconnect_adr;
assign interface15_bank_bus_adr = csr_interconnect_adr;
assign interface0_bank_bus_we = csr_interconnect_we;
assign interface1_bank_bus_we = csr_interconnect_we;
assign interface2_bank_bus_we = csr_interconnect_we;
assign interface3_bank_bus_we = csr_interconnect_we;
assign interface4_bank_bus_we = csr_interconnect_we;
assign interface5_bank_bus_we = csr_interconnect_we;
assign interface6_bank_bus_we = csr_interconnect_we;
assign interface7_bank_bus_we = csr_interconnect_we;
assign interface8_bank_bus_we = csr_interconnect_we;
assign interface9_bank_bus_we = csr_interconnect_we;
assign interface10_bank_bus_we = csr_interconnect_we;
assign interface11_bank_bus_we = csr_interconnect_we;
assign interface12_bank_bus_we = csr_interconnect_we;
assign interface13_bank_bus_we = csr_interconnect_we;
assign interface14_bank_bus_we = csr_interconnect_we;
assign interface15_bank_bus_we = csr_interconnect_we;
assign interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface5_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface6_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface7_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface8_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface9_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface10_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface11_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface12_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface13_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface14_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface15_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((((((((((((((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r) | interface3_bank_bus_dat_r) | interface4_bank_bus_dat_r) | interface5_bank_bus_dat_r) | interface6_bank_bus_dat_r) | interface7_bank_bus_dat_r) | interface8_bank_bus_dat_r) | interface9_bank_bus_dat_r) | interface10_bank_bus_dat_r) | interface11_bank_bus_dat_r) | interface12_bank_bus_dat_r) | interface13_bank_bus_dat_r) | interface14_bank_bus_dat_r) | interface15_bank_bus_dat_r);
always @(*) begin
	comb_array_muxed0 <= 30'd0;
	case (grant)
		1'd0: begin
			comb_array_muxed0 <= mgmtsoc_picorv32_idbus_adr;
		end
		default: begin
			comb_array_muxed0 <= uart_bridge_wishbone_adr;
		end
	endcase
end
always @(*) begin
	comb_array_muxed1 <= 32'd0;
	case (grant)
		1'd0: begin
			comb_array_muxed1 <= mgmtsoc_picorv32_idbus_dat_w;
		end
		default: begin
			comb_array_muxed1 <= uart_bridge_wishbone_dat_w;
		end
	endcase
end
always @(*) begin
	comb_array_muxed2 <= 4'd0;
	case (grant)
		1'd0: begin
			comb_array_muxed2 <= mgmtsoc_picorv32_idbus_sel;
		end
		default: begin
			comb_array_muxed2 <= uart_bridge_wishbone_sel;
		end
	endcase
end
always @(*) begin
	comb_array_muxed3 <= 1'd0;
	case (grant)
		1'd0: begin
			comb_array_muxed3 <= mgmtsoc_picorv32_idbus_cyc;
		end
		default: begin
			comb_array_muxed3 <= uart_bridge_wishbone_cyc;
		end
	endcase
end
always @(*) begin
	comb_array_muxed4 <= 1'd0;
	case (grant)
		1'd0: begin
			comb_array_muxed4 <= mgmtsoc_picorv32_idbus_stb;
		end
		default: begin
			comb_array_muxed4 <= uart_bridge_wishbone_stb;
		end
	endcase
end
always @(*) begin
	comb_array_muxed5 <= 1'd0;
	case (grant)
		1'd0: begin
			comb_array_muxed5 <= mgmtsoc_picorv32_idbus_we;
		end
		default: begin
			comb_array_muxed5 <= uart_bridge_wishbone_we;
		end
	endcase
end
always @(*) begin
	comb_array_muxed6 <= 3'd0;
	case (grant)
		1'd0: begin
			comb_array_muxed6 <= mgmtsoc_picorv32_idbus_cti;
		end
		default: begin
			comb_array_muxed6 <= uart_bridge_wishbone_cti;
		end
	endcase
end
always @(*) begin
	comb_array_muxed7 <= 2'd0;
	case (grant)
		1'd0: begin
			comb_array_muxed7 <= mgmtsoc_picorv32_idbus_bte;
		end
		default: begin
			comb_array_muxed7 <= uart_bridge_wishbone_bte;
		end
	endcase
end
always @(*) begin
	sync_array_muxed <= 1'd0;
	case (spi_master_mosi_sel)
		1'd0: begin
			sync_array_muxed <= spi_master_mosi_data[0];
		end
		1'd1: begin
			sync_array_muxed <= spi_master_mosi_data[1];
		end
		2'd2: begin
			sync_array_muxed <= spi_master_mosi_data[2];
		end
		2'd3: begin
			sync_array_muxed <= spi_master_mosi_data[3];
		end
		3'd4: begin
			sync_array_muxed <= spi_master_mosi_data[4];
		end
		3'd5: begin
			sync_array_muxed <= spi_master_mosi_data[5];
		end
		3'd6: begin
			sync_array_muxed <= spi_master_mosi_data[6];
		end
		default: begin
			sync_array_muxed <= spi_master_mosi_data[7];
		end
	endcase
end
assign mgmtsoc_rx_rx = multiregimpl0_regs1;
assign sdrio_clk = sys_clk_1;
assign sdrio_clk_1 = sys_clk_1;
assign sdrio_clk_2 = sys_clk_1;
assign uart_bridge_rx_rx = multiregimpl1_regs1;
assign gpio_in_status = multiregimpl2_regs1;
always @(*) begin
	la_in_status <= 128'd0;
	la_in_status[0] <= multiregimpl3_regs1;
	la_in_status[1] <= multiregimpl4_regs1;
	la_in_status[2] <= multiregimpl5_regs1;
	la_in_status[3] <= multiregimpl6_regs1;
	la_in_status[4] <= multiregimpl7_regs1;
	la_in_status[5] <= multiregimpl8_regs1;
	la_in_status[6] <= multiregimpl9_regs1;
	la_in_status[7] <= multiregimpl10_regs1;
	la_in_status[8] <= multiregimpl11_regs1;
	la_in_status[9] <= multiregimpl12_regs1;
	la_in_status[10] <= multiregimpl13_regs1;
	la_in_status[11] <= multiregimpl14_regs1;
	la_in_status[12] <= multiregimpl15_regs1;
	la_in_status[13] <= multiregimpl16_regs1;
	la_in_status[14] <= multiregimpl17_regs1;
	la_in_status[15] <= multiregimpl18_regs1;
	la_in_status[16] <= multiregimpl19_regs1;
	la_in_status[17] <= multiregimpl20_regs1;
	la_in_status[18] <= multiregimpl21_regs1;
	la_in_status[19] <= multiregimpl22_regs1;
	la_in_status[20] <= multiregimpl23_regs1;
	la_in_status[21] <= multiregimpl24_regs1;
	la_in_status[22] <= multiregimpl25_regs1;
	la_in_status[23] <= multiregimpl26_regs1;
	la_in_status[24] <= multiregimpl27_regs1;
	la_in_status[25] <= multiregimpl28_regs1;
	la_in_status[26] <= multiregimpl29_regs1;
	la_in_status[27] <= multiregimpl30_regs1;
	la_in_status[28] <= multiregimpl31_regs1;
	la_in_status[29] <= multiregimpl32_regs1;
	la_in_status[30] <= multiregimpl33_regs1;
	la_in_status[31] <= multiregimpl34_regs1;
	la_in_status[32] <= multiregimpl35_regs1;
	la_in_status[33] <= multiregimpl36_regs1;
	la_in_status[34] <= multiregimpl37_regs1;
	la_in_status[35] <= multiregimpl38_regs1;
	la_in_status[36] <= multiregimpl39_regs1;
	la_in_status[37] <= multiregimpl40_regs1;
	la_in_status[38] <= multiregimpl41_regs1;
	la_in_status[39] <= multiregimpl42_regs1;
	la_in_status[40] <= multiregimpl43_regs1;
	la_in_status[41] <= multiregimpl44_regs1;
	la_in_status[42] <= multiregimpl45_regs1;
	la_in_status[43] <= multiregimpl46_regs1;
	la_in_status[44] <= multiregimpl47_regs1;
	la_in_status[45] <= multiregimpl48_regs1;
	la_in_status[46] <= multiregimpl49_regs1;
	la_in_status[47] <= multiregimpl50_regs1;
	la_in_status[48] <= multiregimpl51_regs1;
	la_in_status[49] <= multiregimpl52_regs1;
	la_in_status[50] <= multiregimpl53_regs1;
	la_in_status[51] <= multiregimpl54_regs1;
	la_in_status[52] <= multiregimpl55_regs1;
	la_in_status[53] <= multiregimpl56_regs1;
	la_in_status[54] <= multiregimpl57_regs1;
	la_in_status[55] <= multiregimpl58_regs1;
	la_in_status[56] <= multiregimpl59_regs1;
	la_in_status[57] <= multiregimpl60_regs1;
	la_in_status[58] <= multiregimpl61_regs1;
	la_in_status[59] <= multiregimpl62_regs1;
	la_in_status[60] <= multiregimpl63_regs1;
	la_in_status[61] <= multiregimpl64_regs1;
	la_in_status[62] <= multiregimpl65_regs1;
	la_in_status[63] <= multiregimpl66_regs1;
	la_in_status[64] <= multiregimpl67_regs1;
	la_in_status[65] <= multiregimpl68_regs1;
	la_in_status[66] <= multiregimpl69_regs1;
	la_in_status[67] <= multiregimpl70_regs1;
	la_in_status[68] <= multiregimpl71_regs1;
	la_in_status[69] <= multiregimpl72_regs1;
	la_in_status[70] <= multiregimpl73_regs1;
	la_in_status[71] <= multiregimpl74_regs1;
	la_in_status[72] <= multiregimpl75_regs1;
	la_in_status[73] <= multiregimpl76_regs1;
	la_in_status[74] <= multiregimpl77_regs1;
	la_in_status[75] <= multiregimpl78_regs1;
	la_in_status[76] <= multiregimpl79_regs1;
	la_in_status[77] <= multiregimpl80_regs1;
	la_in_status[78] <= multiregimpl81_regs1;
	la_in_status[79] <= multiregimpl82_regs1;
	la_in_status[80] <= multiregimpl83_regs1;
	la_in_status[81] <= multiregimpl84_regs1;
	la_in_status[82] <= multiregimpl85_regs1;
	la_in_status[83] <= multiregimpl86_regs1;
	la_in_status[84] <= multiregimpl87_regs1;
	la_in_status[85] <= multiregimpl88_regs1;
	la_in_status[86] <= multiregimpl89_regs1;
	la_in_status[87] <= multiregimpl90_regs1;
	la_in_status[88] <= multiregimpl91_regs1;
	la_in_status[89] <= multiregimpl92_regs1;
	la_in_status[90] <= multiregimpl93_regs1;
	la_in_status[91] <= multiregimpl94_regs1;
	la_in_status[92] <= multiregimpl95_regs1;
	la_in_status[93] <= multiregimpl96_regs1;
	la_in_status[94] <= multiregimpl97_regs1;
	la_in_status[95] <= multiregimpl98_regs1;
	la_in_status[96] <= multiregimpl99_regs1;
	la_in_status[97] <= multiregimpl100_regs1;
	la_in_status[98] <= multiregimpl101_regs1;
	la_in_status[99] <= multiregimpl102_regs1;
	la_in_status[100] <= multiregimpl103_regs1;
	la_in_status[101] <= multiregimpl104_regs1;
	la_in_status[102] <= multiregimpl105_regs1;
	la_in_status[103] <= multiregimpl106_regs1;
	la_in_status[104] <= multiregimpl107_regs1;
	la_in_status[105] <= multiregimpl108_regs1;
	la_in_status[106] <= multiregimpl109_regs1;
	la_in_status[107] <= multiregimpl110_regs1;
	la_in_status[108] <= multiregimpl111_regs1;
	la_in_status[109] <= multiregimpl112_regs1;
	la_in_status[110] <= multiregimpl113_regs1;
	la_in_status[111] <= multiregimpl114_regs1;
	la_in_status[112] <= multiregimpl115_regs1;
	la_in_status[113] <= multiregimpl116_regs1;
	la_in_status[114] <= multiregimpl117_regs1;
	la_in_status[115] <= multiregimpl118_regs1;
	la_in_status[116] <= multiregimpl119_regs1;
	la_in_status[117] <= multiregimpl120_regs1;
	la_in_status[118] <= multiregimpl121_regs1;
	la_in_status[119] <= multiregimpl122_regs1;
	la_in_status[120] <= multiregimpl123_regs1;
	la_in_status[121] <= multiregimpl124_regs1;
	la_in_status[122] <= multiregimpl125_regs1;
	la_in_status[123] <= multiregimpl126_regs1;
	la_in_status[124] <= multiregimpl127_regs1;
	la_in_status[125] <= multiregimpl128_regs1;
	la_in_status[126] <= multiregimpl129_regs1;
	la_in_status[127] <= multiregimpl130_regs1;
end
assign gpioin0_in_status = multiregimpl131_regs1;
assign gpioin1_in_status = multiregimpl132_regs1;
assign gpioin2_in_status = multiregimpl133_regs1;
assign gpioin3_in_status = multiregimpl134_regs1;
assign gpioin4_in_status = multiregimpl135_regs1;
assign gpioin5_in_status = multiregimpl136_regs1;

always @(posedge por_clk) begin
	int_rst <= sys_rst;
end

always @(posedge sdrio_clk) begin
	spiflash_clk <= mgmtsoc_litespisdrphycore_clk;
	spiflash_mosi <= mgmtsoc_litespisdrphycore_dq_o;
	mgmtsoc_litespisdrphycore_dq_i <= spiflash_miso;
end

always @(posedge sys_clk_1) begin
	if ((mgmtsoc_bus_errors != 32'd4294967295)) begin
		if (mgmtsoc_bus_error) begin
			mgmtsoc_bus_errors <= (mgmtsoc_bus_errors + 1'd1);
		end
	end
	{mgmtsoc_tx_tick, mgmtsoc_tx_phase} <= 26'd49478023;
	if (mgmtsoc_tx_enable) begin
		{mgmtsoc_tx_tick, mgmtsoc_tx_phase} <= (mgmtsoc_tx_phase + 26'd49478023);
	end
	rs232phy_rs232phytx_state <= rs232phy_rs232phytx_next_state;
	if (mgmtsoc_tx_count_rs232phy_rs232phytx_next_value_ce0) begin
		mgmtsoc_tx_count <= mgmtsoc_tx_count_rs232phy_rs232phytx_next_value0;
	end
	if (mgmtsoc_serial_tx_rs232phy_rs232phytx_next_value_ce1) begin
		serial_tx <= mgmtsoc_serial_tx_rs232phy_rs232phytx_next_value1;
	end
	if (mgmtsoc_tx_data_rs232phy_rs232phytx_next_value_ce2) begin
		mgmtsoc_tx_data <= mgmtsoc_tx_data_rs232phy_rs232phytx_next_value2;
	end
	mgmtsoc_rx_rx_d <= mgmtsoc_rx_rx;
	{mgmtsoc_rx_tick, mgmtsoc_rx_phase} <= 32'd2147483648;
	if (mgmtsoc_rx_enable) begin
		{mgmtsoc_rx_tick, mgmtsoc_rx_phase} <= (mgmtsoc_rx_phase + 26'd49478023);
	end
	rs232phy_rs232phyrx_state <= rs232phy_rs232phyrx_next_state;
	if (mgmtsoc_rx_count_rs232phy_rs232phyrx_next_value_ce0) begin
		mgmtsoc_rx_count <= mgmtsoc_rx_count_rs232phy_rs232phyrx_next_value0;
	end
	if (mgmtsoc_rx_data_rs232phy_rs232phyrx_next_value_ce1) begin
		mgmtsoc_rx_data <= mgmtsoc_rx_data_rs232phy_rs232phyrx_next_value1;
	end
	if (mgmtsoc_uart_tx_clear) begin
		mgmtsoc_uart_tx_pending <= 1'd0;
	end
	mgmtsoc_uart_tx_trigger_d <= mgmtsoc_uart_tx_trigger;
	if ((mgmtsoc_uart_tx_trigger & (~mgmtsoc_uart_tx_trigger_d))) begin
		mgmtsoc_uart_tx_pending <= 1'd1;
	end
	if (mgmtsoc_uart_rx_clear) begin
		mgmtsoc_uart_rx_pending <= 1'd0;
	end
	mgmtsoc_uart_rx_trigger_d <= mgmtsoc_uart_rx_trigger;
	if ((mgmtsoc_uart_rx_trigger & (~mgmtsoc_uart_rx_trigger_d))) begin
		mgmtsoc_uart_rx_pending <= 1'd1;
	end
	if (mgmtsoc_uart_tx_fifo_syncfifo_re) begin
		mgmtsoc_uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (mgmtsoc_uart_tx_fifo_re) begin
			mgmtsoc_uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((mgmtsoc_uart_tx_fifo_syncfifo_we & mgmtsoc_uart_tx_fifo_syncfifo_writable) & (~mgmtsoc_uart_tx_fifo_replace))) begin
		mgmtsoc_uart_tx_fifo_produce <= (mgmtsoc_uart_tx_fifo_produce + 1'd1);
	end
	if (mgmtsoc_uart_tx_fifo_do_read) begin
		mgmtsoc_uart_tx_fifo_consume <= (mgmtsoc_uart_tx_fifo_consume + 1'd1);
	end
	if (((mgmtsoc_uart_tx_fifo_syncfifo_we & mgmtsoc_uart_tx_fifo_syncfifo_writable) & (~mgmtsoc_uart_tx_fifo_replace))) begin
		if ((~mgmtsoc_uart_tx_fifo_do_read)) begin
			mgmtsoc_uart_tx_fifo_level0 <= (mgmtsoc_uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (mgmtsoc_uart_tx_fifo_do_read) begin
			mgmtsoc_uart_tx_fifo_level0 <= (mgmtsoc_uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (mgmtsoc_uart_rx_fifo_syncfifo_re) begin
		mgmtsoc_uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (mgmtsoc_uart_rx_fifo_re) begin
			mgmtsoc_uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((mgmtsoc_uart_rx_fifo_syncfifo_we & mgmtsoc_uart_rx_fifo_syncfifo_writable) & (~mgmtsoc_uart_rx_fifo_replace))) begin
		mgmtsoc_uart_rx_fifo_produce <= (mgmtsoc_uart_rx_fifo_produce + 1'd1);
	end
	if (mgmtsoc_uart_rx_fifo_do_read) begin
		mgmtsoc_uart_rx_fifo_consume <= (mgmtsoc_uart_rx_fifo_consume + 1'd1);
	end
	if (((mgmtsoc_uart_rx_fifo_syncfifo_we & mgmtsoc_uart_rx_fifo_syncfifo_writable) & (~mgmtsoc_uart_rx_fifo_replace))) begin
		if ((~mgmtsoc_uart_rx_fifo_do_read)) begin
			mgmtsoc_uart_rx_fifo_level0 <= (mgmtsoc_uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (mgmtsoc_uart_rx_fifo_do_read) begin
			mgmtsoc_uart_rx_fifo_level0 <= (mgmtsoc_uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (mgmtsoc_timer_en_storage) begin
		if ((mgmtsoc_timer_value == 1'd0)) begin
			mgmtsoc_timer_value <= mgmtsoc_timer_reload_storage;
		end else begin
			mgmtsoc_timer_value <= (mgmtsoc_timer_value - 1'd1);
		end
	end else begin
		mgmtsoc_timer_value <= mgmtsoc_timer_load_storage;
	end
	if (mgmtsoc_timer_update_value_re) begin
		mgmtsoc_timer_value_status <= mgmtsoc_timer_value;
	end
	if (mgmtsoc_timer_zero_clear) begin
		mgmtsoc_timer_zero_pending <= 1'd0;
	end
	mgmtsoc_timer_zero_trigger_d <= mgmtsoc_timer_zero_trigger;
	if ((mgmtsoc_timer_zero_trigger & (~mgmtsoc_timer_zero_trigger_d))) begin
		mgmtsoc_timer_zero_pending <= 1'd1;
	end
	spi_master_clk_divider1 <= (spi_master_clk_divider1 + 1'd1);
	if (spi_master_clk_rise) begin
		spi_master_clk <= spi_master_clk_enable;
	end else begin
		if (spi_master_clk_fall) begin
			spi_master_clk_divider1 <= 1'd0;
			spi_master_clk <= 1'd0;
		end
	end
	spi_master_cs_n <= (~(spi_master_cs & (spi_master_xfer_enable | (spi_master_cs_mode == 1'd1))));
	if (spi_master_mosi_latch) begin
		spi_master_mosi_data <= spi_master_mosi_1;
		spi_master_mosi_sel <= 3'd7;
	end else begin
		if (spi_master_clk_fall) begin
			if (spi_master_xfer_enable) begin
				spi_master_mosi <= sync_array_muxed;
			end
			spi_master_mosi_sel <= (spi_master_mosi_sel - 1'd1);
		end
	end
	if (spi_master_clk_rise) begin
		if (spi_master_loopback) begin
			spi_master_miso_data <= {spi_master_miso_data, spi_master_mosi};
		end else begin
			spi_master_miso_data <= {spi_master_miso_data, spi_master_miso};
		end
	end
	if (spi_master_miso_latch) begin
		spi_master_miso_1 <= spi_master_miso_data;
	end
	spimaster_state <= spimaster_next_state;
	if (spi_master_count_spimaster_next_value_ce) begin
		spi_master_count <= spi_master_count_spimaster_next_value;
	end
	bus_ack <= ((bus_stb & bus_cyc) & (~bus_ack));
	if (mgmtsoc_litespisdrphycore_sr_out_load) begin
		mgmtsoc_litespisdrphycore_sr_out <= (mgmtsoc_litespisdrphycore_sink_payload_data <<< (6'd32 - mgmtsoc_litespisdrphycore_sink_payload_len));
	end
	if (mgmtsoc_litespisdrphycore_sr_out_shift) begin
		case (mgmtsoc_litespisdrphycore_sink_payload_width)
			1'd1: begin
				mgmtsoc_litespisdrphycore_sr_out <= {mgmtsoc_litespisdrphycore_sr_out, mgmtsoc_litespisdrphycore0};
			end
			2'd2: begin
				mgmtsoc_litespisdrphycore_sr_out <= {mgmtsoc_litespisdrphycore_sr_out, mgmtsoc_litespisdrphycore1};
			end
			3'd4: begin
				mgmtsoc_litespisdrphycore_sr_out <= {mgmtsoc_litespisdrphycore_sr_out, mgmtsoc_litespisdrphycore2};
			end
			4'd8: begin
				mgmtsoc_litespisdrphycore_sr_out <= {mgmtsoc_litespisdrphycore_sr_out, mgmtsoc_litespisdrphycore3};
			end
		endcase
	end
	if (mgmtsoc_litespisdrphycore_sr_in_shift) begin
		case (mgmtsoc_litespisdrphycore_sink_payload_width)
			1'd1: begin
				mgmtsoc_litespisdrphycore_sr_in <= {mgmtsoc_litespisdrphycore_sr_in, mgmtsoc_litespisdrphycore_dq_i};
			end
			2'd2: begin
				mgmtsoc_litespisdrphycore_sr_in <= {mgmtsoc_litespisdrphycore_sr_in, mgmtsoc_litespisdrphycore_dq_i};
			end
			3'd4: begin
				mgmtsoc_litespisdrphycore_sr_in <= {mgmtsoc_litespisdrphycore_sr_in, mgmtsoc_litespisdrphycore_dq_i};
			end
			4'd8: begin
				mgmtsoc_litespisdrphycore_sr_in <= {mgmtsoc_litespisdrphycore_sr_in, mgmtsoc_litespisdrphycore_dq_i};
			end
		endcase
	end
	mgmtsoc_litespisdrphycore_posedge_reg <= mgmtsoc_litespisdrphycore_posedge;
	mgmtsoc_litespisdrphycore_posedge_reg2 <= mgmtsoc_litespisdrphycore_posedge_reg;
	if ((mgmtsoc_litespisdrphycore_en | mgmtsoc_litespisdrphycore_en_int)) begin
		if ((mgmtsoc_litespisdrphycore_cnt < mgmtsoc_litespisdrphycore_div)) begin
			mgmtsoc_litespisdrphycore_cnt <= (mgmtsoc_litespisdrphycore_cnt + 1'd1);
		end else begin
			mgmtsoc_litespisdrphycore_cnt <= 1'd0;
			mgmtsoc_litespisdrphycore_clk <= (~mgmtsoc_litespisdrphycore_clk);
		end
	end else begin
		mgmtsoc_litespisdrphycore_clk <= 1'd0;
		mgmtsoc_litespisdrphycore_cnt <= 1'd0;
	end
	if (mgmtsoc_litespisdrphycore_wait) begin
		if ((~mgmtsoc_litespisdrphycore_done)) begin
			mgmtsoc_litespisdrphycore_count <= (mgmtsoc_litespisdrphycore_count - 1'd1);
		end
	end else begin
		mgmtsoc_litespisdrphycore_count <= 4'd11;
	end
	litespiphy_state <= litespiphy_next_state;
	if (mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value_ce) begin
		mgmtsoc_litespisdrphycore_sr_cnt <= mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value;
	end
	case (litespi_grant)
		1'd0: begin
			if ((~litespi_request[0])) begin
				if (litespi_request[1]) begin
					litespi_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~litespi_request[1])) begin
				if (litespi_request[0]) begin
					litespi_grant <= 1'd0;
				end
			end
		end
	endcase
	if (mgmtsoc_litespimmap_wait) begin
		if ((~mgmtsoc_litespimmap_done)) begin
			mgmtsoc_litespimmap_count <= (mgmtsoc_litespimmap_count - 1'd1);
		end
	end else begin
		mgmtsoc_litespimmap_count <= 9'd256;
	end
	litespi_state <= litespi_next_state;
	if (mgmtsoc_litespimmap_burst_cs_litespi_next_value_ce0) begin
		mgmtsoc_litespimmap_burst_cs <= mgmtsoc_litespimmap_burst_cs_litespi_next_value0;
	end
	if (mgmtsoc_litespimmap_burst_adr_litespi_next_value_ce1) begin
		mgmtsoc_litespimmap_burst_adr <= mgmtsoc_litespimmap_burst_adr_litespi_next_value1;
	end
	if (((~mgmtsoc_master_tx_fifo_source_valid) | mgmtsoc_master_tx_fifo_source_ready)) begin
		mgmtsoc_master_tx_fifo_source_valid <= mgmtsoc_master_tx_fifo_sink_valid;
		mgmtsoc_master_tx_fifo_source_first <= mgmtsoc_master_tx_fifo_sink_first;
		mgmtsoc_master_tx_fifo_source_last <= mgmtsoc_master_tx_fifo_sink_last;
		mgmtsoc_master_tx_fifo_source_payload_data <= mgmtsoc_master_tx_fifo_sink_payload_data;
		mgmtsoc_master_tx_fifo_source_payload_len <= mgmtsoc_master_tx_fifo_sink_payload_len;
		mgmtsoc_master_tx_fifo_source_payload_width <= mgmtsoc_master_tx_fifo_sink_payload_width;
		mgmtsoc_master_tx_fifo_source_payload_mask <= mgmtsoc_master_tx_fifo_sink_payload_mask;
	end
	if (((~mgmtsoc_master_rx_fifo_source_valid) | mgmtsoc_master_rx_fifo_source_ready)) begin
		mgmtsoc_master_rx_fifo_source_valid <= mgmtsoc_master_rx_fifo_sink_valid;
		mgmtsoc_master_rx_fifo_source_first <= mgmtsoc_master_rx_fifo_sink_first;
		mgmtsoc_master_rx_fifo_source_last <= mgmtsoc_master_rx_fifo_sink_last;
		mgmtsoc_master_rx_fifo_source_payload_data <= mgmtsoc_master_rx_fifo_sink_payload_data;
	end
	{uart_bridge_tx_tick, uart_bridge_tx_phase} <= 26'd49478023;
	if (uart_bridge_tx_enable) begin
		{uart_bridge_tx_tick, uart_bridge_tx_phase} <= (uart_bridge_tx_phase + 26'd49478023);
	end
	uartwishbonebridge_rs232phytx_state <= uartwishbonebridge_rs232phytx_next_state;
	if (uart_bridge_tx_count_uartwishbonebridge_rs232phytx_next_value_ce0) begin
		uart_bridge_tx_count <= uart_bridge_tx_count_uartwishbonebridge_rs232phytx_next_value0;
	end
	if (platform_obj_serial_dbg_tx_uartwishbonebridge_rs232phytx_next_value_ce1) begin
		serial_dbg_tx <= platform_obj_serial_dbg_tx_uartwishbonebridge_rs232phytx_next_value1;
	end
	if (uart_bridge_tx_data_uartwishbonebridge_rs232phytx_next_value_ce2) begin
		uart_bridge_tx_data <= uart_bridge_tx_data_uartwishbonebridge_rs232phytx_next_value2;
	end
	uart_bridge_rx_rx_d <= uart_bridge_rx_rx;
	{uart_bridge_rx_tick, uart_bridge_rx_phase} <= 32'd2147483648;
	if (uart_bridge_rx_enable) begin
		{uart_bridge_rx_tick, uart_bridge_rx_phase} <= (uart_bridge_rx_phase + 26'd49478023);
	end
	uartwishbonebridge_rs232phyrx_state <= uartwishbonebridge_rs232phyrx_next_state;
	if (uart_bridge_rx_count_uartwishbonebridge_rs232phyrx_next_value_ce0) begin
		uart_bridge_rx_count <= uart_bridge_rx_count_uartwishbonebridge_rs232phyrx_next_value0;
	end
	if (uart_bridge_rx_data_uartwishbonebridge_rs232phyrx_next_value_ce1) begin
		uart_bridge_rx_data <= uart_bridge_rx_data_uartwishbonebridge_rs232phyrx_next_value1;
	end
	uartwishbonebridge_state <= uartwishbonebridge_next_state;
	if (uart_bridge_bytes_count_uartwishbonebridge_next_value_ce0) begin
		uart_bridge_bytes_count <= uart_bridge_bytes_count_uartwishbonebridge_next_value0;
	end
	if (uart_bridge_words_count_uartwishbonebridge_next_value_ce1) begin
		uart_bridge_words_count <= uart_bridge_words_count_uartwishbonebridge_next_value1;
	end
	if (uart_bridge_cmd_uartwishbonebridge_next_value_ce2) begin
		uart_bridge_cmd <= uart_bridge_cmd_uartwishbonebridge_next_value2;
	end
	if (uart_bridge_length_uartwishbonebridge_next_value_ce3) begin
		uart_bridge_length <= uart_bridge_length_uartwishbonebridge_next_value3;
	end
	if (uart_bridge_address_uartwishbonebridge_next_value_ce4) begin
		uart_bridge_address <= uart_bridge_address_uartwishbonebridge_next_value4;
	end
	if (uart_bridge_incr_uartwishbonebridge_next_value_ce5) begin
		uart_bridge_incr <= uart_bridge_incr_uartwishbonebridge_next_value5;
	end
	if (uart_bridge_data_uartwishbonebridge_next_value_ce6) begin
		uart_bridge_data <= uart_bridge_data_uartwishbonebridge_next_value6;
	end
	if (uart_bridge_reset) begin
		uart_bridge_incr <= 1'd0;
		uartwishbonebridge_state <= 3'd0;
	end
	if (uart_bridge_wait) begin
		if ((~uart_bridge_done)) begin
			uart_bridge_count <= (uart_bridge_count - 1'd1);
		end
	end else begin
		uart_bridge_count <= 20'd1000000;
	end
	gpioin0_gpioin0_in_pads_n_d <= gpioin0_in_status;
	if (gpioin0_gpioin0_clear) begin
		gpioin0_gpioin0_pending <= 1'd0;
	end
	gpioin0_gpioin0_trigger_d <= gpioin0_gpioin0_trigger;
	if ((gpioin0_gpioin0_trigger & (~gpioin0_gpioin0_trigger_d))) begin
		gpioin0_gpioin0_pending <= 1'd1;
	end
	gpioin1_gpioin1_in_pads_n_d <= gpioin1_in_status;
	if (gpioin1_gpioin1_clear) begin
		gpioin1_gpioin1_pending <= 1'd0;
	end
	gpioin1_gpioin1_trigger_d <= gpioin1_gpioin1_trigger;
	if ((gpioin1_gpioin1_trigger & (~gpioin1_gpioin1_trigger_d))) begin
		gpioin1_gpioin1_pending <= 1'd1;
	end
	gpioin2_gpioin2_in_pads_n_d <= gpioin2_in_status;
	if (gpioin2_gpioin2_clear) begin
		gpioin2_gpioin2_pending <= 1'd0;
	end
	gpioin2_gpioin2_trigger_d <= gpioin2_gpioin2_trigger;
	if ((gpioin2_gpioin2_trigger & (~gpioin2_gpioin2_trigger_d))) begin
		gpioin2_gpioin2_pending <= 1'd1;
	end
	gpioin3_gpioin3_in_pads_n_d <= gpioin3_in_status;
	if (gpioin3_gpioin3_clear) begin
		gpioin3_gpioin3_pending <= 1'd0;
	end
	gpioin3_gpioin3_trigger_d <= gpioin3_gpioin3_trigger;
	if ((gpioin3_gpioin3_trigger & (~gpioin3_gpioin3_trigger_d))) begin
		gpioin3_gpioin3_pending <= 1'd1;
	end
	gpioin4_gpioin4_in_pads_n_d <= gpioin4_in_status;
	if (gpioin4_gpioin4_clear) begin
		gpioin4_gpioin4_pending <= 1'd0;
	end
	gpioin4_gpioin4_trigger_d <= gpioin4_gpioin4_trigger;
	if ((gpioin4_gpioin4_trigger & (~gpioin4_gpioin4_trigger_d))) begin
		gpioin4_gpioin4_pending <= 1'd1;
	end
	gpioin5_gpioin5_in_pads_n_d <= gpioin5_in_status;
	if (gpioin5_gpioin5_clear) begin
		gpioin5_gpioin5_pending <= 1'd0;
	end
	gpioin5_gpioin5_trigger_d <= gpioin5_gpioin5_trigger;
	if ((gpioin5_gpioin5_trigger & (~gpioin5_gpioin5_trigger_d))) begin
		gpioin5_gpioin5_pending <= 1'd1;
	end
	state <= next_state;
	case (grant)
		1'd0: begin
			if ((~request[0])) begin
				if (request[1]) begin
					grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~request[1])) begin
				if (request[0]) begin
					grant <= 1'd0;
				end
			end
		end
	endcase
	slave_sel_r <= slave_sel;
	if (wait_1) begin
		if ((~done)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 20'd1000000;
	end
	interface0_bank_bus_dat_r <= 1'd0;
	if (csrbank0_sel) begin
		case (interface0_bank_bus_adr[8:0])
			1'd0: begin
				interface0_bank_bus_dat_r <= csrbank0_reset0_w;
			end
			1'd1: begin
				interface0_bank_bus_dat_r <= csrbank0_scratch0_w;
			end
			2'd2: begin
				interface0_bank_bus_dat_r <= csrbank0_bus_errors_w;
			end
		endcase
	end
	if (csrbank0_reset0_re) begin
		mgmtsoc_reset_storage[1:0] <= csrbank0_reset0_r;
	end
	mgmtsoc_reset_re <= csrbank0_reset0_re;
	if (csrbank0_scratch0_re) begin
		mgmtsoc_scratch_storage[31:0] <= csrbank0_scratch0_r;
	end
	mgmtsoc_scratch_re <= csrbank0_scratch0_re;
	mgmtsoc_bus_errors_re <= csrbank0_bus_errors_re;
	interface1_bank_bus_dat_r <= 1'd0;
	if (csrbank1_sel) begin
		case (interface1_bank_bus_adr[8:0])
			1'd0: begin
				interface1_bank_bus_dat_r <= csrbank1_mode10_w;
			end
			1'd1: begin
				interface1_bank_bus_dat_r <= csrbank1_mode00_w;
			end
			2'd2: begin
				interface1_bank_bus_dat_r <= csrbank1_ien0_w;
			end
			2'd3: begin
				interface1_bank_bus_dat_r <= csrbank1_oe0_w;
			end
			3'd4: begin
				interface1_bank_bus_dat_r <= csrbank1_in_w;
			end
			3'd5: begin
				interface1_bank_bus_dat_r <= csrbank1_out0_w;
			end
		endcase
	end
	if (csrbank1_mode10_re) begin
		gpio_mode1_storage <= csrbank1_mode10_r;
	end
	gpio_mode1_re <= csrbank1_mode10_re;
	if (csrbank1_mode00_re) begin
		gpio_mode0_storage <= csrbank1_mode00_r;
	end
	gpio_mode0_re <= csrbank1_mode00_re;
	if (csrbank1_ien0_re) begin
		gpio_ien_storage <= csrbank1_ien0_r;
	end
	gpio_ien_re <= csrbank1_ien0_re;
	if (csrbank1_oe0_re) begin
		gpio_oe_storage <= csrbank1_oe0_r;
	end
	gpio_oe_re <= csrbank1_oe0_re;
	gpio_in_re <= csrbank1_in_re;
	if (csrbank1_out0_re) begin
		gpio_out_storage <= csrbank1_out0_r;
	end
	gpio_out_re <= csrbank1_out0_re;
	interface2_bank_bus_dat_r <= 1'd0;
	if (csrbank2_sel) begin
		case (interface2_bank_bus_adr[8:0])
			1'd0: begin
				interface2_bank_bus_dat_r <= csrbank2_ien3_w;
			end
			1'd1: begin
				interface2_bank_bus_dat_r <= csrbank2_ien2_w;
			end
			2'd2: begin
				interface2_bank_bus_dat_r <= csrbank2_ien1_w;
			end
			2'd3: begin
				interface2_bank_bus_dat_r <= csrbank2_ien0_w;
			end
			3'd4: begin
				interface2_bank_bus_dat_r <= csrbank2_oe3_w;
			end
			3'd5: begin
				interface2_bank_bus_dat_r <= csrbank2_oe2_w;
			end
			3'd6: begin
				interface2_bank_bus_dat_r <= csrbank2_oe1_w;
			end
			3'd7: begin
				interface2_bank_bus_dat_r <= csrbank2_oe0_w;
			end
			4'd8: begin
				interface2_bank_bus_dat_r <= csrbank2_in3_w;
			end
			4'd9: begin
				interface2_bank_bus_dat_r <= csrbank2_in2_w;
			end
			4'd10: begin
				interface2_bank_bus_dat_r <= csrbank2_in1_w;
			end
			4'd11: begin
				interface2_bank_bus_dat_r <= csrbank2_in0_w;
			end
			4'd12: begin
				interface2_bank_bus_dat_r <= csrbank2_out3_w;
			end
			4'd13: begin
				interface2_bank_bus_dat_r <= csrbank2_out2_w;
			end
			4'd14: begin
				interface2_bank_bus_dat_r <= csrbank2_out1_w;
			end
			4'd15: begin
				interface2_bank_bus_dat_r <= csrbank2_out0_w;
			end
		endcase
	end
	if (csrbank2_ien3_re) begin
		la_ien_storage[127:96] <= csrbank2_ien3_r;
	end
	if (csrbank2_ien2_re) begin
		la_ien_storage[95:64] <= csrbank2_ien2_r;
	end
	if (csrbank2_ien1_re) begin
		la_ien_storage[63:32] <= csrbank2_ien1_r;
	end
	if (csrbank2_ien0_re) begin
		la_ien_storage[31:0] <= csrbank2_ien0_r;
	end
	la_ien_re <= csrbank2_ien0_re;
	if (csrbank2_oe3_re) begin
		la_oe_storage[127:96] <= csrbank2_oe3_r;
	end
	if (csrbank2_oe2_re) begin
		la_oe_storage[95:64] <= csrbank2_oe2_r;
	end
	if (csrbank2_oe1_re) begin
		la_oe_storage[63:32] <= csrbank2_oe1_r;
	end
	if (csrbank2_oe0_re) begin
		la_oe_storage[31:0] <= csrbank2_oe0_r;
	end
	la_oe_re <= csrbank2_oe0_re;
	la_in_re <= csrbank2_in0_re;
	if (csrbank2_out3_re) begin
		la_out_storage[127:96] <= csrbank2_out3_r;
	end
	if (csrbank2_out2_re) begin
		la_out_storage[95:64] <= csrbank2_out2_r;
	end
	if (csrbank2_out1_re) begin
		la_out_storage[63:32] <= csrbank2_out1_r;
	end
	if (csrbank2_out0_re) begin
		la_out_storage[31:0] <= csrbank2_out0_r;
	end
	la_out_re <= csrbank2_out0_re;
	interface3_bank_bus_dat_r <= 1'd0;
	if (csrbank3_sel) begin
		case (interface3_bank_bus_adr[8:0])
			1'd0: begin
				interface3_bank_bus_dat_r <= csrbank3_out0_w;
			end
		endcase
	end
	if (csrbank3_out0_re) begin
		mprj_wb_iena_storage <= csrbank3_out0_r;
	end
	mprj_wb_iena_re <= csrbank3_out0_re;
	interface4_bank_bus_dat_r <= 1'd0;
	if (csrbank4_sel) begin
		case (interface4_bank_bus_adr[8:0])
			1'd0: begin
				interface4_bank_bus_dat_r <= csrbank4_control0_w;
			end
			1'd1: begin
				interface4_bank_bus_dat_r <= csrbank4_status_w;
			end
			2'd2: begin
				interface4_bank_bus_dat_r <= csrbank4_mosi0_w;
			end
			2'd3: begin
				interface4_bank_bus_dat_r <= csrbank4_miso_w;
			end
			3'd4: begin
				interface4_bank_bus_dat_r <= csrbank4_cs0_w;
			end
			3'd5: begin
				interface4_bank_bus_dat_r <= csrbank4_loopback0_w;
			end
			3'd6: begin
				interface4_bank_bus_dat_r <= csrbank4_clk_divider0_w;
			end
		endcase
	end
	if (csrbank4_control0_re) begin
		spi_master_control_storage[15:0] <= csrbank4_control0_r;
	end
	spi_master_control_re <= csrbank4_control0_re;
	spi_master_status_re <= csrbank4_status_re;
	if (csrbank4_mosi0_re) begin
		spi_master_mosi_storage[7:0] <= csrbank4_mosi0_r;
	end
	spi_master_mosi_re <= csrbank4_mosi0_re;
	spi_master_miso_re <= csrbank4_miso_re;
	if (csrbank4_cs0_re) begin
		spi_master_cs_storage[16:0] <= csrbank4_cs0_r;
	end
	spi_master_cs_re <= csrbank4_cs0_re;
	if (csrbank4_loopback0_re) begin
		spi_master_loopback_storage <= csrbank4_loopback0_r;
	end
	spi_master_loopback_re <= csrbank4_loopback0_re;
	if (csrbank4_clk_divider0_re) begin
		spimaster_storage[15:0] <= csrbank4_clk_divider0_r;
	end
	spimaster_re <= csrbank4_clk_divider0_re;
	interface5_bank_bus_dat_r <= 1'd0;
	if (csrbank5_sel) begin
		case (interface5_bank_bus_adr[8:0])
			1'd0: begin
				interface5_bank_bus_dat_r <= csrbank5_mmap_dummy_bits0_w;
			end
			1'd1: begin
				interface5_bank_bus_dat_r <= csrbank5_master_cs0_w;
			end
			2'd2: begin
				interface5_bank_bus_dat_r <= csrbank5_master_phyconfig0_w;
			end
			2'd3: begin
				interface5_bank_bus_dat_r <= mgmtsoc_master_rxtx_w;
			end
			3'd4: begin
				interface5_bank_bus_dat_r <= csrbank5_master_status_w;
			end
		endcase
	end
	if (csrbank5_mmap_dummy_bits0_re) begin
		mgmtsoc_litespimmap_storage[7:0] <= csrbank5_mmap_dummy_bits0_r;
	end
	mgmtsoc_litespimmap_re <= csrbank5_mmap_dummy_bits0_re;
	if (csrbank5_master_cs0_re) begin
		mgmtsoc_master_cs_storage <= csrbank5_master_cs0_r;
	end
	mgmtsoc_master_cs_re <= csrbank5_master_cs0_re;
	if (csrbank5_master_phyconfig0_re) begin
		mgmtsoc_master_phyconfig_storage[23:0] <= csrbank5_master_phyconfig0_r;
	end
	mgmtsoc_master_phyconfig_re <= csrbank5_master_phyconfig0_re;
	mgmtsoc_master_status_re <= csrbank5_master_status_re;
	interface6_bank_bus_dat_r <= 1'd0;
	if (csrbank6_sel) begin
		case (interface6_bank_bus_adr[8:0])
			1'd0: begin
				interface6_bank_bus_dat_r <= csrbank6_clk_divisor0_w;
			end
		endcase
	end
	if (csrbank6_clk_divisor0_re) begin
		mgmtsoc_litespisdrphycore_storage[7:0] <= csrbank6_clk_divisor0_r;
	end
	mgmtsoc_litespisdrphycore_re <= csrbank6_clk_divisor0_re;
	interface7_bank_bus_dat_r <= 1'd0;
	if (csrbank7_sel) begin
		case (interface7_bank_bus_adr[8:0])
			1'd0: begin
				interface7_bank_bus_dat_r <= csrbank7_load0_w;
			end
			1'd1: begin
				interface7_bank_bus_dat_r <= csrbank7_reload0_w;
			end
			2'd2: begin
				interface7_bank_bus_dat_r <= csrbank7_en0_w;
			end
			2'd3: begin
				interface7_bank_bus_dat_r <= csrbank7_update_value0_w;
			end
			3'd4: begin
				interface7_bank_bus_dat_r <= csrbank7_value_w;
			end
			3'd5: begin
				interface7_bank_bus_dat_r <= csrbank7_ev_status_w;
			end
			3'd6: begin
				interface7_bank_bus_dat_r <= csrbank7_ev_pending_w;
			end
			3'd7: begin
				interface7_bank_bus_dat_r <= csrbank7_ev_enable0_w;
			end
		endcase
	end
	if (csrbank7_load0_re) begin
		mgmtsoc_timer_load_storage[31:0] <= csrbank7_load0_r;
	end
	mgmtsoc_timer_load_re <= csrbank7_load0_re;
	if (csrbank7_reload0_re) begin
		mgmtsoc_timer_reload_storage[31:0] <= csrbank7_reload0_r;
	end
	mgmtsoc_timer_reload_re <= csrbank7_reload0_re;
	if (csrbank7_en0_re) begin
		mgmtsoc_timer_en_storage <= csrbank7_en0_r;
	end
	mgmtsoc_timer_en_re <= csrbank7_en0_re;
	if (csrbank7_update_value0_re) begin
		mgmtsoc_timer_update_value_storage <= csrbank7_update_value0_r;
	end
	mgmtsoc_timer_update_value_re <= csrbank7_update_value0_re;
	mgmtsoc_timer_value_re <= csrbank7_value_re;
	mgmtsoc_timer_status_re <= csrbank7_ev_status_re;
	if (csrbank7_ev_pending_re) begin
		mgmtsoc_timer_pending_r <= csrbank7_ev_pending_r;
	end
	mgmtsoc_timer_pending_re <= csrbank7_ev_pending_re;
	if (csrbank7_ev_enable0_re) begin
		mgmtsoc_timer_enable_storage <= csrbank7_ev_enable0_r;
	end
	mgmtsoc_timer_enable_re <= csrbank7_ev_enable0_re;
	interface8_bank_bus_dat_r <= 1'd0;
	if (csrbank8_sel) begin
		case (interface8_bank_bus_adr[8:0])
			1'd0: begin
				interface8_bank_bus_dat_r <= mgmtsoc_uart_rxtx_w;
			end
			1'd1: begin
				interface8_bank_bus_dat_r <= csrbank8_txfull_w;
			end
			2'd2: begin
				interface8_bank_bus_dat_r <= csrbank8_rxempty_w;
			end
			2'd3: begin
				interface8_bank_bus_dat_r <= csrbank8_ev_status_w;
			end
			3'd4: begin
				interface8_bank_bus_dat_r <= csrbank8_ev_pending_w;
			end
			3'd5: begin
				interface8_bank_bus_dat_r <= csrbank8_ev_enable0_w;
			end
			3'd6: begin
				interface8_bank_bus_dat_r <= csrbank8_txempty_w;
			end
			3'd7: begin
				interface8_bank_bus_dat_r <= csrbank8_rxfull_w;
			end
		endcase
	end
	mgmtsoc_uart_txfull_re <= csrbank8_txfull_re;
	mgmtsoc_uart_rxempty_re <= csrbank8_rxempty_re;
	mgmtsoc_uart_status_re <= csrbank8_ev_status_re;
	if (csrbank8_ev_pending_re) begin
		mgmtsoc_uart_pending_r[1:0] <= csrbank8_ev_pending_r;
	end
	mgmtsoc_uart_pending_re <= csrbank8_ev_pending_re;
	if (csrbank8_ev_enable0_re) begin
		mgmtsoc_uart_enable_storage[1:0] <= csrbank8_ev_enable0_r;
	end
	mgmtsoc_uart_enable_re <= csrbank8_ev_enable0_re;
	mgmtsoc_uart_txempty_re <= csrbank8_txempty_re;
	mgmtsoc_uart_rxfull_re <= csrbank8_rxfull_re;
	interface9_bank_bus_dat_r <= 1'd0;
	if (csrbank9_sel) begin
		case (interface9_bank_bus_adr[8:0])
			1'd0: begin
				interface9_bank_bus_dat_r <= csrbank9_in_w;
			end
			1'd1: begin
				interface9_bank_bus_dat_r <= csrbank9_mode0_w;
			end
			2'd2: begin
				interface9_bank_bus_dat_r <= csrbank9_edge0_w;
			end
			2'd3: begin
				interface9_bank_bus_dat_r <= csrbank9_ev_status_w;
			end
			3'd4: begin
				interface9_bank_bus_dat_r <= csrbank9_ev_pending_w;
			end
			3'd5: begin
				interface9_bank_bus_dat_r <= csrbank9_ev_enable0_w;
			end
		endcase
	end
	gpioin0_in_re <= csrbank9_in_re;
	if (csrbank9_mode0_re) begin
		gpioin0_gpioin0_mode_storage <= csrbank9_mode0_r;
	end
	gpioin0_gpioin0_mode_re <= csrbank9_mode0_re;
	if (csrbank9_edge0_re) begin
		gpioin0_gpioin0_edge_storage <= csrbank9_edge0_r;
	end
	gpioin0_gpioin0_edge_re <= csrbank9_edge0_re;
	gpioin0_status_re <= csrbank9_ev_status_re;
	if (csrbank9_ev_pending_re) begin
		gpioin0_pending_r <= csrbank9_ev_pending_r;
	end
	gpioin0_pending_re <= csrbank9_ev_pending_re;
	if (csrbank9_ev_enable0_re) begin
		gpioin0_enable_storage <= csrbank9_ev_enable0_r;
	end
	gpioin0_enable_re <= csrbank9_ev_enable0_re;
	interface10_bank_bus_dat_r <= 1'd0;
	if (csrbank10_sel) begin
		case (interface10_bank_bus_adr[8:0])
			1'd0: begin
				interface10_bank_bus_dat_r <= csrbank10_in_w;
			end
			1'd1: begin
				interface10_bank_bus_dat_r <= csrbank10_mode0_w;
			end
			2'd2: begin
				interface10_bank_bus_dat_r <= csrbank10_edge0_w;
			end
			2'd3: begin
				interface10_bank_bus_dat_r <= csrbank10_ev_status_w;
			end
			3'd4: begin
				interface10_bank_bus_dat_r <= csrbank10_ev_pending_w;
			end
			3'd5: begin
				interface10_bank_bus_dat_r <= csrbank10_ev_enable0_w;
			end
		endcase
	end
	gpioin1_in_re <= csrbank10_in_re;
	if (csrbank10_mode0_re) begin
		gpioin1_gpioin1_mode_storage <= csrbank10_mode0_r;
	end
	gpioin1_gpioin1_mode_re <= csrbank10_mode0_re;
	if (csrbank10_edge0_re) begin
		gpioin1_gpioin1_edge_storage <= csrbank10_edge0_r;
	end
	gpioin1_gpioin1_edge_re <= csrbank10_edge0_re;
	gpioin1_status_re <= csrbank10_ev_status_re;
	if (csrbank10_ev_pending_re) begin
		gpioin1_pending_r <= csrbank10_ev_pending_r;
	end
	gpioin1_pending_re <= csrbank10_ev_pending_re;
	if (csrbank10_ev_enable0_re) begin
		gpioin1_enable_storage <= csrbank10_ev_enable0_r;
	end
	gpioin1_enable_re <= csrbank10_ev_enable0_re;
	interface11_bank_bus_dat_r <= 1'd0;
	if (csrbank11_sel) begin
		case (interface11_bank_bus_adr[8:0])
			1'd0: begin
				interface11_bank_bus_dat_r <= csrbank11_in_w;
			end
			1'd1: begin
				interface11_bank_bus_dat_r <= csrbank11_mode0_w;
			end
			2'd2: begin
				interface11_bank_bus_dat_r <= csrbank11_edge0_w;
			end
			2'd3: begin
				interface11_bank_bus_dat_r <= csrbank11_ev_status_w;
			end
			3'd4: begin
				interface11_bank_bus_dat_r <= csrbank11_ev_pending_w;
			end
			3'd5: begin
				interface11_bank_bus_dat_r <= csrbank11_ev_enable0_w;
			end
		endcase
	end
	gpioin2_in_re <= csrbank11_in_re;
	if (csrbank11_mode0_re) begin
		gpioin2_gpioin2_mode_storage <= csrbank11_mode0_r;
	end
	gpioin2_gpioin2_mode_re <= csrbank11_mode0_re;
	if (csrbank11_edge0_re) begin
		gpioin2_gpioin2_edge_storage <= csrbank11_edge0_r;
	end
	gpioin2_gpioin2_edge_re <= csrbank11_edge0_re;
	gpioin2_status_re <= csrbank11_ev_status_re;
	if (csrbank11_ev_pending_re) begin
		gpioin2_pending_r <= csrbank11_ev_pending_r;
	end
	gpioin2_pending_re <= csrbank11_ev_pending_re;
	if (csrbank11_ev_enable0_re) begin
		gpioin2_enable_storage <= csrbank11_ev_enable0_r;
	end
	gpioin2_enable_re <= csrbank11_ev_enable0_re;
	interface12_bank_bus_dat_r <= 1'd0;
	if (csrbank12_sel) begin
		case (interface12_bank_bus_adr[8:0])
			1'd0: begin
				interface12_bank_bus_dat_r <= csrbank12_in_w;
			end
			1'd1: begin
				interface12_bank_bus_dat_r <= csrbank12_mode0_w;
			end
			2'd2: begin
				interface12_bank_bus_dat_r <= csrbank12_edge0_w;
			end
			2'd3: begin
				interface12_bank_bus_dat_r <= csrbank12_ev_status_w;
			end
			3'd4: begin
				interface12_bank_bus_dat_r <= csrbank12_ev_pending_w;
			end
			3'd5: begin
				interface12_bank_bus_dat_r <= csrbank12_ev_enable0_w;
			end
		endcase
	end
	gpioin3_in_re <= csrbank12_in_re;
	if (csrbank12_mode0_re) begin
		gpioin3_gpioin3_mode_storage <= csrbank12_mode0_r;
	end
	gpioin3_gpioin3_mode_re <= csrbank12_mode0_re;
	if (csrbank12_edge0_re) begin
		gpioin3_gpioin3_edge_storage <= csrbank12_edge0_r;
	end
	gpioin3_gpioin3_edge_re <= csrbank12_edge0_re;
	gpioin3_status_re <= csrbank12_ev_status_re;
	if (csrbank12_ev_pending_re) begin
		gpioin3_pending_r <= csrbank12_ev_pending_r;
	end
	gpioin3_pending_re <= csrbank12_ev_pending_re;
	if (csrbank12_ev_enable0_re) begin
		gpioin3_enable_storage <= csrbank12_ev_enable0_r;
	end
	gpioin3_enable_re <= csrbank12_ev_enable0_re;
	interface13_bank_bus_dat_r <= 1'd0;
	if (csrbank13_sel) begin
		case (interface13_bank_bus_adr[8:0])
			1'd0: begin
				interface13_bank_bus_dat_r <= csrbank13_in_w;
			end
			1'd1: begin
				interface13_bank_bus_dat_r <= csrbank13_mode0_w;
			end
			2'd2: begin
				interface13_bank_bus_dat_r <= csrbank13_edge0_w;
			end
			2'd3: begin
				interface13_bank_bus_dat_r <= csrbank13_ev_status_w;
			end
			3'd4: begin
				interface13_bank_bus_dat_r <= csrbank13_ev_pending_w;
			end
			3'd5: begin
				interface13_bank_bus_dat_r <= csrbank13_ev_enable0_w;
			end
		endcase
	end
	gpioin4_in_re <= csrbank13_in_re;
	if (csrbank13_mode0_re) begin
		gpioin4_gpioin4_mode_storage <= csrbank13_mode0_r;
	end
	gpioin4_gpioin4_mode_re <= csrbank13_mode0_re;
	if (csrbank13_edge0_re) begin
		gpioin4_gpioin4_edge_storage <= csrbank13_edge0_r;
	end
	gpioin4_gpioin4_edge_re <= csrbank13_edge0_re;
	gpioin4_status_re <= csrbank13_ev_status_re;
	if (csrbank13_ev_pending_re) begin
		gpioin4_pending_r <= csrbank13_ev_pending_r;
	end
	gpioin4_pending_re <= csrbank13_ev_pending_re;
	if (csrbank13_ev_enable0_re) begin
		gpioin4_enable_storage <= csrbank13_ev_enable0_r;
	end
	gpioin4_enable_re <= csrbank13_ev_enable0_re;
	interface14_bank_bus_dat_r <= 1'd0;
	if (csrbank14_sel) begin
		case (interface14_bank_bus_adr[8:0])
			1'd0: begin
				interface14_bank_bus_dat_r <= csrbank14_in_w;
			end
			1'd1: begin
				interface14_bank_bus_dat_r <= csrbank14_mode0_w;
			end
			2'd2: begin
				interface14_bank_bus_dat_r <= csrbank14_edge0_w;
			end
			2'd3: begin
				interface14_bank_bus_dat_r <= csrbank14_ev_status_w;
			end
			3'd4: begin
				interface14_bank_bus_dat_r <= csrbank14_ev_pending_w;
			end
			3'd5: begin
				interface14_bank_bus_dat_r <= csrbank14_ev_enable0_w;
			end
		endcase
	end
	gpioin5_in_re <= csrbank14_in_re;
	if (csrbank14_mode0_re) begin
		gpioin5_gpioin5_mode_storage <= csrbank14_mode0_r;
	end
	gpioin5_gpioin5_mode_re <= csrbank14_mode0_re;
	if (csrbank14_edge0_re) begin
		gpioin5_gpioin5_edge_storage <= csrbank14_edge0_r;
	end
	gpioin5_gpioin5_edge_re <= csrbank14_edge0_re;
	gpioin5_status_re <= csrbank14_ev_status_re;
	if (csrbank14_ev_pending_re) begin
		gpioin5_pending_r <= csrbank14_ev_pending_r;
	end
	gpioin5_pending_re <= csrbank14_ev_pending_re;
	if (csrbank14_ev_enable0_re) begin
		gpioin5_enable_storage <= csrbank14_ev_enable0_r;
	end
	gpioin5_enable_re <= csrbank14_ev_enable0_re;
	interface15_bank_bus_dat_r <= 1'd0;
	if (csrbank15_sel) begin
		case (interface15_bank_bus_adr[8:0])
			1'd0: begin
				interface15_bank_bus_dat_r <= csrbank15_out0_w;
			end
		endcase
	end
	if (csrbank15_out0_re) begin
		user_irq_ena_storage[2:0] <= csrbank15_out0_r;
	end
	user_irq_ena_re <= csrbank15_out0_re;
	if (sys_rst_1) begin
		mgmtsoc_reset_storage <= 2'd0;
		mgmtsoc_reset_re <= 1'd0;
		mgmtsoc_scratch_storage <= 32'd305419896;
		mgmtsoc_scratch_re <= 1'd0;
		mgmtsoc_bus_errors_re <= 1'd0;
		mgmtsoc_bus_errors <= 32'd0;
		serial_tx <= 1'd1;
		mgmtsoc_tx_tick <= 1'd0;
		mgmtsoc_rx_tick <= 1'd0;
		mgmtsoc_rx_rx_d <= 1'd0;
		mgmtsoc_uart_txfull_re <= 1'd0;
		mgmtsoc_uart_rxempty_re <= 1'd0;
		mgmtsoc_uart_tx_pending <= 1'd0;
		mgmtsoc_uart_tx_trigger_d <= 1'd0;
		mgmtsoc_uart_rx_pending <= 1'd0;
		mgmtsoc_uart_rx_trigger_d <= 1'd0;
		mgmtsoc_uart_status_re <= 1'd0;
		mgmtsoc_uart_pending_re <= 1'd0;
		mgmtsoc_uart_pending_r <= 2'd0;
		mgmtsoc_uart_enable_storage <= 2'd0;
		mgmtsoc_uart_enable_re <= 1'd0;
		mgmtsoc_uart_txempty_re <= 1'd0;
		mgmtsoc_uart_rxfull_re <= 1'd0;
		mgmtsoc_uart_tx_fifo_readable <= 1'd0;
		mgmtsoc_uart_tx_fifo_level0 <= 5'd0;
		mgmtsoc_uart_tx_fifo_produce <= 4'd0;
		mgmtsoc_uart_tx_fifo_consume <= 4'd0;
		mgmtsoc_uart_rx_fifo_readable <= 1'd0;
		mgmtsoc_uart_rx_fifo_level0 <= 5'd0;
		mgmtsoc_uart_rx_fifo_produce <= 4'd0;
		mgmtsoc_uart_rx_fifo_consume <= 4'd0;
		mgmtsoc_timer_load_storage <= 32'd0;
		mgmtsoc_timer_load_re <= 1'd0;
		mgmtsoc_timer_reload_storage <= 32'd0;
		mgmtsoc_timer_reload_re <= 1'd0;
		mgmtsoc_timer_en_storage <= 1'd0;
		mgmtsoc_timer_en_re <= 1'd0;
		mgmtsoc_timer_update_value_storage <= 1'd0;
		mgmtsoc_timer_update_value_re <= 1'd0;
		mgmtsoc_timer_value_status <= 32'd0;
		mgmtsoc_timer_value_re <= 1'd0;
		mgmtsoc_timer_zero_pending <= 1'd0;
		mgmtsoc_timer_zero_trigger_d <= 1'd0;
		mgmtsoc_timer_status_re <= 1'd0;
		mgmtsoc_timer_pending_re <= 1'd0;
		mgmtsoc_timer_pending_r <= 1'd0;
		mgmtsoc_timer_enable_storage <= 1'd0;
		mgmtsoc_timer_enable_re <= 1'd0;
		mgmtsoc_timer_value <= 32'd0;
		spi_master_clk <= 1'd0;
		spi_master_cs_n <= 1'd0;
		spi_master_mosi <= 1'd0;
		spi_master_miso_1 <= 8'd0;
		spi_master_control_storage <= 16'd0;
		spi_master_control_re <= 1'd0;
		spi_master_status_re <= 1'd0;
		spi_master_mosi_re <= 1'd0;
		spi_master_miso_re <= 1'd0;
		spi_master_cs_storage <= 17'd1;
		spi_master_cs_re <= 1'd0;
		spi_master_loopback_storage <= 1'd0;
		spi_master_loopback_re <= 1'd0;
		spi_master_count <= 3'd0;
		spi_master_clk_divider1 <= 16'd0;
		spi_master_mosi_data <= 8'd0;
		spi_master_mosi_sel <= 3'd0;
		spi_master_miso_data <= 8'd0;
		spimaster_storage <= 16'd100;
		spimaster_re <= 1'd0;
		bus_ack <= 1'd0;
		mgmtsoc_litespisdrphycore_storage <= 8'd1;
		mgmtsoc_litespisdrphycore_re <= 1'd0;
		mgmtsoc_litespisdrphycore_cnt <= 8'd0;
		mgmtsoc_litespisdrphycore_clk <= 1'd0;
		mgmtsoc_litespisdrphycore_posedge_reg <= 1'd0;
		mgmtsoc_litespisdrphycore_posedge_reg2 <= 1'd0;
		mgmtsoc_litespisdrphycore_count <= 4'd11;
		mgmtsoc_litespimmap_burst_cs <= 1'd0;
		mgmtsoc_litespimmap_count <= 9'd256;
		mgmtsoc_litespimmap_storage <= 8'd0;
		mgmtsoc_litespimmap_re <= 1'd0;
		mgmtsoc_master_cs_storage <= 1'd0;
		mgmtsoc_master_cs_re <= 1'd0;
		mgmtsoc_master_phyconfig_storage <= 24'd0;
		mgmtsoc_master_phyconfig_re <= 1'd0;
		mgmtsoc_master_status_re <= 1'd0;
		mgmtsoc_master_tx_fifo_source_valid <= 1'd0;
		mgmtsoc_master_tx_fifo_source_payload_data <= 32'd0;
		mgmtsoc_master_tx_fifo_source_payload_len <= 6'd0;
		mgmtsoc_master_tx_fifo_source_payload_width <= 4'd0;
		mgmtsoc_master_tx_fifo_source_payload_mask <= 8'd0;
		mgmtsoc_master_rx_fifo_source_valid <= 1'd0;
		mgmtsoc_master_rx_fifo_source_payload_data <= 32'd0;
		serial_dbg_tx <= 1'd1;
		uart_bridge_tx_tick <= 1'd0;
		uart_bridge_rx_tick <= 1'd0;
		uart_bridge_rx_rx_d <= 1'd0;
		uart_bridge_incr <= 1'd0;
		uart_bridge_count <= 20'd1000000;
		gpio_mode1_storage <= 1'd0;
		gpio_mode1_re <= 1'd0;
		gpio_mode0_storage <= 1'd0;
		gpio_mode0_re <= 1'd0;
		gpio_ien_storage <= 1'd0;
		gpio_ien_re <= 1'd0;
		gpio_oe_storage <= 1'd0;
		gpio_oe_re <= 1'd0;
		gpio_in_re <= 1'd0;
		gpio_out_storage <= 1'd0;
		gpio_out_re <= 1'd0;
		la_ien_storage <= 128'd0;
		la_ien_re <= 1'd0;
		la_oe_storage <= 128'd0;
		la_oe_re <= 1'd0;
		la_in_re <= 1'd0;
		la_out_storage <= 128'd0;
		la_out_re <= 1'd0;
		mprj_wb_iena_storage <= 1'd0;
		mprj_wb_iena_re <= 1'd0;
		user_irq_ena_storage <= 3'd0;
		user_irq_ena_re <= 1'd0;
		gpioin0_in_re <= 1'd0;
		gpioin0_gpioin0_mode_storage <= 1'd0;
		gpioin0_gpioin0_mode_re <= 1'd0;
		gpioin0_gpioin0_edge_storage <= 1'd0;
		gpioin0_gpioin0_edge_re <= 1'd0;
		gpioin0_gpioin0_in_pads_n_d <= 1'd0;
		gpioin0_gpioin0_pending <= 1'd0;
		gpioin0_gpioin0_trigger_d <= 1'd0;
		gpioin1_in_re <= 1'd0;
		gpioin1_gpioin1_mode_storage <= 1'd0;
		gpioin1_gpioin1_mode_re <= 1'd0;
		gpioin1_gpioin1_edge_storage <= 1'd0;
		gpioin1_gpioin1_edge_re <= 1'd0;
		gpioin1_gpioin1_in_pads_n_d <= 1'd0;
		gpioin1_gpioin1_pending <= 1'd0;
		gpioin1_gpioin1_trigger_d <= 1'd0;
		gpioin2_in_re <= 1'd0;
		gpioin2_gpioin2_mode_storage <= 1'd0;
		gpioin2_gpioin2_mode_re <= 1'd0;
		gpioin2_gpioin2_edge_storage <= 1'd0;
		gpioin2_gpioin2_edge_re <= 1'd0;
		gpioin2_gpioin2_in_pads_n_d <= 1'd0;
		gpioin2_gpioin2_pending <= 1'd0;
		gpioin2_gpioin2_trigger_d <= 1'd0;
		gpioin3_in_re <= 1'd0;
		gpioin3_gpioin3_mode_storage <= 1'd0;
		gpioin3_gpioin3_mode_re <= 1'd0;
		gpioin3_gpioin3_edge_storage <= 1'd0;
		gpioin3_gpioin3_edge_re <= 1'd0;
		gpioin3_gpioin3_in_pads_n_d <= 1'd0;
		gpioin3_gpioin3_pending <= 1'd0;
		gpioin3_gpioin3_trigger_d <= 1'd0;
		gpioin4_in_re <= 1'd0;
		gpioin4_gpioin4_mode_storage <= 1'd0;
		gpioin4_gpioin4_mode_re <= 1'd0;
		gpioin4_gpioin4_edge_storage <= 1'd0;
		gpioin4_gpioin4_edge_re <= 1'd0;
		gpioin4_gpioin4_in_pads_n_d <= 1'd0;
		gpioin4_gpioin4_pending <= 1'd0;
		gpioin4_gpioin4_trigger_d <= 1'd0;
		gpioin5_in_re <= 1'd0;
		gpioin5_gpioin5_mode_storage <= 1'd0;
		gpioin5_gpioin5_mode_re <= 1'd0;
		gpioin5_gpioin5_edge_storage <= 1'd0;
		gpioin5_gpioin5_edge_re <= 1'd0;
		gpioin5_gpioin5_in_pads_n_d <= 1'd0;
		gpioin5_gpioin5_pending <= 1'd0;
		gpioin5_gpioin5_trigger_d <= 1'd0;
		rs232phy_rs232phytx_state <= 1'd0;
		rs232phy_rs232phyrx_state <= 1'd0;
		spimaster_state <= 2'd0;
		litespiphy_state <= 2'd0;
		litespi_grant <= 1'd0;
		litespi_state <= 4'd0;
		uartwishbonebridge_rs232phytx_state <= 1'd0;
		uartwishbonebridge_rs232phyrx_state <= 1'd0;
		uartwishbonebridge_state <= 3'd0;
		gpioin0_status_re <= 1'd0;
		gpioin0_pending_re <= 1'd0;
		gpioin0_pending_r <= 1'd0;
		gpioin0_enable_storage <= 1'd0;
		gpioin0_enable_re <= 1'd0;
		gpioin1_status_re <= 1'd0;
		gpioin1_pending_re <= 1'd0;
		gpioin1_pending_r <= 1'd0;
		gpioin1_enable_storage <= 1'd0;
		gpioin1_enable_re <= 1'd0;
		gpioin2_status_re <= 1'd0;
		gpioin2_pending_re <= 1'd0;
		gpioin2_pending_r <= 1'd0;
		gpioin2_enable_storage <= 1'd0;
		gpioin2_enable_re <= 1'd0;
		gpioin3_status_re <= 1'd0;
		gpioin3_pending_re <= 1'd0;
		gpioin3_pending_r <= 1'd0;
		gpioin3_enable_storage <= 1'd0;
		gpioin3_enable_re <= 1'd0;
		gpioin4_status_re <= 1'd0;
		gpioin4_pending_re <= 1'd0;
		gpioin4_pending_r <= 1'd0;
		gpioin4_enable_storage <= 1'd0;
		gpioin4_enable_re <= 1'd0;
		gpioin5_status_re <= 1'd0;
		gpioin5_pending_re <= 1'd0;
		gpioin5_pending_r <= 1'd0;
		gpioin5_enable_storage <= 1'd0;
		gpioin5_enable_re <= 1'd0;
		grant <= 1'd0;
		slave_sel_r <= 3'd0;
		count <= 20'd1000000;
		state <= 1'd0;
	end
	multiregimpl0_regs0 <= serial_rx;
	multiregimpl0_regs1 <= multiregimpl0_regs0;
	multiregimpl1_regs0 <= serial_dbg_rx;
	multiregimpl1_regs1 <= multiregimpl1_regs0;
	multiregimpl2_regs0 <= gpio_in_pad;
	multiregimpl2_regs1 <= multiregimpl2_regs0;
	multiregimpl3_regs0 <= la_input[0];
	multiregimpl3_regs1 <= multiregimpl3_regs0;
	multiregimpl4_regs0 <= la_input[1];
	multiregimpl4_regs1 <= multiregimpl4_regs0;
	multiregimpl5_regs0 <= la_input[2];
	multiregimpl5_regs1 <= multiregimpl5_regs0;
	multiregimpl6_regs0 <= la_input[3];
	multiregimpl6_regs1 <= multiregimpl6_regs0;
	multiregimpl7_regs0 <= la_input[4];
	multiregimpl7_regs1 <= multiregimpl7_regs0;
	multiregimpl8_regs0 <= la_input[5];
	multiregimpl8_regs1 <= multiregimpl8_regs0;
	multiregimpl9_regs0 <= la_input[6];
	multiregimpl9_regs1 <= multiregimpl9_regs0;
	multiregimpl10_regs0 <= la_input[7];
	multiregimpl10_regs1 <= multiregimpl10_regs0;
	multiregimpl11_regs0 <= la_input[8];
	multiregimpl11_regs1 <= multiregimpl11_regs0;
	multiregimpl12_regs0 <= la_input[9];
	multiregimpl12_regs1 <= multiregimpl12_regs0;
	multiregimpl13_regs0 <= la_input[10];
	multiregimpl13_regs1 <= multiregimpl13_regs0;
	multiregimpl14_regs0 <= la_input[11];
	multiregimpl14_regs1 <= multiregimpl14_regs0;
	multiregimpl15_regs0 <= la_input[12];
	multiregimpl15_regs1 <= multiregimpl15_regs0;
	multiregimpl16_regs0 <= la_input[13];
	multiregimpl16_regs1 <= multiregimpl16_regs0;
	multiregimpl17_regs0 <= la_input[14];
	multiregimpl17_regs1 <= multiregimpl17_regs0;
	multiregimpl18_regs0 <= la_input[15];
	multiregimpl18_regs1 <= multiregimpl18_regs0;
	multiregimpl19_regs0 <= la_input[16];
	multiregimpl19_regs1 <= multiregimpl19_regs0;
	multiregimpl20_regs0 <= la_input[17];
	multiregimpl20_regs1 <= multiregimpl20_regs0;
	multiregimpl21_regs0 <= la_input[18];
	multiregimpl21_regs1 <= multiregimpl21_regs0;
	multiregimpl22_regs0 <= la_input[19];
	multiregimpl22_regs1 <= multiregimpl22_regs0;
	multiregimpl23_regs0 <= la_input[20];
	multiregimpl23_regs1 <= multiregimpl23_regs0;
	multiregimpl24_regs0 <= la_input[21];
	multiregimpl24_regs1 <= multiregimpl24_regs0;
	multiregimpl25_regs0 <= la_input[22];
	multiregimpl25_regs1 <= multiregimpl25_regs0;
	multiregimpl26_regs0 <= la_input[23];
	multiregimpl26_regs1 <= multiregimpl26_regs0;
	multiregimpl27_regs0 <= la_input[24];
	multiregimpl27_regs1 <= multiregimpl27_regs0;
	multiregimpl28_regs0 <= la_input[25];
	multiregimpl28_regs1 <= multiregimpl28_regs0;
	multiregimpl29_regs0 <= la_input[26];
	multiregimpl29_regs1 <= multiregimpl29_regs0;
	multiregimpl30_regs0 <= la_input[27];
	multiregimpl30_regs1 <= multiregimpl30_regs0;
	multiregimpl31_regs0 <= la_input[28];
	multiregimpl31_regs1 <= multiregimpl31_regs0;
	multiregimpl32_regs0 <= la_input[29];
	multiregimpl32_regs1 <= multiregimpl32_regs0;
	multiregimpl33_regs0 <= la_input[30];
	multiregimpl33_regs1 <= multiregimpl33_regs0;
	multiregimpl34_regs0 <= la_input[31];
	multiregimpl34_regs1 <= multiregimpl34_regs0;
	multiregimpl35_regs0 <= la_input[32];
	multiregimpl35_regs1 <= multiregimpl35_regs0;
	multiregimpl36_regs0 <= la_input[33];
	multiregimpl36_regs1 <= multiregimpl36_regs0;
	multiregimpl37_regs0 <= la_input[34];
	multiregimpl37_regs1 <= multiregimpl37_regs0;
	multiregimpl38_regs0 <= la_input[35];
	multiregimpl38_regs1 <= multiregimpl38_regs0;
	multiregimpl39_regs0 <= la_input[36];
	multiregimpl39_regs1 <= multiregimpl39_regs0;
	multiregimpl40_regs0 <= la_input[37];
	multiregimpl40_regs1 <= multiregimpl40_regs0;
	multiregimpl41_regs0 <= la_input[38];
	multiregimpl41_regs1 <= multiregimpl41_regs0;
	multiregimpl42_regs0 <= la_input[39];
	multiregimpl42_regs1 <= multiregimpl42_regs0;
	multiregimpl43_regs0 <= la_input[40];
	multiregimpl43_regs1 <= multiregimpl43_regs0;
	multiregimpl44_regs0 <= la_input[41];
	multiregimpl44_regs1 <= multiregimpl44_regs0;
	multiregimpl45_regs0 <= la_input[42];
	multiregimpl45_regs1 <= multiregimpl45_regs0;
	multiregimpl46_regs0 <= la_input[43];
	multiregimpl46_regs1 <= multiregimpl46_regs0;
	multiregimpl47_regs0 <= la_input[44];
	multiregimpl47_regs1 <= multiregimpl47_regs0;
	multiregimpl48_regs0 <= la_input[45];
	multiregimpl48_regs1 <= multiregimpl48_regs0;
	multiregimpl49_regs0 <= la_input[46];
	multiregimpl49_regs1 <= multiregimpl49_regs0;
	multiregimpl50_regs0 <= la_input[47];
	multiregimpl50_regs1 <= multiregimpl50_regs0;
	multiregimpl51_regs0 <= la_input[48];
	multiregimpl51_regs1 <= multiregimpl51_regs0;
	multiregimpl52_regs0 <= la_input[49];
	multiregimpl52_regs1 <= multiregimpl52_regs0;
	multiregimpl53_regs0 <= la_input[50];
	multiregimpl53_regs1 <= multiregimpl53_regs0;
	multiregimpl54_regs0 <= la_input[51];
	multiregimpl54_regs1 <= multiregimpl54_regs0;
	multiregimpl55_regs0 <= la_input[52];
	multiregimpl55_regs1 <= multiregimpl55_regs0;
	multiregimpl56_regs0 <= la_input[53];
	multiregimpl56_regs1 <= multiregimpl56_regs0;
	multiregimpl57_regs0 <= la_input[54];
	multiregimpl57_regs1 <= multiregimpl57_regs0;
	multiregimpl58_regs0 <= la_input[55];
	multiregimpl58_regs1 <= multiregimpl58_regs0;
	multiregimpl59_regs0 <= la_input[56];
	multiregimpl59_regs1 <= multiregimpl59_regs0;
	multiregimpl60_regs0 <= la_input[57];
	multiregimpl60_regs1 <= multiregimpl60_regs0;
	multiregimpl61_regs0 <= la_input[58];
	multiregimpl61_regs1 <= multiregimpl61_regs0;
	multiregimpl62_regs0 <= la_input[59];
	multiregimpl62_regs1 <= multiregimpl62_regs0;
	multiregimpl63_regs0 <= la_input[60];
	multiregimpl63_regs1 <= multiregimpl63_regs0;
	multiregimpl64_regs0 <= la_input[61];
	multiregimpl64_regs1 <= multiregimpl64_regs0;
	multiregimpl65_regs0 <= la_input[62];
	multiregimpl65_regs1 <= multiregimpl65_regs0;
	multiregimpl66_regs0 <= la_input[63];
	multiregimpl66_regs1 <= multiregimpl66_regs0;
	multiregimpl67_regs0 <= la_input[64];
	multiregimpl67_regs1 <= multiregimpl67_regs0;
	multiregimpl68_regs0 <= la_input[65];
	multiregimpl68_regs1 <= multiregimpl68_regs0;
	multiregimpl69_regs0 <= la_input[66];
	multiregimpl69_regs1 <= multiregimpl69_regs0;
	multiregimpl70_regs0 <= la_input[67];
	multiregimpl70_regs1 <= multiregimpl70_regs0;
	multiregimpl71_regs0 <= la_input[68];
	multiregimpl71_regs1 <= multiregimpl71_regs0;
	multiregimpl72_regs0 <= la_input[69];
	multiregimpl72_regs1 <= multiregimpl72_regs0;
	multiregimpl73_regs0 <= la_input[70];
	multiregimpl73_regs1 <= multiregimpl73_regs0;
	multiregimpl74_regs0 <= la_input[71];
	multiregimpl74_regs1 <= multiregimpl74_regs0;
	multiregimpl75_regs0 <= la_input[72];
	multiregimpl75_regs1 <= multiregimpl75_regs0;
	multiregimpl76_regs0 <= la_input[73];
	multiregimpl76_regs1 <= multiregimpl76_regs0;
	multiregimpl77_regs0 <= la_input[74];
	multiregimpl77_regs1 <= multiregimpl77_regs0;
	multiregimpl78_regs0 <= la_input[75];
	multiregimpl78_regs1 <= multiregimpl78_regs0;
	multiregimpl79_regs0 <= la_input[76];
	multiregimpl79_regs1 <= multiregimpl79_regs0;
	multiregimpl80_regs0 <= la_input[77];
	multiregimpl80_regs1 <= multiregimpl80_regs0;
	multiregimpl81_regs0 <= la_input[78];
	multiregimpl81_regs1 <= multiregimpl81_regs0;
	multiregimpl82_regs0 <= la_input[79];
	multiregimpl82_regs1 <= multiregimpl82_regs0;
	multiregimpl83_regs0 <= la_input[80];
	multiregimpl83_regs1 <= multiregimpl83_regs0;
	multiregimpl84_regs0 <= la_input[81];
	multiregimpl84_regs1 <= multiregimpl84_regs0;
	multiregimpl85_regs0 <= la_input[82];
	multiregimpl85_regs1 <= multiregimpl85_regs0;
	multiregimpl86_regs0 <= la_input[83];
	multiregimpl86_regs1 <= multiregimpl86_regs0;
	multiregimpl87_regs0 <= la_input[84];
	multiregimpl87_regs1 <= multiregimpl87_regs0;
	multiregimpl88_regs0 <= la_input[85];
	multiregimpl88_regs1 <= multiregimpl88_regs0;
	multiregimpl89_regs0 <= la_input[86];
	multiregimpl89_regs1 <= multiregimpl89_regs0;
	multiregimpl90_regs0 <= la_input[87];
	multiregimpl90_regs1 <= multiregimpl90_regs0;
	multiregimpl91_regs0 <= la_input[88];
	multiregimpl91_regs1 <= multiregimpl91_regs0;
	multiregimpl92_regs0 <= la_input[89];
	multiregimpl92_regs1 <= multiregimpl92_regs0;
	multiregimpl93_regs0 <= la_input[90];
	multiregimpl93_regs1 <= multiregimpl93_regs0;
	multiregimpl94_regs0 <= la_input[91];
	multiregimpl94_regs1 <= multiregimpl94_regs0;
	multiregimpl95_regs0 <= la_input[92];
	multiregimpl95_regs1 <= multiregimpl95_regs0;
	multiregimpl96_regs0 <= la_input[93];
	multiregimpl96_regs1 <= multiregimpl96_regs0;
	multiregimpl97_regs0 <= la_input[94];
	multiregimpl97_regs1 <= multiregimpl97_regs0;
	multiregimpl98_regs0 <= la_input[95];
	multiregimpl98_regs1 <= multiregimpl98_regs0;
	multiregimpl99_regs0 <= la_input[96];
	multiregimpl99_regs1 <= multiregimpl99_regs0;
	multiregimpl100_regs0 <= la_input[97];
	multiregimpl100_regs1 <= multiregimpl100_regs0;
	multiregimpl101_regs0 <= la_input[98];
	multiregimpl101_regs1 <= multiregimpl101_regs0;
	multiregimpl102_regs0 <= la_input[99];
	multiregimpl102_regs1 <= multiregimpl102_regs0;
	multiregimpl103_regs0 <= la_input[100];
	multiregimpl103_regs1 <= multiregimpl103_regs0;
	multiregimpl104_regs0 <= la_input[101];
	multiregimpl104_regs1 <= multiregimpl104_regs0;
	multiregimpl105_regs0 <= la_input[102];
	multiregimpl105_regs1 <= multiregimpl105_regs0;
	multiregimpl106_regs0 <= la_input[103];
	multiregimpl106_regs1 <= multiregimpl106_regs0;
	multiregimpl107_regs0 <= la_input[104];
	multiregimpl107_regs1 <= multiregimpl107_regs0;
	multiregimpl108_regs0 <= la_input[105];
	multiregimpl108_regs1 <= multiregimpl108_regs0;
	multiregimpl109_regs0 <= la_input[106];
	multiregimpl109_regs1 <= multiregimpl109_regs0;
	multiregimpl110_regs0 <= la_input[107];
	multiregimpl110_regs1 <= multiregimpl110_regs0;
	multiregimpl111_regs0 <= la_input[108];
	multiregimpl111_regs1 <= multiregimpl111_regs0;
	multiregimpl112_regs0 <= la_input[109];
	multiregimpl112_regs1 <= multiregimpl112_regs0;
	multiregimpl113_regs0 <= la_input[110];
	multiregimpl113_regs1 <= multiregimpl113_regs0;
	multiregimpl114_regs0 <= la_input[111];
	multiregimpl114_regs1 <= multiregimpl114_regs0;
	multiregimpl115_regs0 <= la_input[112];
	multiregimpl115_regs1 <= multiregimpl115_regs0;
	multiregimpl116_regs0 <= la_input[113];
	multiregimpl116_regs1 <= multiregimpl116_regs0;
	multiregimpl117_regs0 <= la_input[114];
	multiregimpl117_regs1 <= multiregimpl117_regs0;
	multiregimpl118_regs0 <= la_input[115];
	multiregimpl118_regs1 <= multiregimpl118_regs0;
	multiregimpl119_regs0 <= la_input[116];
	multiregimpl119_regs1 <= multiregimpl119_regs0;
	multiregimpl120_regs0 <= la_input[117];
	multiregimpl120_regs1 <= multiregimpl120_regs0;
	multiregimpl121_regs0 <= la_input[118];
	multiregimpl121_regs1 <= multiregimpl121_regs0;
	multiregimpl122_regs0 <= la_input[119];
	multiregimpl122_regs1 <= multiregimpl122_regs0;
	multiregimpl123_regs0 <= la_input[120];
	multiregimpl123_regs1 <= multiregimpl123_regs0;
	multiregimpl124_regs0 <= la_input[121];
	multiregimpl124_regs1 <= multiregimpl124_regs0;
	multiregimpl125_regs0 <= la_input[122];
	multiregimpl125_regs1 <= multiregimpl125_regs0;
	multiregimpl126_regs0 <= la_input[123];
	multiregimpl126_regs1 <= multiregimpl126_regs0;
	multiregimpl127_regs0 <= la_input[124];
	multiregimpl127_regs1 <= multiregimpl127_regs0;
	multiregimpl128_regs0 <= la_input[125];
	multiregimpl128_regs1 <= multiregimpl128_regs0;
	multiregimpl129_regs0 <= la_input[126];
	multiregimpl129_regs1 <= multiregimpl129_regs0;
	multiregimpl130_regs0 <= la_input[127];
	multiregimpl130_regs1 <= multiregimpl130_regs0;
	multiregimpl131_regs0 <= user_irq[0];
	multiregimpl131_regs1 <= multiregimpl131_regs0;
	multiregimpl132_regs0 <= user_irq[1];
	multiregimpl132_regs1 <= multiregimpl132_regs0;
	multiregimpl133_regs0 <= user_irq[2];
	multiregimpl133_regs1 <= multiregimpl133_regs0;
	multiregimpl134_regs0 <= user_irq[3];
	multiregimpl134_regs1 <= multiregimpl134_regs0;
	multiregimpl135_regs0 <= user_irq[4];
	multiregimpl135_regs1 <= multiregimpl135_regs0;
	multiregimpl136_regs0 <= user_irq[5];
	multiregimpl136_regs1 <= multiregimpl136_regs0;
end

reg [9:0] storage[0:15];
reg [9:0] memdat;
reg [9:0] memdat_1;
always @(posedge sys_clk_1) begin
	if (mgmtsoc_uart_tx_fifo_wrport_we)
		storage[mgmtsoc_uart_tx_fifo_wrport_adr] <= mgmtsoc_uart_tx_fifo_wrport_dat_w;
	memdat <= storage[mgmtsoc_uart_tx_fifo_wrport_adr];
end

always @(posedge sys_clk_1) begin
	if (mgmtsoc_uart_tx_fifo_rdport_re)
		memdat_1 <= storage[mgmtsoc_uart_tx_fifo_rdport_adr];
end

assign mgmtsoc_uart_tx_fifo_wrport_dat_r = memdat;
assign mgmtsoc_uart_tx_fifo_rdport_dat_r = memdat_1;

reg [9:0] storage_1[0:15];
reg [9:0] memdat_2;
reg [9:0] memdat_3;
always @(posedge sys_clk_1) begin
	if (mgmtsoc_uart_rx_fifo_wrport_we)
		storage_1[mgmtsoc_uart_rx_fifo_wrport_adr] <= mgmtsoc_uart_rx_fifo_wrport_dat_w;
	memdat_2 <= storage_1[mgmtsoc_uart_rx_fifo_wrport_adr];
end

always @(posedge sys_clk_1) begin
	if (mgmtsoc_uart_rx_fifo_rdport_re)
		memdat_3 <= storage_1[mgmtsoc_uart_rx_fifo_rdport_adr];
end

assign mgmtsoc_uart_rx_fifo_wrport_dat_r = memdat_2;
assign mgmtsoc_uart_rx_fifo_rdport_dat_r = memdat_3;

sram_1rw1r_32_256_8_sky130 sram_1rw1r_32_256_8_sky130(
	.addr0(bus_adr[7:0]),
	.clk0(sys_clk_1),
	.csb0(cs_b0),
	.din0(datain0),
	.web0(wren_b0),
	.wmask0(maskwren0),
	.dout0(dataout0)
);

sram_1rw1r_32_256_8_sky130 sram_1rw1r_32_256_8_sky130_1(
	.addr0(bus_adr[7:0]),
	.clk0(sys_clk_1),
	.csb0(cs_b1),
	.din0(datain1),
	.web0(wren_b1),
	.wmask0(maskwren1),
	.dout0(dataout1)
);

picorv32 #(
	.CATCH_ILLINSN(1'd1),
	.CATCH_MISALIGN(1'd0),
	.ENABLE_COUNTERS(1'd0),
	.ENABLE_COUNTERS64(1'd0),
	.ENABLE_DIV(1'd0),
	.ENABLE_FAST_MUL(1'd0),
	.ENABLE_IRQ(1'd1),
	.ENABLE_IRQ_QREGS(1'd1),
	.ENABLE_IRQ_TIMER(1'd0),
	.ENABLE_MUL(1'd0),
	.ENABLE_PCPI(1'd0),
	.ENABLE_REGS_16_31(1'd1),
	.ENABLE_REGS_DUALPORT(1'd1),
	.ENABLE_TRACE(1'd0),
	.LATCHED_IRQ(32'd4294967295),
	.LATCHED_MEM_RDATA(1'd0),
	.MASKED_IRQ(1'd0),
	.PROGADDR_IRQ(5'd16),
	.PROGADDR_RESET(1'd0),
	.STACKADDR(32'd4294967295),
	.TWO_CYCLE_ALU(1'd0),
	.TWO_CYCLE_COMPARE(1'd0),
	.TWO_STAGE_SHIFT(1'd0)
) picorv32 (
	.clk(sys_clk_1),
	.irq(mgmtsoc_picorv32_interrupt),
	.mem_rdata(mgmtsoc_picorv32_mem_rdata),
	.mem_ready(mgmtsoc_picorv32_mem_ready),
	.pcpi_rd(1'd0),
	.pcpi_ready(1'd0),
	.pcpi_wait(1'd0),
	.pcpi_wr(1'd0),
	.resetn((~(sys_rst_1 | mgmtsoc_picorv32_reset))),
	.eoi(mgmtsoc_picorv329),
	.mem_addr(mgmtsoc_picorv32_mem_addr),
	.mem_instr(mgmtsoc_picorv32_mem_instr),
	.mem_la_addr(mgmtsoc_picorv322),
	.mem_la_read(mgmtsoc_picorv320),
	.mem_la_wdata(mgmtsoc_picorv323),
	.mem_la_write(mgmtsoc_picorv321),
	.mem_la_wstrb(mgmtsoc_picorv324),
	.mem_valid(mgmtsoc_picorv32_mem_valid),
	.mem_wdata(mgmtsoc_picorv32_mem_wdata),
	.mem_wstrb(mgmtsoc_picorv32_mem_wstrb),
	.pcpi_insn(mgmtsoc_picorv326),
	.pcpi_rs1(mgmtsoc_picorv327),
	.pcpi_rs2(mgmtsoc_picorv328),
	.pcpi_valid(mgmtsoc_picorv325),
	.trap(mgmtsoc_picorv32_trap)
);

endmodule
